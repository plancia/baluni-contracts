{
  "address": "0xF1ed2C1e71ebBebE3b035326d8258ffd51EEfD77",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "AgentCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "ChangeBpsFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "ChangeLiquidateFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct BaluniAgent.Call[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensReturn",
          "type": "address[]"
        }
      ],
      "name": "Execute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_BPS_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_BPS_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_BPS_LIQUIDATE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_MAX_BPS_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceStakedOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "name": "burnTokensAndSwapToUSDC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "calculateRewardsEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "changeBpsFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "changeBpsLiquidateFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct BaluniAgent.Call[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "tokensReturn",
          "type": "address[]"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAgentAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBpsFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getUSDCShareValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listAllTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balAmountToMint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "mintERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balAmountToMint",
          "type": "uint256"
        }
      ],
      "name": "mintUSDC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performArbitrage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakeTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenBalanceMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValuation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapFactory",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "updateRewardIndexPublic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userAgents",
      "outputs": [
        {
          "internalType": "contract BaluniAgent",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f563689b9c0b5ad1f11a3884293c816daf98608161af7c311734dfa94d128e4",
  "receipt": {
    "to": null,
    "from": "0x84F07be28ecd5b29Df340be8b065A6113a8e893e",
    "contractAddress": "0xF1ed2C1e71ebBebE3b035326d8258ffd51EEfD77",
    "transactionIndex": 21,
    "gasUsed": "5097125",
    "logsBloom": "0x
    "blockHash": "0xe703299c60eaeef70d20b826bf4ee1ed875551390e372f654e1c8647940bdac9",
    "transactionHash": "0x2f563689b9c0b5ad1f11a3884293c816daf98608161af7c311734dfa94d128e4",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 56789684,
        "transactionHash": "0x2f563689b9c0b5ad1f11a3884293c816daf98608161af7c311734dfa94d128e4",
        "address": "0xF1ed2C1e71ebBebE3b035326d8258ffd51EEfD77",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084f07be28ecd5b29df340be8b065a6113a8e893e"
        ],
        "data": "0x",
        "logIndex": 68,
        "blockHash": "0xe703299c60eaeef70d20b826bf4ee1ed875551390e372f654e1c8647940bdac9"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 56789684,
        "transactionHash": "0x2f563689b9c0b5ad1f11a3884293c816daf98608161af7c311734dfa94d128e4",
        "address": "0xF1ed2C1e71ebBebE3b035326d8258ffd51EEfD77",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f1ed2c1e71ebbebe3b035326d8258ffd51eefd77"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 69,
        "blockHash": "0xe703299c60eaeef70d20b826bf4ee1ed875551390e372f654e1c8647940bdac9"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 56789684,
        "transactionHash": "0x2f563689b9c0b5ad1f11a3884293c816daf98608161af7c311734dfa94d128e4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000084f07be28ecd5b29df340be8b065a6113a8e893e",
          "0x000000000000000000000000eedba2484aaf940f37cd3cd21a5d7c4a7dafbfc0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000250b200767d7f1400000000000000000000000000000000000000000000000042246146e302d60300000000000000000000000000000000000000000001268d92a231f11dfd09e00000000000000000000000000000000000000000000000003fd3af466c8556ef00000000000000000000000000000000000000000001268d94f2e3f1947a88f4",
        "logIndex": 70,
        "blockHash": "0xe703299c60eaeef70d20b826bf4ee1ed875551390e372f654e1c8647940bdac9"
      }
    ],
    "blockNumber": 56789684,
    "cumulativeGasUsed": "7145781",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "83acd550c991738caf368dc8000b6e08",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"AgentCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"ChangeBpsFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"ChangeLiquidateFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct BaluniAgent.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensReturn\",\"type\":\"address[]\"}],\"name\":\"Execute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BPS_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BPS_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BPS_LIQUIDATE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MAX_BPS_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceStakedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burnTokensAndSwapToUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calculateRewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeBpsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeBpsLiquidateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BaluniAgent.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensReturn\",\"type\":\"address[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAgentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBpsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getUSDCShareValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAllTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balAmountToMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"mintERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balAmountToMint\",\"type\":\"uint256\"}],\"name\":\"mintUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performArbitrage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalanceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValuation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"updateRewardIndexPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAgents\",\"outputs\":[{\"internalType\":\"contract BaluniAgent\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/BaluniRouter.sol\":\"BaluniRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":400},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/BaluniAgent.sol\":{\"content\":\"pragma solidity 0.8.25;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\ninterface IRouter {\\r\\n\\tfunction getBpsFee() external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract BaluniAgent {\\r\\n\\tusing SafeERC20 for IERC20Metadata;\\r\\n\\tusing Address for address payable;\\r\\n\\r\\n\\taddress public owner;\\r\\n\\taddress private router;\\r\\n\\taddress internal constant _NATIVE =\\r\\n\\t\\t0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n\\tIERC20Metadata internal constant WNATIVE =\\r\\n\\t\\tIERC20Metadata(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270);\\r\\n\\r\\n\\tuint256 internal constant _DUST = 10;\\r\\n\\tuint256 internal constant _BPS_BASE = 10000;\\r\\n\\r\\n\\tstruct Call {\\r\\n\\t\\taddress to;\\r\\n\\t\\tuint256 value;\\r\\n\\t\\tbytes data;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Initializes a new instance of the Agent contract.\\r\\n\\t * @param _owner The address of the contract owner.\\r\\n\\t * @param _router The address of the router contract.\\r\\n\\t * @notice Only the router contract can deploy this contract.\\r\\n\\t */\\r\\n\\tconstructor(address _owner, address _router) {\\r\\n\\t\\trequire(msg.sender == _router, \\\"Only Router\\\");\\r\\n\\t\\towner = _owner;\\r\\n\\t\\trouter = _router;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyRouter() {\\r\\n\\t\\trequire(msg.sender == router, \\\"Callable only by the router\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Executes a batch of calls and performs token operations.\\r\\n\\t * @param calls An array of Call structs representing the calls to be executed.\\r\\n\\t * @param tokensReturn An array of token addresses to return after the batch call.\\r\\n\\t * @notice Only the router contract is allowed to execute this function.\\r\\n\\t */\\r\\n\\tfunction execute(\\r\\n\\t\\tCall[] calldata calls,\\r\\n\\t\\taddress[] calldata tokensReturn\\r\\n\\t) external onlyRouter {\\r\\n\\t\\tfor (uint i = 0; i < calls.length; i++) {\\r\\n\\t\\t\\t(bool success, ) = calls[i].to.call{ value: calls[i].value }(\\r\\n\\t\\t\\t\\tcalls[i].data\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\trequire(success, \\\"Batch call failed\\\");\\r\\n\\t\\t}\\r\\n\\t\\t_chargeFees(tokensReturn);\\r\\n\\t\\t_returnTokens(tokensReturn);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the address of the router contract.\\r\\n\\t * @return The address of the router contract.\\r\\n\\t */\\r\\n\\tfunction getRouter() public view returns (address) {\\r\\n\\t\\treturn router;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Internal function to charge fees for the tokens returned.\\r\\n\\t * @param tokensReturn The array of tokens to charge fees for.\\r\\n\\t */\\r\\n\\tfunction _chargeFees(address[] calldata tokensReturn) internal {\\r\\n\\t\\tuint256 amount;\\r\\n\\t\\tuint256 bpsFee = IRouter(router).getBpsFee();\\r\\n\\t\\tfor (uint256 i = 0; i < tokensReturn.length; i++) {\\r\\n\\t\\t\\taddress token = tokensReturn[i];\\r\\n\\t\\t\\tif (token == _NATIVE) {\\r\\n\\t\\t\\t\\t// Use the native balance for amount calculation as wrap will be executed later\\r\\n\\t\\t\\t\\tamount = (address(this).balance * bpsFee) / _BPS_BASE;\\r\\n\\t\\t\\t\\t// send to router\\r\\n\\t\\t\\t\\tpayable(router).sendValue(amount);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tuint256 balance = IERC20(token).balanceOf(address(this));\\r\\n\\t\\t\\t\\tamount = (balance * bpsFee) / _BPS_BASE;\\r\\n\\t\\t\\t\\tIERC20Metadata(token).safeTransfer(router, amount);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Internal function to return tokens to the owner.\\r\\n\\t * @param tokensReturn The array of tokens to return.\\r\\n\\t */\\r\\n\\tfunction _returnTokens(address[] calldata tokensReturn) internal {\\r\\n\\t\\tuint256 tokensReturnLength = tokensReturn.length;\\r\\n\\t\\tif (tokensReturnLength > 0) {\\r\\n\\t\\t\\tfor (uint256 i; i < tokensReturnLength; ) {\\r\\n\\t\\t\\t\\taddress token = tokensReturn[i];\\r\\n\\t\\t\\t\\tif (token == _NATIVE) {\\r\\n\\t\\t\\t\\t\\tif (address(this).balance > 0) {\\r\\n\\t\\t\\t\\t\\t\\tpayable(owner).sendValue(address(this).balance);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tuint256 balance = IERC20Metadata(token).balanceOf(\\r\\n\\t\\t\\t\\t\\t\\taddress(this)\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\tif (balance > _DUST) {\\r\\n\\t\\t\\t\\t\\t\\tIERC20Metadata(token).safeTransfer(owner, balance);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\t\\t++i;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xb82df35b2eddfe85c4c4ee4a1ef7074ebb7571dd986bde80ca8348dcbaee1066\"},\"contracts/core/BaluniRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.25;\\r\\n\\r\\n/**\\r\\n *  __                  __                      __\\r\\n * /  |                /  |                    /  |\\r\\n * $$ |____    ______  $$ | __    __  _______  $$/\\r\\n * $$      \\\\  /      \\\\ $$ |/  |  /  |/       \\\\ /  |\\r\\n * $$$$$$$  | $$$$$$  |$$ |$$ |  $$ |$$$$$$$  |$$ |\\r\\n * $$ |  $$ | /    $$ |$$ |$$ |  $$ |$$ |  $$ |$$ |\\r\\n * $$ |__$$ |/$$$$$$$ |$$ |$$ \\\\__$$ |$$ |  $$ |$$ |\\r\\n * $$    $$/ $$    $$ |$$ |$$    $$/ $$ |  $$ |$$ |\\r\\n * $$$$$$$/   $$$$$$$/ $$/  $$$$$$/  $$/   $$/ $$/\\r\\n *\\r\\n *\\r\\n *                  ,-\\\"\\\"\\\"\\\"-.\\r\\n *                ,'      _ `.\\r\\n *               /       )_)  \\\\\\r\\n *              :              :\\r\\n *              \\\\              /\\r\\n *               \\\\            /\\r\\n *                `.        ,'\\r\\n *                  `.    ,'\\r\\n *                    `.,'\\r\\n *                     /\\\\`.   ,-._\\r\\n *                         `-'    \\\\__\\r\\n *                              .\\r\\n *               s                \\\\\\r\\n *                                \\\\\\\\\\r\\n *                                 \\\\\\\\\\r\\n *                                  >\\\\/7\\r\\n *                              _.-(6'  \\\\\\r\\n *                             (=___._/` \\\\\\r\\n *                                  )  \\\\ |\\r\\n *                                 /   / |\\r\\n *                                /    > /\\r\\n *                               j    < _\\\\\\r\\n *                           _.-' :      ``.\\r\\n *                           \\\\ r=._\\\\        `.\\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\r\\n\\r\\nimport \\\"./BaluniAgent.sol\\\";\\r\\nimport \\\"./BaluniStake.sol\\\";\\r\\n\\r\\ninterface IOracle {\\r\\n\\tfunction getRate(\\r\\n\\t\\tIERC20 srcToken,\\r\\n\\t\\tIERC20 dstToken,\\r\\n\\t\\tbool useWrappers\\r\\n\\t) external view returns (uint256 weightedRate);\\r\\n}\\r\\n\\r\\ncontract BaluniRouter is Ownable, ERC20, BaluniStake {\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\r\\n\\tuint256 public constant _MAX_BPS_FEE = 500;\\r\\n\\r\\n\\tuint256 public _BPS_FEE = 30; // 0.3%.\\r\\n\\tuint256 public _BPS_BASE = 10000;\\r\\n\\tuint256 public _BPS_LIQUIDATE_FEE = 30; // 0.3%.\\r\\n\\r\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n\\tEnumerableSet.AddressSet private tokens;\\r\\n\\r\\n\\tIERC20 public constant USDC =\\r\\n\\t\\tIERC20(0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174);\\r\\n\\tIERC20Metadata internal constant WNATIVE =\\r\\n\\t\\tIERC20Metadata(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270);\\r\\n\\tIOracle public immutable oracle =\\r\\n\\t\\tIOracle(0x0AdDd25a91563696D8567Df78D5A01C9a991F9B8); // 1inch Spot Aggregator\\r\\n\\tISwapRouter public immutable uniswapRouter =\\r\\n\\t\\tISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\r\\n\\tIUniswapV3Factory public immutable uniswapFactory =\\r\\n\\t\\tIUniswapV3Factory(0x1F98431c8aD98523631AE4a59f267346ea31F984);\\r\\n\\r\\n\\tmapping(address => BaluniAgent) public userAgents;\\r\\n\\tmapping(address => uint256) public tokenBalanceMap;\\r\\n\\r\\n\\tevent AgentCreated(address user, address agent);\\r\\n\\tevent Execute(\\r\\n\\t\\taddress user,\\r\\n\\t\\tBaluniAgent.Call[] calls,\\r\\n\\t\\taddress[] tokensReturn\\r\\n\\t);\\r\\n\\tevent Burn(address user, uint256 value);\\r\\n\\tevent Mint(address user, uint256 value);\\r\\n\\tevent ChangeBpsFee(uint256 newFee);\\r\\n\\tevent ChangeLiquidateFee(uint256 newFee);\\r\\n\\r\\n\\tmodifier validTimestamp(uint256 _timestamp) {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_timestamp <= block.timestamp,\\r\\n\\t\\t\\t\\\"Timestamp too far in the future\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_timestamp >= block.timestamp - 1 days,\\r\\n\\t\\t\\t\\\"Timestamp too far in the past\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tconstructor()\\r\\n\\t\\tOwnable(msg.sender)\\r\\n\\t\\tERC20(\\\"Baluni\\\", \\\"BALUNI\\\")\\r\\n\\t\\tBaluniStake(address(this), address(this))\\r\\n\\t{\\r\\n\\t\\t_mint(address(this), 1 ether);\\r\\n\\t\\t_stakeToContract(address(this), 1 ether);\\r\\n\\t\\t_updateRewards(address(this));\\r\\n\\r\\n\\t\\tEnumerableSet.add(tokens, address(USDC));\\r\\n\\t}\\r\\n\\r\\n\\tfunction _stakeToContract(address _to, uint256 _amount) internal {\\r\\n\\t\\tbalanceStakedOf[_to] += _amount;\\r\\n\\t\\tstakingSupply += _amount;\\r\\n\\t\\tstakeTimestamp[msg.sender] = block.timestamp;\\r\\n\\r\\n\\t\\tif (stakingSupply > 0) {\\r\\n\\t\\t\\tupdateRewardIndex(_amount);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction listAllTokens() external view returns (address[] memory) {\\r\\n\\t\\treturn tokens.values();\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAgentAddress(address _user) public view returns (address) {\\r\\n\\t\\tbytes32 salt = keccak256(abi.encodePacked(_user));\\r\\n\\t\\tbytes memory bytecode = getBytecode(_user);\\r\\n\\t\\tbytes32 hash = keccak256(\\r\\n\\t\\t\\tabi.encodePacked(\\r\\n\\t\\t\\t\\tbytes1(0xff),\\r\\n\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\tsalt,\\r\\n\\t\\t\\t\\tkeccak256(bytecode)\\r\\n\\t\\t\\t)\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\treturn address(uint160(uint256(hash)));\\r\\n\\t}\\r\\n\\r\\n\\tfunction getOrCreateAgent(address user) private returns (BaluniAgent) {\\r\\n\\t\\tbytes32 salt = keccak256(abi.encodePacked(user));\\r\\n\\r\\n\\t\\tif (address(userAgents[user]) == address(0)) {\\r\\n\\t\\t\\tBaluniAgent agent = new BaluniAgent{ salt: salt }(\\r\\n\\t\\t\\t\\tuser,\\r\\n\\t\\t\\t\\taddress(this)\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\trequire(\\r\\n\\t\\t\\t\\tisContract(address(agent)),\\r\\n\\t\\t\\t\\t\\\"Agent creation failed, not a contract\\\"\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\tuserAgents[user] = agent;\\r\\n\\t\\t\\temit AgentCreated(user, address(agent));\\r\\n\\t\\t}\\r\\n\\t\\treturn userAgents[user];\\r\\n\\t}\\r\\n\\r\\n\\tfunction isContract(address _addr) private view returns (bool) {\\r\\n\\t\\tuint32 size;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tsize := extcodesize(_addr)\\r\\n\\t\\t}\\r\\n\\t\\treturn size > 0;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getBytecode(address _owner) internal view returns (bytes memory) {\\r\\n\\t\\trequire(_owner != address(0), \\\"Owner address cannot be zero.\\\");\\r\\n\\t\\tbytes memory bytecode = type(BaluniAgent).creationCode;\\r\\n\\t\\treturn abi.encodePacked(bytecode, abi.encode(_owner, address(this)));\\r\\n\\t}\\r\\n\\r\\n\\tfunction getBpsFee() external view returns (uint256) {\\r\\n\\t\\treturn _BPS_FEE;\\r\\n\\t}\\r\\n\\r\\n\\tfunction changeBpsFee(uint256 _newFee) external onlyOwner {\\r\\n\\t\\t_BPS_FEE = _newFee;\\r\\n\\t\\temit ChangeBpsFee(_newFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction changeBpsLiquidateFee(uint256 _newFee) external onlyOwner {\\r\\n\\t\\t_BPS_LIQUIDATE_FEE = _newFee;\\r\\n\\t\\temit ChangeLiquidateFee(_newFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction execute(\\r\\n\\t\\tBaluniAgent.Call[] calldata calls,\\r\\n\\t\\taddress[] calldata tokensReturn\\r\\n\\t) external nonReentrant {\\r\\n\\t\\tBaluniAgent agent = getOrCreateAgent(msg.sender);\\r\\n\\t\\tbool[] memory isTokenNew = new bool[](tokensReturn.length);\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < tokensReturn.length; i++) {\\r\\n\\t\\t\\tisTokenNew[i] = !EnumerableSet.contains(tokens, tokensReturn[i]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tagent.execute(calls, tokensReturn);\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < tokensReturn.length; i++) {\\r\\n\\t\\t\\taddress token = tokensReturn[i];\\r\\n\\t\\t\\taddress poolNative3000 = uniswapFactory.getPool(\\r\\n\\t\\t\\t\\ttoken,\\r\\n\\t\\t\\t\\taddress(WNATIVE),\\r\\n\\t\\t\\t\\t3000\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\taddress poolNative500 = uniswapFactory.getPool(\\r\\n\\t\\t\\t\\ttoken,\\r\\n\\t\\t\\t\\taddress(WNATIVE),\\r\\n\\t\\t\\t\\t500\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\tbool poolExist = poolNative3000 != address(0) ||\\r\\n\\t\\t\\t\\tpoolNative500 != address(0);\\r\\n\\r\\n\\t\\t\\tif (isTokenNew[i] && poolExist) {\\r\\n\\t\\t\\t\\tEnumerableSet.add(tokens, token);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (!poolExist) {\\r\\n\\t\\t\\t\\tuint256 balance = IERC20(token).balanceOf(address(this));\\r\\n\\t\\t\\t\\tIERC20(token).transfer(msg.sender, balance);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction liquidate(address token) external nonReentrant {\\r\\n\\t\\tuint256 totalERC20Balance = IERC20(token).balanceOf(address(this));\\r\\n\\t\\taddress pool = uniswapFactory.getPool(token, address(USDC), 3000);\\r\\n\\t\\tsecureApproval(token, address(uniswapRouter), totalERC20Balance);\\r\\n\\r\\n\\t\\tif (pool != address(0)) {\\r\\n\\t\\t\\tuint256 singleSwapResult = singleSwap(\\r\\n\\t\\t\\t\\ttoken,\\r\\n\\t\\t\\t\\taddress(USDC),\\r\\n\\t\\t\\t\\ttotalERC20Balance,\\r\\n\\t\\t\\t\\taddress(this)\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\trequire(singleSwapResult > 0, \\\"Swap Failed, Try Burn()\\\");\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tuint256 amountOutHop = multiHopSwap(\\r\\n\\t\\t\\t\\ttoken,\\r\\n\\t\\t\\t\\taddress(WNATIVE),\\r\\n\\t\\t\\t\\taddress(USDC),\\r\\n\\t\\t\\t\\ttotalERC20Balance,\\r\\n\\t\\t\\t\\taddress(this)\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\trequire(amountOutHop > 0, \\\"Swap Failed, Try Burn()\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 reward = claimTo(address(this), msg.sender);\\r\\n\\t\\tuint256 mintAmount = (totalSupply() * _BPS_LIQUIDATE_FEE) / 10000;\\r\\n\\r\\n\\t\\t_mint(address(this), mintAmount);\\r\\n\\t\\t_stakeToContract(address(this), mintAmount);\\r\\n\\r\\n\\t\\temit Mint(address(this), mintAmount);\\r\\n\\t\\temit RewardClaimed(msg.sender, reward);\\r\\n\\t}\\r\\n\\r\\n\\tfunction burn(uint256 burnAmount) external nonReentrant {\\r\\n\\t\\trequire(balanceOf(msg.sender) >= burnAmount, \\\"Insufficient BAL\\\");\\r\\n\\r\\n\\t\\tfor (uint256 i; i < tokens.length(); i++) {\\r\\n\\t\\t\\taddress token = tokens.at(i);\\r\\n\\t\\t\\tuint256 totalBaluni = totalSupply();\\r\\n\\t\\t\\tuint256 totalERC20Balance = IERC20(token).balanceOf(address(this));\\r\\n\\r\\n\\t\\t\\tif (totalERC20Balance == 0 || token == address(this)) continue;\\r\\n\\r\\n\\t\\t\\tuint256 decimals = IERC20Metadata(token).decimals();\\r\\n\\t\\t\\tuint256 share = _calculateTokenShare(\\r\\n\\t\\t\\t\\ttotalBaluni,\\r\\n\\t\\t\\t\\ttotalERC20Balance,\\r\\n\\t\\t\\t\\tburnAmount,\\r\\n\\t\\t\\t\\tdecimals\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\tIERC20(token).transfer(msg.sender, share);\\r\\n\\t\\t}\\r\\n\\t\\t_burn(msg.sender, burnAmount);\\r\\n\\t\\temit Burn(msg.sender, burnAmount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction burnTokensAndSwapToUSDC(uint256 burnAmount) external nonReentrant {\\r\\n\\t\\trequire(burnAmount > 0, \\\"Insufficient BAL\\\");\\r\\n\\r\\n\\t\\tfor (uint256 i; i < tokens.length(); i++) {\\r\\n\\t\\t\\taddress token = tokens.at(i);\\r\\n\\t\\t\\tuint256 totalBaluni = totalSupply();\\r\\n\\t\\t\\tuint256 totalERC20Balance = IERC20(token).balanceOf(address(this));\\r\\n\\r\\n\\t\\t\\tif (totalERC20Balance > 0 == false) continue;\\r\\n\\t\\t\\tif (token == address(this)) continue;\\r\\n\\r\\n\\t\\t\\tuint256 decimals = IERC20Metadata(token).decimals();\\r\\n\\t\\t\\tuint256 burnAmountToken = _calculateTokenShare(\\r\\n\\t\\t\\t\\ttotalBaluni,\\r\\n\\t\\t\\t\\ttotalERC20Balance,\\r\\n\\t\\t\\t\\tburnAmount,\\r\\n\\t\\t\\t\\tdecimals\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\tif (token == address(USDC)) {\\r\\n\\t\\t\\t\\tIERC20(USDC).transfer(msg.sender, burnAmountToken);\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\taddress pool = uniswapFactory.getPool(token, address(USDC), 3000);\\r\\n\\t\\t\\tsecureApproval(token, address(uniswapRouter), burnAmountToken);\\r\\n\\r\\n\\t\\t\\tif (pool != address(0)) {\\r\\n\\t\\t\\t\\tsingleSwap(token, address(USDC), burnAmountToken, msg.sender);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tuint256 amountOutHop = multiHopSwap(\\r\\n\\t\\t\\t\\t\\ttoken,\\r\\n\\t\\t\\t\\t\\taddress(WNATIVE),\\r\\n\\t\\t\\t\\t\\taddress(USDC),\\r\\n\\t\\t\\t\\t\\tburnAmountToken,\\r\\n\\t\\t\\t\\t\\tmsg.sender\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\trequire(amountOutHop > 0, \\\"Swap Failed, Try Burn()\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t_burn(msg.sender, burnAmount);\\r\\n\\r\\n\\t\\temit Burn(msg.sender, burnAmount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction calculateNetAmountAfterFee(\\r\\n\\t\\tuint256 _amount\\r\\n\\t) internal view returns (uint256) {\\r\\n\\t\\tuint256 amountInWithFee = (_amount * (_BPS_BASE - (_BPS_FEE))) /\\r\\n\\t\\t\\t_BPS_BASE;\\r\\n\\t\\treturn amountInWithFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUnitPrice() public view returns (uint256) {\\r\\n\\t\\treturn _calculateBaluniToUsdc(1e18);\\r\\n\\t}\\r\\n\\r\\n\\tfunction mintUSDC(\\r\\n\\t\\tuint256 balAmountToMint\\r\\n\\t) public nonReentrant returns (uint256) {\\r\\n\\t\\tuint256 totalUSDValuation = _totalValuation();\\r\\n\\t\\tuint256 totalBalSupply = totalSupply();\\r\\n\\t\\tuint256 usdcRequired = (balAmountToMint * totalUSDValuation) /\\r\\n\\t\\t\\ttotalBalSupply;\\r\\n\\t\\tuint256 balance = IERC20(USDC).balanceOf(msg.sender);\\r\\n\\t\\trequire(totalBalSupply > 0, \\\"Total BALUNI supply cannot be zero\\\");\\r\\n\\t\\trequire(balance >= usdcRequired / 1e12, \\\"USDC balance is insufficient\\\");\\r\\n\\r\\n\\t\\tuint256 allowed = USDC.allowance(msg.sender, address(this));\\r\\n\\t\\trequire(allowed >= usdcRequired / 1e12, \\\"Check the token allowance\\\");\\r\\n\\r\\n\\t\\tUSDC.safeTransferFrom(msg.sender, address(this), usdcRequired / 1e12);\\r\\n\\r\\n\\t\\tuint256 amountAfterFee = calculateNetAmountAfterFee(balAmountToMint);\\r\\n\\t\\tuint256 netBalAmountToMint = balAmountToMint - amountAfterFee;\\r\\n\\r\\n\\t\\t_mint(address(this), netBalAmountToMint);\\r\\n\\t\\temit Mint(address(this), netBalAmountToMint);\\r\\n\\r\\n\\t\\tif (stakingSupply > 0) {\\r\\n\\t\\t\\tupdateRewardIndex(netBalAmountToMint);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t_mint(msg.sender, amountAfterFee);\\r\\n\\t\\temit Mint(msg.sender, amountAfterFee);\\r\\n\\r\\n\\t\\treturn netBalAmountToMint;\\r\\n\\t}\\r\\n\\r\\n\\tfunction mintERC20(\\r\\n\\t\\tuint256 balAmountToMint,\\r\\n\\t\\taddress asset\\r\\n\\t) public nonReentrant returns (uint256) {\\r\\n\\t\\tuint256 totalUSDValuation = _totalValuation();\\r\\n\\t\\tuint256 totalBalSupply = totalSupply();\\r\\n\\t\\trequire(totalBalSupply > 0, \\\"Total BALUNI supply cannot be zero\\\");\\r\\n\\r\\n\\t\\tuint256 usdcRequired = (balAmountToMint * totalUSDValuation) /\\r\\n\\t\\t\\ttotalBalSupply;\\r\\n\\r\\n\\t\\tuint8 decimalA = IERC20Metadata(address(USDC)).decimals();\\r\\n\\t\\tuint8 decimalB = IERC20Metadata(asset).decimals();\\r\\n\\r\\n\\t\\tuint256 assetRate = oracle.getRate(IERC20(USDC), IERC20(asset), false);\\r\\n\\t\\tuint256 required;\\r\\n\\r\\n\\t\\tif (decimalB > decimalA) {\\r\\n\\t\\t\\tuint256 rate = assetRate / 10 ** (decimalB - decimalA);\\r\\n\\t\\t\\trequired = (usdcRequired / rate) * 1e18;\\r\\n\\t\\t\\trequired = required / 10 ** (decimalB - decimalA);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tuint256 rate = assetRate * 10 ** (decimalA - decimalB);\\r\\n\\t\\t\\trequired = (usdcRequired / rate) * 1e18;\\r\\n\\t\\t\\trequired = required / 10 ** (decimalA - decimalB);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 balance = IERC20(asset).balanceOf(msg.sender);\\r\\n\\r\\n\\t\\trequire(balance >= required, \\\"Balance is insufficient\\\");\\r\\n\\r\\n\\t\\tuint256 allowed = IERC20(asset).allowance(msg.sender, address(this));\\r\\n\\r\\n\\t\\trequire(allowed >= required, \\\"Check the token allowance\\\");\\r\\n\\r\\n\\t\\tIERC20(asset).safeTransferFrom(msg.sender, address(this), required);\\r\\n\\r\\n\\t\\tuint256 amountAfterFee = calculateNetAmountAfterFee(balAmountToMint);\\r\\n\\t\\tuint256 netBalAmountToMint = balAmountToMint - amountAfterFee;\\r\\n\\r\\n\\t\\t_mint(address(this), netBalAmountToMint);\\r\\n\\t\\temit Mint(address(this), netBalAmountToMint);\\r\\n\\r\\n\\t\\tif (stakingSupply > 0) {\\r\\n\\t\\t\\tupdateRewardIndex(netBalAmountToMint);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t_mint(msg.sender, amountAfterFee);\\r\\n\\t\\temit Mint(msg.sender, amountAfterFee);\\r\\n\\r\\n\\t\\treturn amountAfterFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _calculateBaluniToUsdc(\\r\\n\\t\\tuint256 amount\\r\\n\\t) internal view returns (uint256 shareUSDC) {\\r\\n\\t\\tuint256 totalBaluni = totalSupply();\\r\\n\\t\\trequire(totalBaluni > 0, \\\"Total supply cannot be zero\\\");\\r\\n\\t\\tuint256 totalUSDC = _totalValuation();\\r\\n\\t\\tshareUSDC = (amount * totalUSDC) / totalBaluni;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _calculateTokenShare(\\r\\n\\t\\tuint256 totalBaluni,\\r\\n\\t\\tuint256 totalERC20Balance,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint256 tokenDecimals\\r\\n\\t) internal pure returns (uint256) {\\r\\n\\t\\trequire(totalBaluni > 0, \\\"Total supply cannot be zero\\\");\\r\\n\\t\\tuint256 rate;\\r\\n\\r\\n\\t\\tif (tokenDecimals < 18) {\\r\\n\\t\\t\\trate =\\r\\n\\t\\t\\t\\t((amount * totalERC20Balance)) /\\r\\n\\t\\t\\t\\t(totalBaluni / (10 ** (18 - tokenDecimals)));\\r\\n\\t\\t} else {\\r\\n\\t\\t\\trate = (amount * totalERC20Balance) / totalBaluni;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn rate;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _calculateTokenValuation(\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\taddress token\\r\\n\\t) internal view returns (uint256 valuation) {\\r\\n\\t\\tuint256 rate;\\r\\n\\t\\tuint8 tokenDecimal = IERC20Metadata(token).decimals();\\r\\n\\t\\tuint8 usdcDecimal = IERC20Metadata(address(USDC)).decimals();\\r\\n\\r\\n\\t\\tif (token == address(USDC)) return amount * 1e12;\\r\\n\\r\\n\\t\\ttry\\r\\n\\t\\t\\tIOracle(oracle).getRate(IERC20(token), IERC20(USDC), false)\\r\\n\\t\\treturns (uint256 _rate) {\\r\\n\\t\\t\\trate = _rate;\\r\\n\\t\\t} catch {\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 factor = (10 ** (tokenDecimal - usdcDecimal));\\r\\n\\r\\n\\t\\trate = ((amount * factor) * (rate * factor)) / 1e18;\\r\\n\\r\\n\\t\\treturn rate;\\r\\n\\t}\\r\\n\\r\\n\\tfunction totalValuation() external view returns (uint256) {\\r\\n\\t\\treturn _totalValuation();\\r\\n\\t}\\r\\n\\r\\n\\tfunction _totalValuation() internal view returns (uint256) {\\r\\n\\t\\tuint256 _totalV;\\r\\n\\r\\n\\t\\tfor (uint256 i; i < tokens.length(); i++) {\\r\\n\\t\\t\\taddress token = tokens.at(i);\\r\\n\\t\\t\\tuint256 balance = IERC20(token).balanceOf(address(this));\\r\\n\\t\\t\\tuint256 tokenBalanceValuation = _calculateTokenValuation(\\r\\n\\t\\t\\t\\tbalance,\\r\\n\\t\\t\\t\\ttoken\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\t_totalV += tokenBalanceValuation;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn _totalV;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUSDCShareValue(uint256 amount) external view returns (uint256) {\\r\\n\\t\\treturn _calculateBaluniToUsdc(amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction performArbitrage() external nonReentrant {\\r\\n\\t\\tuint256 unitPrice = getUnitPrice();\\r\\n\\t\\tuint256 marketPrice = oracle.getRate(\\r\\n\\t\\t\\tIERC20(address(this)),\\r\\n\\t\\t\\tIERC20(address(USDC)),\\r\\n\\t\\t\\tfalse\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuint256 baluniBalance = balanceOf(address(this));\\r\\n\\t\\tuint256 usdcBalance = IERC20(USDC).balanceOf(address(this));\\r\\n\\r\\n\\t\\tif (marketPrice * 1e12 < unitPrice) {\\r\\n\\t\\t\\tuint256 amountToBuy = (usdcBalance * 1e12) /\\r\\n\\t\\t\\t\\t(marketPrice * 1e12) /\\r\\n\\t\\t\\t\\t1e18;\\r\\n\\r\\n\\t\\t\\tif (amountToBuy > baluniBalance) amountToBuy = baluniBalance;\\r\\n\\r\\n\\t\\t\\tsecureApproval(address(USDC), address(uniswapRouter), usdcBalance);\\r\\n\\r\\n\\t\\t\\tuint256 amountOut = singleSwap(\\r\\n\\t\\t\\t\\taddress(USDC),\\r\\n\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\tusdcBalance,\\r\\n\\t\\t\\t\\taddress(this)\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\trequire(\\r\\n\\t\\t\\t\\tamountOut >= amountToBuy,\\r\\n\\t\\t\\t\\t\\\"Arbitrage failed: insufficient output amount\\\"\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\tsecureApproval(address(this), address(uniswapRouter), amountOut);\\r\\n\\t\\t\\tsingleSwap(address(this), address(USDC), amountOut, address(this));\\r\\n\\t\\t\\trequire(\\r\\n\\t\\t\\t\\tIERC20(USDC).balanceOf(address(this)) > usdcBalance,\\r\\n\\t\\t\\t\\t\\\"Arbitrage did not profit\\\"\\r\\n\\t\\t\\t);\\r\\n\\t\\t} else if (marketPrice * 1e12 > unitPrice) {\\r\\n\\t\\t\\tuint256 amountToSell = baluniBalance;\\r\\n\\t\\t\\tsecureApproval(address(this), address(uniswapRouter), amountToSell);\\r\\n\\t\\t\\tuint256 amountOutUSDC = singleSwap(\\r\\n\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\taddress(USDC),\\r\\n\\t\\t\\t\\tamountToSell,\\r\\n\\t\\t\\t\\taddress(this)\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\trequire(\\r\\n\\t\\t\\t\\tamountOutUSDC > usdcBalance,\\r\\n\\t\\t\\t\\t\\\"Arbitrage failed: insufficient output amount\\\"\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\tsecureApproval(\\r\\n\\t\\t\\t\\taddress(USDC),\\r\\n\\t\\t\\t\\taddress(uniswapRouter),\\r\\n\\t\\t\\t\\tamountOutUSDC\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\tsingleSwap(\\r\\n\\t\\t\\t\\taddress(USDC),\\r\\n\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\tamountOutUSDC,\\r\\n\\t\\t\\t\\taddress(this)\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\trequire(\\r\\n\\t\\t\\t\\tbalanceOf(address(this)) > baluniBalance,\\r\\n\\t\\t\\t\\t\\\"Arbitrage did not profit\\\"\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction singleSwap(\\r\\n\\t\\taddress token0,\\r\\n\\t\\taddress token1,\\r\\n\\t\\tuint256 tokenBalance,\\r\\n\\t\\taddress receiver\\r\\n\\t) private returns (uint256 amountOut) {\\r\\n\\t\\tISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\r\\n\\t\\t\\t.ExactInputSingleParams({\\r\\n\\t\\t\\t\\ttokenIn: token0,\\r\\n\\t\\t\\t\\ttokenOut: token1,\\r\\n\\t\\t\\t\\tfee: 3000,\\r\\n\\t\\t\\t\\trecipient: address(receiver),\\r\\n\\t\\t\\t\\tdeadline: block.timestamp,\\r\\n\\t\\t\\t\\tamountIn: tokenBalance,\\r\\n\\t\\t\\t\\tamountOutMinimum: 0,\\r\\n\\t\\t\\t\\tsqrtPriceLimitX96: 0\\r\\n\\t\\t\\t});\\r\\n\\r\\n\\t\\treturn uniswapRouter.exactInputSingle(params);\\r\\n\\t}\\r\\n\\r\\n\\tfunction multiHopSwap(\\r\\n\\t\\taddress token0,\\r\\n\\t\\taddress token1,\\r\\n\\t\\taddress token2,\\r\\n\\t\\tuint256 tokenBalance,\\r\\n\\t\\taddress receiver\\r\\n\\t) private returns (uint256 amountOut) {\\r\\n\\t\\tISwapRouter.ExactInputParams memory params = ISwapRouter\\r\\n\\t\\t\\t.ExactInputParams({\\r\\n\\t\\t\\t\\tpath: abi.encodePacked(\\r\\n\\t\\t\\t\\t\\ttoken0,\\r\\n\\t\\t\\t\\t\\tuint24(3000),\\r\\n\\t\\t\\t\\t\\ttoken1,\\r\\n\\t\\t\\t\\t\\tuint24(3000),\\r\\n\\t\\t\\t\\t\\ttoken2\\r\\n\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\trecipient: address(receiver),\\r\\n\\t\\t\\t\\tdeadline: block.timestamp,\\r\\n\\t\\t\\t\\tamountIn: tokenBalance,\\r\\n\\t\\t\\t\\tamountOutMinimum: 0\\r\\n\\t\\t\\t});\\r\\n\\t\\treturn uniswapRouter.exactInput(params);\\r\\n\\t}\\r\\n\\r\\n\\tfunction secureApproval(\\r\\n\\t\\taddress token,\\r\\n\\t\\taddress spender,\\r\\n\\t\\tuint256 amount\\r\\n\\t) internal {\\r\\n\\t\\tIERC20 _token = IERC20(token);\\r\\n\\t\\tuint256 currentAllowance = _token.allowance(address(this), spender);\\r\\n\\r\\n\\t\\tif (currentAllowance != amount) {\\r\\n\\t\\t\\tif (currentAllowance != 0) {\\r\\n\\t\\t\\t\\t_token.approve(spender, 0);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t_token.approve(spender, amount);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction rebalance(\\r\\n\\t\\taddress[] calldata assets,\\r\\n\\t\\tuint256[] calldata weights\\r\\n\\t) external returns (bool) {\\r\\n\\t\\tuint256 totalValue;\\r\\n\\r\\n\\t\\tfor (uint256 i; i < assets.length; i++) {\\r\\n\\t\\t\\tuint256 balance = IERC20(assets[i]).balanceOf(msg.sender);\\r\\n\\t\\t\\tuint256 tokenValuation = _calculateTokenValuation(\\r\\n\\t\\t\\t\\tbalance,\\r\\n\\t\\t\\t\\tassets[i]\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\ttotalValue += tokenValuation;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256[] memory overweightVaults = new uint256[](assets.length);\\r\\n\\t\\tuint256[] memory overweightAmounts = new uint256[](assets.length);\\r\\n\\t\\tuint256[] memory underweightVaults = new uint256[](assets.length);\\r\\n\\t\\tuint256[] memory underweightAmounts = new uint256[](assets.length);\\r\\n\\r\\n\\t\\tuint256 overweightVaultsLength;\\r\\n\\t\\tuint256 underweightVaultsLength;\\r\\n\\t\\tuint256 overweightAmount;\\r\\n\\t\\tuint256 overweightPercent;\\r\\n\\t\\tuint256 targetWeight;\\r\\n\\t\\tuint256 currentWeight;\\r\\n\\t\\tuint256 totalActiveWeight;\\r\\n\\r\\n\\t\\tbool overweight;\\r\\n\\r\\n\\t\\tfor (uint256 i; i < assets.length; i++) {\\r\\n\\t\\t\\tuint256 balance = IERC20(assets[i]).balanceOf(msg.sender);\\r\\n\\t\\t\\tuint256 decimals = IERC20Metadata(assets[i]).decimals();\\r\\n\\t\\t\\tuint256 tokensTotalValue = _calculateTokenValuation(\\r\\n\\t\\t\\t\\tbalance,\\r\\n\\t\\t\\t\\tassets[i]\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\ttargetWeight = weights[i];\\r\\n\\t\\t\\tcurrentWeight = tokensTotalValue / (10000) / (totalValue);\\r\\n\\t\\t\\toverweight = currentWeight > targetWeight;\\r\\n\\t\\t\\toverweightPercent = overweight\\r\\n\\t\\t\\t\\t? currentWeight - (targetWeight)\\r\\n\\t\\t\\t\\t: targetWeight - (currentWeight);\\r\\n\\t\\t\\tuint256 price = _calculateTokenValuation(\\r\\n\\t\\t\\t\\t1 * 10 ** decimals,\\r\\n\\t\\t\\t\\tassets[i]\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\tif (overweight) {\\r\\n\\t\\t\\t\\toverweightAmount = (overweightPercent * (totalValue)) / (10000);\\r\\n\\t\\t\\t\\toverweightAmount = (overweightAmount * (1e18)) / (price);\\r\\n\\t\\t\\t\\toverweightVaults[overweightVaultsLength] = i;\\r\\n\\t\\t\\t\\toverweightAmounts[overweightVaultsLength] = overweightAmount;\\r\\n\\t\\t\\t\\toverweightVaultsLength++;\\r\\n\\t\\t\\t} else if (!overweight) {\\r\\n\\t\\t\\t\\ttotalActiveWeight += overweightPercent;\\r\\n\\t\\t\\t\\toverweightAmount = overweightPercent;\\r\\n\\t\\t\\t\\t// overweightAmount = overweightPercent.mul(totalValue).div(10000);\\r\\n\\t\\t\\t\\tunderweightVaults[underweightVaultsLength] = i;\\r\\n\\t\\t\\t\\tunderweightAmounts[underweightVaultsLength] = overweightAmount;\\r\\n\\t\\t\\t\\tunderweightVaultsLength++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Resize overweightVaults and overweightAmounts to the actual overweighted vaults\\r\\n\\t\\toverweightVaults = _resize(overweightVaults, overweightVaultsLength);\\r\\n\\t\\toverweightAmounts = _resize(overweightAmounts, overweightVaultsLength);\\r\\n\\t\\t// Resize overweightVaults and overweightAmounts to the actual overweighted vaults\\r\\n\\t\\tunderweightVaults = _resize(underweightVaults, underweightVaultsLength);\\r\\n\\t\\tunderweightAmounts = _resize(\\r\\n\\t\\t\\tunderweightAmounts,\\r\\n\\t\\t\\tunderweightVaultsLength\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tfor (uint256 i; i < overweightVaults.length; i++) {\\r\\n\\t\\t\\tif (overweightAmounts[i] > 0) {\\r\\n\\t\\t\\t\\tIERC20(address(assets[overweightVaults[i]])).transferFrom(\\r\\n\\t\\t\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\t\\toverweightAmounts[i]\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\taddress pool = uniswapFactory.getPool(\\r\\n\\t\\t\\t\\t\\taddress(assets[overweightVaults[i]]),\\r\\n\\t\\t\\t\\t\\taddress(USDC),\\r\\n\\t\\t\\t\\t\\t3000\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\tsecureApproval(\\r\\n\\t\\t\\t\\t\\taddress(assets[overweightVaults[i]]),\\r\\n\\t\\t\\t\\t\\taddress(uniswapRouter),\\r\\n\\t\\t\\t\\t\\toverweightAmounts[i]\\r\\n\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\tif (pool != address(0)) {\\r\\n\\t\\t\\t\\t\\tuint singleSwapResult = singleSwap(\\r\\n\\t\\t\\t\\t\\t\\taddress(assets[overweightVaults[i]]),\\r\\n\\t\\t\\t\\t\\t\\taddress(USDC),\\r\\n\\t\\t\\t\\t\\t\\toverweightAmounts[i],\\r\\n\\t\\t\\t\\t\\t\\tunderweightVaults.length == 0\\r\\n\\t\\t\\t\\t\\t\\t\\t? msg.sender\\r\\n\\t\\t\\t\\t\\t\\t\\t: address(this)\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tuint256 amountOutHop = multiHopSwap(\\r\\n\\t\\t\\t\\t\\t\\taddress(assets[overweightVaults[i]]),\\r\\n\\t\\t\\t\\t\\t\\taddress(WNATIVE),\\r\\n\\t\\t\\t\\t\\t\\taddress(USDC),\\r\\n\\t\\t\\t\\t\\t\\toverweightAmounts[i],\\r\\n\\t\\t\\t\\t\\t\\tunderweightVaults.length == 0\\r\\n\\t\\t\\t\\t\\t\\t\\t? msg.sender\\r\\n\\t\\t\\t\\t\\t\\t\\t: address(this)\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tfor (uint256 i; i < underweightVaults.length; i++) {\\r\\n\\t\\t\\tif (underweightAmounts[i] > 0) {\\r\\n\\t\\t\\t\\tuint256 rebaseActiveWgt = (underweightAmounts[i] * (10000)) /\\r\\n\\t\\t\\t\\t\\t(totalActiveWeight);\\r\\n\\r\\n\\t\\t\\t\\tuint256 rebBuyQty = (rebaseActiveWgt *\\r\\n\\t\\t\\t\\t\\tIERC20(USDC).balanceOf(msg.sender) *\\r\\n\\t\\t\\t\\t\\t1e12) / (10000);\\r\\n\\r\\n\\t\\t\\t\\tif (\\r\\n\\t\\t\\t\\t\\trebBuyQty > 0 &&\\r\\n\\t\\t\\t\\t\\trebBuyQty <= IERC20(USDC).balanceOf(msg.sender) * 1e12\\r\\n\\t\\t\\t\\t) {\\r\\n\\t\\t\\t\\t\\taddress pool = uniswapFactory.getPool(\\r\\n\\t\\t\\t\\t\\t\\taddress(assets[underweightVaults[i]]),\\r\\n\\t\\t\\t\\t\\t\\taddress(USDC),\\r\\n\\t\\t\\t\\t\\t\\t3000\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\tsecureApproval(\\r\\n\\t\\t\\t\\t\\t\\taddress(assets[underweightVaults[i]]),\\r\\n\\t\\t\\t\\t\\t\\taddress(uniswapRouter),\\r\\n\\t\\t\\t\\t\\t\\tunderweightAmounts[i] / 1e12\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\tif (pool != address(0)) {\\r\\n\\t\\t\\t\\t\\t\\tuint singleSwapResult = singleSwap(\\r\\n\\t\\t\\t\\t\\t\\t\\taddress(USDC),\\r\\n\\t\\t\\t\\t\\t\\t\\taddress(assets[underweightVaults[i]]),\\r\\n\\t\\t\\t\\t\\t\\t\\tunderweightAmounts[i] / 1e12,\\r\\n\\t\\t\\t\\t\\t\\t\\taddress(this)\\r\\n\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuint256 amountToTransfer = calculateNetAmountAfterFee(\\r\\n\\t\\t\\t\\t\\t\\t\\tsingleSwapResult\\r\\n\\t\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\t\\tIERC20(USDC).transfer(msg.sender, amountToTransfer);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\trequire(\\r\\n\\t\\t\\t\\t\\t\\t\\tsingleSwapResult > 0,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\\"Swap Failed, Try Burn()\\\"\\r\\n\\t\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tuint256 amountOutHop = multiHopSwap(\\r\\n\\t\\t\\t\\t\\t\\t\\taddress(USDC),\\r\\n\\t\\t\\t\\t\\t\\t\\taddress(WNATIVE),\\r\\n\\t\\t\\t\\t\\t\\t\\taddress(assets[underweightVaults[i]]),\\r\\n\\t\\t\\t\\t\\t\\t\\tunderweightAmounts[i] / 1e12,\\r\\n\\t\\t\\t\\t\\t\\t\\taddress(this)\\r\\n\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuint256 amountToTransfer = calculateNetAmountAfterFee(\\r\\n\\t\\t\\t\\t\\t\\t\\tamountOutHop\\r\\n\\t\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t\\t\\tIERC20(USDC).transfer(msg.sender, amountToTransfer);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\trequire(amountOutHop > 0, \\\"Swap Failed\\\");\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _resize(\\r\\n\\t\\tuint256[] memory arr,\\r\\n\\t\\tuint256 size\\r\\n\\t) internal pure returns (uint256[] memory) {\\r\\n\\t\\tuint256[] memory ret = new uint256[](size);\\r\\n\\t\\tfor (uint256 i; i < size; i++) {\\r\\n\\t\\t\\tret[i] = arr[i];\\r\\n\\t\\t}\\r\\n\\t\\treturn ret;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x929b588e005e72e21e35cd68575bfdfae3b91bdf92b8286158b6f890d576c9f0\",\"license\":\"MIT\"},\"contracts/core/BaluniStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract BaluniStake is ReentrancyGuard {\\r\\n\\tIERC20 public immutable stakingToken;\\r\\n\\tIERC20 public immutable rewardToken;\\r\\n\\r\\n\\tmapping(address => uint256) public balanceStakedOf;\\r\\n\\tmapping(address => uint256) public stakeTimestamp;\\r\\n\\tuint256 public stakingSupply;\\r\\n\\r\\n\\tuint256 private constant MULTIPLIER = 1e18;\\r\\n\\tuint256 private rewardIndex;\\r\\n\\tmapping(address => uint256) private rewardIndexOf;\\r\\n\\tmapping(address => uint256) private earned;\\r\\n\\r\\n\\tuint256 private constant STAKING_PERIOD = 365 days;\\r\\n\\r\\n\\tevent RewardClaimed(address indexed user, uint256 amount);\\r\\n\\tevent Staked(address indexed user, uint256 amount);\\r\\n\\tevent Unstaked(address indexed user, uint256 amount);\\r\\n\\r\\n\\tconstructor(address _stakingToken, address _rewardToken) {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_stakingToken != address(0) && _rewardToken != address(0),\\r\\n\\t\\t\\t\\\"Invalid token address\\\"\\r\\n\\t\\t);\\r\\n\\t\\tstakingToken = IERC20(_stakingToken);\\r\\n\\t\\trewardToken = IERC20(_rewardToken);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateRewardIndex(uint256 reward) internal {\\r\\n\\t\\tif (stakingSupply > 0) {\\r\\n\\t\\t\\trewardIndex =\\r\\n\\t\\t\\t\\trewardIndex +\\r\\n\\t\\t\\t\\t((reward * (MULTIPLIER)) / (stakingSupply));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateRewardIndexPublic(uint256 reward) public {\\r\\n\\t\\trequire(reward > 0, \\\"Reward must be positive\\\");\\r\\n\\t\\trequire(stakingSupply > 0, \\\"No staking supply to distribute rewards\\\");\\r\\n\\t\\trewardToken.transferFrom(msg.sender, address(this), reward);\\r\\n\\t\\tupdateRewardIndex(reward);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _calculateRewards(address account) private view returns (uint256) {\\r\\n\\t\\tuint256 timeStaked = block.timestamp - (stakeTimestamp[account]);\\r\\n\\t\\ttimeStaked = timeStaked > STAKING_PERIOD ? STAKING_PERIOD : timeStaked;\\r\\n\\t\\tuint256 shares = balanceStakedOf[account];\\r\\n\\t\\tuint256 rewardDelta = rewardIndex - (rewardIndexOf[account]);\\r\\n\\t\\treturn\\r\\n\\t\\t\\t(shares * (timeStaked) * (rewardDelta)) /\\r\\n\\t\\t\\t(MULTIPLIER) /\\r\\n\\t\\t\\t(STAKING_PERIOD);\\r\\n\\t}\\r\\n\\r\\n\\tfunction calculateRewardsEarned(\\r\\n\\t\\taddress account\\r\\n\\t) external view returns (uint256) {\\r\\n\\t\\treturn earned[account] + (_calculateRewards(account));\\r\\n\\t}\\r\\n\\r\\n\\tfunction _updateRewards(address account) internal {\\r\\n\\t\\tuint256 rewards = _calculateRewards(account);\\r\\n\\t\\tearned[account] = earned[account] + (rewards);\\r\\n\\t\\trewardIndexOf[account] = rewardIndex;\\r\\n\\t}\\r\\n\\r\\n\\tfunction stake(uint256 amount) external nonReentrant {\\r\\n\\t\\t_updateRewards(msg.sender);\\r\\n\\t\\tbalanceStakedOf[msg.sender] = balanceStakedOf[msg.sender] + (amount);\\r\\n\\t\\tstakingSupply = stakingSupply + (amount);\\r\\n\\t\\tstakeTimestamp[msg.sender] = block.timestamp;\\r\\n\\t\\tstakingToken.transferFrom(msg.sender, address(this), amount);\\r\\n\\t\\temit Staked(msg.sender, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction unstake(uint256 amount) external nonReentrant {\\r\\n\\t\\t_updateRewards(msg.sender);\\r\\n\\t\\tuint256 currentBalance = balanceStakedOf[msg.sender];\\r\\n\\t\\trequire(currentBalance >= amount, \\\"Insufficient balance to unstake\\\");\\r\\n\\t\\tbalanceStakedOf[msg.sender] = currentBalance - (amount);\\r\\n\\t\\tstakingSupply = stakingSupply - (amount);\\r\\n\\t\\tstakingToken.transfer(msg.sender, amount);\\r\\n\\t\\temit Unstaked(msg.sender, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction claim() external nonReentrant returns (uint256) {\\r\\n\\t\\t_updateRewards(msg.sender);\\r\\n\\t\\tuint256 reward = earned[msg.sender];\\r\\n\\t\\trequire(reward > 0, \\\"No rewards to claim\\\");\\r\\n\\t\\tearned[msg.sender] = 0;\\r\\n\\t\\trewardToken.transfer(msg.sender, reward);\\r\\n\\t\\temit RewardClaimed(msg.sender, reward);\\r\\n\\t\\treturn reward;\\r\\n\\t}\\r\\n\\r\\n\\tfunction claimTo(\\r\\n\\t\\taddress staker,\\r\\n\\t\\taddress _to\\r\\n\\t) public nonReentrant returns (uint256) {\\r\\n\\t\\t_updateRewards(staker);\\r\\n\\t\\tuint256 reward = earned[staker];\\r\\n\\t\\trequire(reward > 0, \\\"No rewards to claim\\\");\\r\\n\\t\\tearned[staker] = 0;\\r\\n\\t\\trewardToken.transfer(_to, reward);\\r\\n\\t\\temit RewardClaimed(_to, reward);\\r\\n\\t\\treturn reward;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x4236f3b50a0c3d01415036403724f5d927ec656686a07de43c49c6f4b92ec940\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x604061012081523461064d57610013610652565b9060206542616c756e6960d01b8184015261002c610652565b6542414c554e4960d01b8282015233156106355760008054336001600160a01b0319821681178355919291906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08480a38451906001600160401b03808311610621576004928354906001988983811c93168015610617575b8884101461052f578190601f938481116105c9575b50889084831160011461056a57889261055f575b5050600019600383901b1c191690891b1784555b825191821161054c5760059283548981811c91168015610542575b8882101461052f57908183859493116104e1575b5087918311600114610482578692610477575b5050600019600383901b1c191690871b1790555b84600655301594851580610472575b1561042f57306080523060a052601e600d55612710600e55601e600f55730addd25a91563696d8567df78d5a01c9a991f9b860c05273e592427a0aece92de3edee1f18e0157c0586156460e05261010095731f98431c8ad98523631ae4a59f267346ea31f984875261041957908492916101ca60035461068b565b600355308352845282822090670de0b6b3a7640000918281540190558351828152837fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef873093a330835260078552838320610225815461068b565b905561023260095461068b565b6009553383526008855242848420556009548015918215806103bf575b505050506102c0903083526008855261026b84842054426106d6565b6301e133809190828111156103b657506102ae825b308652600788526102a987872054916102a3600a54600b8c528a8a2054906106d6565b926106c3565b6106c3565b0404308352600c8552838320546106b6565b308252600c845282822055600b600a54935220556102dc6106e3565b505161537991826107b38339608051828181610f15015281816115f401526122c7015260a05182818161025701528181610d4501528181611d350152613a72015260c0518281816111ff015281816118d0015281816131c10152614433015260e051828181610a25015281816115b0015281816120bf01528181612556015281816127c70152818161329e0152818161338501528181614088015281816141bd01526146900152518181816104b70152818161053801528181610a01015281816110ee01528181612086015281816124f0015261276e0152f35b6102ae90610280565b6103ca575b8061024f565b909192939450600a54926104065750916103fb6102c0928795946ec097ce7bc90715b34b9f100000000004906106b6565b600a559038806103c4565b634e487b7160e01b855260129052602484fd5b5060249184519163ec442f0560e01b8352820152fd5b845162461bcd60e51b8152808301859052601560248201527f496e76616c696420746f6b656e206164647265737300000000000000000000006044820152606490fd5b61014f565b01519050388061012c565b8487528787208a94509190601f198416885b8a8282106104cb57505084116104b2575b505050811b019055610140565b015160001960f88460031b161c191690553880806104a5565b8385015186558d97909501949384019301610494565b9091925084875287872083808601871c8201928a8710610526575b9186958d9295949301881c01915b828110610518575050610119565b8981558695508c910161050a565b925081926104fc565b634e487b7160e01b875260228652602487fd5b90607f1690610105565b634e487b7160e01b855260418452602485fd5b0151905038806100d6565b8789528989208c94509190601f1984168a5b8c8282106105b3575050841161059a575b505050811b0184556100ea565b015160001960f88460031b161c1916905538808061058d565b8385015186558f9790950194938401930161057c565b9091508688528888208480850160051c8201928b861061060e575b918d91869594930160051c01915b8281106106005750506100c2565b8a81558594508d91016105f2565b925081926105e4565b92607f16926100ad565b634e487b7160e01b84526041600452602484fd5b8251631e4fbdf760e01b815260006004820152602490fd5b600080fd5b60408051919082016001600160401b038111838210176106755760405260068252565b634e487b7160e01b600052604160045260246000fd5b90670de0b6b3a764000082018092116106a057565b634e487b7160e01b600052601160045260246000fd5b919082018092116106a057565b818102929181159184041417156106a057565b919082039182116106a057565b732791bca1f2de4661ed88a30c99a7a9449aa84174600081815260116020527fd858bff8317940b1bb2b6603753b280d3518ab8e24c32a7de1cc1e7559e16598546107ad5760105468010000000000000000811015610799576001810180601055811015610785577f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720182905560105491815260116020526040902055600190565b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b82526041600452602482fd5b90509056fe6080604052600436101561001257600080fd5b60003560e01c8063012a33aa146135e057806306497cb91461359457806306fdde03146134cf578063095ea7b31461344957806312f399cf1461314657806318160ddd14613128578063185fcffe14610cda57806323b872dd1461303557806327d54a9214612ecd578063295b930014612eb25780632be01190146123745780632e17de78146122405780632f86556814611ff7578063313ce56714611fdb57806334a1ca8914611faf57806334decfc914611f9257806342966c6814611dc05780634e71d92d14611cc157806350b1b34a146117f95780635e7f8b761461173a57806365534d521461171c57806370259077146116e257806370a08231146116a8578063715018a61461164f57806371ddcfb81461161857806372f702f3146115d4578063735de9f7146115905780637811a785146115555780637b848914146115095780637d9fc717146112235780637dc0d1d0146111df578063833d557f146111a5578063853771881461118757806389a302711461115e5780638b086764146111125780638bdb2afa146110ce5780638da5cb5b146110a757806395d89b4114610f93578063a694fc3a14610e71578063a9059cbb14610e40578063ab86c69e14610cf8578063b9f5e61714610cda578063bf9c89bb14610ca0578063cde53358146109ca578063dd62ed3e14610978578063eedc3c5014610325578063f2fde38b1461029e578063f377e7cf146102805763f7c618c11461023757600080fd5b3461027b57600036600319011261027b5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b600080fd5b3461027b57600036600319011261027b576020600954604051908152f35b3461027b57602036600319011261027b576102b761364c565b6102bf613ca0565b6001600160a01b0380911690811561030c57600054826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b3461027b57610333366136bd565b919261033d613ccc565b60405160208101903360601b82526014815261035881613741565b5190203360005260126020526001600160a01b036040600020541615610869575b503360005260126020526001600160a01b036040600020541661039b846138da565b946103a96040519687613779565b8486526103b5856138da565b601f190136602088013760005b85811061082f5750813b1561027b5791604051928391630eedc3c560e41b8352816044840160406004860152526064830160648360051b85010192826000905b82821061077d5750505050508181036003190160248301528581526020018460005b8781106107515750509181600081819503925af1801561065657610723575b5060005b828110610455576001600655005b610468610463828585613893565b6138b9565b90604051630b4c774160e11b81526001600160a01b0383166004820152730d500b1d8e8ef31e21c99d1db9a6444d3adf12706024820152610bb860448201526020816064816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa90811561065657600091610704575b5060405190630b4c774160e11b82526001600160a01b0384166004830152730d500b1d8e8ef31e21c99d1db9a6444d3adf127060248301526101f460448301526020826064816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa918215610656576000926106ca575b506001600160a01b031615908115916106b7575b506105888287613958565b511515806106b0575b610698575b156105a6575b6001915001610447565b6040516370a0823160e01b8152306004820152916020836024816001600160a01b0385165afa92831561065657600093610662575b5060405163a9059cbb60e01b8152336004820152602481019390935260209083908160006001600160a01b0382604481015b0393165af191821561065657600192610627575b5061059c565b6106489060203d60201161064f575b6106408183613779565b81019061397b565b5085610621565b503d610636565b6040513d6000823e3d90fd5b92506020833d602011610690575b8161067d60209383613779565b8101031261027b5791519161060d6105db565b3d9150610670565b6106aa6001600160a01b03841661498a565b50610596565b5080610591565b6001600160a01b0391501615158661057d565b6001600160a01b039192506106f69060203d6020116106fd575b6106ee8183613779565b810190613993565b9190610569565b503d6106e4565b61071d915060203d6020116106fd576106ee8183613779565b866104e8565b67ffffffffffffffff811161073b5760405283610443565b634e487b7160e01b600052604160045260246000fd5b91819350602080916001600160a01b0361076c600195613678565b168152019301910190849291610424565b9193955091936063198882030185528535605e198336030181121561027b5782016001600160a01b036107af82613678565b168252602081013560208301526040810135601e198236030181121561027b5701906020823592019167ffffffffffffffff811161027b57803603831361027b576001928260209392606060408695015280606083015280608093848401376000838284010152601f801991011601019701950192018795949391610402565b806001600160a01b036108486104636001948a8a613893565b16600052601160205260406000205415610862828a613958565b52016103c2565b6040516108348082019082821067ffffffffffffffff83111761073b5782916108a091614af0843933815230602082015260400190565b03906000f58015610656576001600160a01b031663ffffffff813b1615610925573360008181526012602090815260409182902080546001600160a01b0319168517905581519283526001600160a01b03909316928201929092527f8c6e353968e7ffd60dba22ff7d2a4354af301f9d41858a35668e7292ec1301b69190a184610379565b60405162461bcd60e51b815260206004820152602560248201527f4167656e74206372656174696f6e206661696c65642c206e6f74206120636f6e6044820152641d1c9858dd60da1b6064820152608490fd5b3461027b57604036600319011261027b5761099161364c565b610999613662565b906001600160a01b038091166000526002602052604060002091166000526020526020604060002054604051908152f35b3461027b5760208060031936011261027b57600435906109e8613ccc565b6109f3821515613b4d565b6000916001600160a01b03807f00000000000000000000000000000000000000000000000000000000000000001693817f000000000000000000000000000000000000000000000000000000000000000016905b601054811015610c4f5780610a5c8492614953565b929054600393841b1c169154916040516370a0823160e01b815230600482015260249388828681865afa91821561065657600092610c20575b508115610c1457308314610c145760405163313ce56760e01b8152918983600481875afa9081156106565760ff8a92610ad895600091610be7575b5016926147ad565b9060008051602061532483398151915288818314610b8a5750604051630b4c774160e11b81526004810183905294850152610bb8604485015287846064818c5afa938415610656576001948791600091610b6d575b50610b39848885613e73565b1615610b5257610b4a913391613fd2565b505b01610a47565b610b6190610b6892339161458c565b15156139b2565b610b4c565b610b8491508a3d8c116106fd576106ee8183613779565b8b610b2d565b60405163a9059cbb60e01b8152336004820152602481019490945292945084915060449082906000905af191821561065657600192610bca575b50610b4c565b610be090873d891161064f576106408183613779565b5087610bc4565b610c0791508d803d10610c0d575b610bff8183613779565b810190613924565b8e610ad0565b503d610bf5565b50505060019150610b4c565b9091508881813d8311610c48575b610c388183613779565b8101031261027b5751908a610a95565b503d610c2e565b7fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5610c9685610c7e81336147fc565b60408051338152602081019290925290918291820190565b0390a16001600655005b3461027b57602036600319011261027b576001600160a01b03610cc161364c565b1660005260076020526020604060002054604051908152f35b3461027b57600036600319011261027b576020600d54604051908152f35b3461027b5760208060031936011261027b576004358015610dfb5760095415610da6576040516323b872dd60e01b81523360048201523060248201526044810182905291808360648160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af192831561065657610d8693610d88575b50506148a0565b005b81610d9e92903d1061064f576106408183613779565b508280610d7f565b60405162461bcd60e51b815260048101839052602760248201527f4e6f207374616b696e6720737570706c7920746f2064697374726962757465206044820152667265776172647360c81b6064820152608490fd5b60405162461bcd60e51b815260048101839052601760248201527f526577617264206d75737420626520706f7369746976650000000000000000006044820152606490fd5b3461027b57604036600319011261027b57610e66610e5c61364c565b60243590336141fa565b602060405160018152f35b3461027b5760208060031936011261027b5760043590610e8f613ccc565b610e9833614704565b3360005260078152610eaf826040600020546138cd565b3360005260078252604060002055610ec9826009546138cd565b60095533600081815260088352604090819020429055516323b872dd60e01b81526004810191909152306024820152604481018390529080828060648101038160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1918215610656577f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d92610f76575b506040519283523392a26001600655005b610f8c90823d841161064f576106408183613779565b5083610f65565b3461027b57600036600319011261027b5760405160006005549060018260011c916001841691821561109d575b602094858510841461108757858794868652918260001461106757505060011461100a575b50610ff292500383613779565b611006604051928284938452830190613627565b0390f35b84915060056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0906000915b85831061104f575050610ff2935082010185610fe5565b80548389018501528794508693909201918101611038565b60ff191685820152610ff295151560051b8501019250879150610fe59050565b634e487b7160e01b600052602260045260246000fd5b92607f1692610fc0565b3461027b57600036600319011261027b5760206001600160a01b0360005416604051908152f35b3461027b57600036600319011261027b5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461027b57602036600319011261027b57602061115661113061364c565b6001600160a01b038116600052600c8352611150604060002054916148dd565b906138cd565b604051908152f35b3461027b57600036600319011261027b5760206040516000805160206153248339815191528152f35b3461027b57600036600319011261027b576020600e54604051908152f35b3461027b57602036600319011261027b576001600160a01b036111c661364c565b1660005260136020526020604060002054604051908152f35b3461027b57600036600319011261027b5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461027b5760208060031936011261027b57600435611240613ccc565b61125a61125f61124e6142da565b600354928391856137b3565b613873565b6040516370a0823160e01b815233600482015260008051602061532483398151915292918582602481875afa918215610656576000926114d8575b506112ad64e8d4a5100092931515613b8c565b0480911061149357604051636eb1769f60e11b81523360048201523060248201528481604481865afa8015610656578290600090611462575b6112f292501015613c08565b6040516323b872dd60e01b858201908152336024830152306044830152606480830193909352918152601f1991600091829190611330608482613779565b519082865af1903d15611455573d9167ffffffffffffffff831161073b57611374926113668760405194601f8401160184613779565b82523d60008784013e614a27565b80519084821515928361143c575b50505061142457506113af6113a8600e5461125a6113a2600d548361393d565b856137b3565b809261393d565b906113ba823061474e565b60408051308152602081018490527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592611406929091849190a1600954611416575b610c7e813361474e565b0390a16001600655604051908152f35b61141f846148a0565b6113fc565b60249060405190635274afe760e01b82526004820152fd5b61144c935082018101910161397b565b15848481611382565b5061137490606090614a27565b50508481813d831161148c575b6114798183613779565b8101031261027b57816112f291516112e6565b503d61146f565b60405162461bcd60e51b815260048101859052601c60248201527f555344432062616c616e636520697320696e73756666696369656e74000000006044820152606490fd5b91508582813d8311611502575b6114ef8183613779565b8101031261027b579051906112ad61129a565b503d6114e5565b3461027b57602036600319011261027b577f120de5c966483867382dce1eb95f0d016a917f91b2188b2f4c1413333a9ffb0f6020600435611548613ca0565b80600f55604051908152a1005b3461027b57602036600319011261027b5760206001600160a01b038061157961364c565b166000526012825260406000205416604051908152f35b3461027b57600036600319011261027b5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461027b57600036600319011261027b5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461027b57602036600319011261027b57602061115660035461163c811515613c54565b61125a6116476142da565b6004356137b3565b3461027b57600036600319011261027b57611668613ca0565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461027b57602036600319011261027b576001600160a01b036116c961364c565b1660005260016020526020604060002054604051908152f35b3461027b57602036600319011261027b576001600160a01b0361170361364c565b1660005260086020526020604060002054604051908152f35b3461027b57600036600319011261027b576020600f54604051908152f35b3461027b57600036600319011261027b57604051806010548083526020809301809160106000527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6729060005b868282106117e557868661179c82880383613779565b604051928392818401908285525180915260408401929160005b8281106117c557505050500390f35b83516001600160a01b0316855286955093810193928101926001016117b6565b835485529093019260019283019201611786565b3461027b57604036600319011261027b57600435611815613662565b9061181e613ccc565b6118416118296142da565b61125a6003549161183b831515613b8c565b846137b3565b60405163313ce56760e01b808252602094929160008051602061532483398151915291908681600481865afa90811561065657600091611ca4575b506001600160a01b03809516936040519283528783600481885afa92831561065657600093611c85575b506040519363802431fb60e01b855260048501528784606481602499898b830152600060448301527f0000000000000000000000000000000000000000000000000000000000000000165afa93841561065657600094611c56575b5060ff821660ff841611600014611c0a5761192d839461192d611928856119339697613be3565b613bf7565b90613873565b91670de0b6b3a764000092838102938185041490151715611bf55761192861195f939261192d92613be3565b6040516370a0823160e01b815233600482015285818581865afa8015610656578291600091611bc4575b5010611b8057604051636eb1769f60e11b81523360048201523060248201528581604481865afa8015610656578290600090611b4f575b6119cc92501015613c08565b604080516323b872dd60e01b8782019081523386830190815230602082015280840194909452928190039182018152601f1992600092839290611a129060600182613779565b519082865af13d15611b42573d67ffffffffffffffff8111611b2d5790611a589291611a488860405194601f8401160184613779565b82523d60008884013e5b83614a9e565b805190858215159283611b14575b505050611aff575050611a876113a8600e5461125a6113a2600d548361393d565b611a91813061474e565b60408051308152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918391a1600954611af0575b50611ad8823361474e565b60408051338152602081018490529081908101611406565b611af9906148a0565b83611acd565b60405190635274afe760e01b82526004820152fd5b611b24935082018101910161397b565b15858581611a66565b84634e487b7160e01b60005260416004526000fd5b611a589150606090611a52565b50508581813d8311611b79575b611b668183613779565b8101031261027b57816119cc91516119c0565b503d611b5c565b60405162461bcd60e51b8152600481018690526017818501527f42616c616e636520697320696e73756666696369656e740000000000000000006044820152606490fd5b809250878092503d8311611bee575b611bdd8183613779565b8101031261027b5781905187611989565b503d611bd3565b84634e487b7160e01b60005260116004526000fd5b61192d8294611c1f61192886611c2596613be3565b906137b3565b91670de0b6b3a764000092838102938185041490151715611bf557611928611c51939261192d92613be3565b61195f565b9093508781813d8311611c7e575b611c6e8183613779565b8101031261027b57519288611901565b503d611c64565b611c9d919350883d8a11610c0d57610bff8183613779565b91886118a6565b611cbb9150873d8911610c0d57610bff8183613779565b8761187c565b3461027b57600036600319011261027b57611cda613ccc565b611ce333614704565b336000526020600c8152604060002054611cfe811515613b01565b336000818152600c845260408082208290555163a9059cbb60e01b81526004810192909252602482018390528390829060449082907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1801561065657611da3575b506040518181527f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241833392a26001600655604051908152f35b611db990833d851161064f576106408183613779565b5082611d6a565b3461027b5760208060031936011261027b5760043590611dde613ccc565b3360005260019060018152611dfa836040600020541015613b4d565b6000825b611e31577fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5610c9685610c7e81336147fc565b601054811015611f8d579081611e4e6001600160a01b0393614953565b939054600394851b1c169254926040516370a0823160e01b81523060048201528381602481855afa90811561065657600091611f60575b508581158015611f57575b611f4c575060405163313ce56760e01b8152918483600481845afa9283156106565760009689611efa9460ff8997611ed0958c91611f35575016926147ad565b60405163a9059cbb60e01b8152336004820152602481019190915295869283919082906044820190565b03925af19081156106565784938492611f18575b505b019091611dfe565b611f2e90843d861161064f576106408183613779565b5086611f0e565b610c079150893d8b11610c0d57610bff8183613779565b945050508290611f10565b50308314611e90565b90508381813d8311611f86575b611f778183613779565b8101031261027b575187611e85565b503d611f6d565b610c4f565b3461027b57600036600319011261027b5760206040516101f48152f35b3461027b57604036600319011261027b576020611156611fcd61364c565b611fd5613662565b906139fe565b3461027b57600036600319011261027b57602060405160128152f35b3461027b5760208060031936011261027b5761201161364c565b612019613ccc565b6040516370a0823160e01b81523060048201526001600160a01b038281168483602481845afa92831561065657600093612211575b5060405190630b4c774160e11b825260048201526000805160206153248339815191526024820152610bb860448201528481606481857f0000000000000000000000000000000000000000000000000000000000000000165afa908115610656576000916121f4575b506120e583837f00000000000000000000000000000000000000000000000000000000000000001686613e73565b16156121e0576120fa91610b61913091613fd2565b7f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f724161212533306139fe565b917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968856121bf61271061215c600354600f54906137b3565b04612167813061474e565b3060005260078452604060002061217f8282546138cd565b905561218d816009546138cd565b6009553360005260088452426040600020556009546121d2575b60408051308152602081019290925290918291820190565b0390a16040519283523392a26001600655005b6121db816148a0565b6121a7565b6121ef91610b6191309161458c565b6120fa565b61220b9150853d87116106fd576106ee8183613779565b856120b7565b9092508481813d8311612239575b6122298183613779565b8101031261027b5751918561204e565b503d61221f565b3461027b5760208060031936011261027b576004359061225e613ccc565b61226733614704565b336000526007815260406000205482811061232f57826122869161393d565b33600052600782526040600020556122a08260095461393d565b60095560405163a9059cbb60e01b81523360048201526024810183905290808260448160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1918215610656577f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7592610f7657506040519283523392a26001600655005b60405162461bcd60e51b815260048101839052601f60248201527f496e73756666696369656e742062616c616e636520746f20756e7374616b65006044820152606490fd5b3461027b57612382366136bd565b6000939192939160005b858110612e17575061239d856138f2565b906123a7866138f2565b936123b1876138f2565b936123bb886138f2565b936000916000936000996000925b8c88818610612bf257505050505050826123f4836123ee61240096956123fa95614550565b99614550565b96614550565b93614550565b9460005b8551811015612647576124178186613958565b51612425575b600101612404565b61248f906001600160a01b038061244a610463612442858c613958565b518d89613893565b166124558389613958565b516040516323b872dd60e01b8152336004820152306024820152604481019190915260209490918591839190829060009082906064820190565b03925af180156106565761262a575b506124b76104636124af848b613958565b518c88613893565b604051630b4c774160e11b815290821660048201526000805160206153248339815191526024820152610bb860448201529280846064817f000000000000000000000000000000000000000000000000000000000000000086165afa90811561065657838a6001968e936000956125f5575b505061257c9261253f6125479361046393613958565b51908a613893565b612551858b613958565b5190847f00000000000000000000000000000000000000000000000000000000000000001690613e73565b16156125bd576125ad6125956104636124af848b613958565b61259f8389613958565b5187516125b6573391613fd2565b505b905061241d565b3091613fd2565b6125e86125d06104636124af848b613958565b6125da8389613958565b5187516125ee57339161458c565b506125af565b309161458c565b6104639295506125479361261d61257c96938361253f94903d106106fd576106ee8183613779565b9693509350819450612529565b61264090843d861161064f576106408183613779565b508a61249e565b508582888560005b8151811015610e66576126628186613958565b51612670575b60010161264f565b61267a8186613958565b516127109081810290808204831490151715612b72578761269a91613873565b6040516370a0823160e01b80825233600483015292916020826024816000805160206153248339815191525afa90811561065657600091612bbc575b6126e092506137b3565b64e8d4a5100081029080820464e8d4a510001490151715612b725704908115159182612b18575b5050156126685761272661046361271e8385613958565b518587613893565b6001600160a01b0360405191630b4c774160e11b83521660048201526000805160206153248339815191526024820152610bb860448201526020816064816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa90811561065657600091612af9575b506001600160a01b036127c06104636127b88587613958565b518789613893565b91612801827f000000000000000000000000000000000000000000000000000000000000000016938464e8d4a510006127f9888d613958565b510491613e73565b16156128cc57508061283861281f6104636127b86128769587613958565b64e8d4a5100061282f848a613958565b51043091614105565b602061284f600e5461125a6113a2600d548361393d565b60405163a9059cbb60e01b8152336004820152602481019190915293849081906044820190565b038160006000805160206153248339815191525af1908115610656576001936128a6926128ad575b5015156139b2565b9050612668565b6128c59060203d60201161064f576106408183613779565b508961289e565b60206001600160a01b036128ee6104636128e68688613958565b51888a613893565b926129d2600064e8d4a51000612904888d613958565b516040517309e46f287cb791987b6228c32669ea5126aa105d60621b8882015261017760eb1b6034820181905272d500b1d8e8ef31e21c99d1db9a6444d3adf12760641b6037830152604b820152606098891b6bffffffffffffffffffffffff1916604e8201526042815291900461297b8261375d565b6040519161298883613725565b8252868201903082526040830198428a5283019081526080830190848252604051998a988997889663c04b8d5960e01b88528c60048901525160a0602489015260c4880190613627565b94511660448601525160648501525160848401525160a483015203925af190811561065657600091612ac7575b50612a476020612a20600e5461125a612a1a600d548361393d565b866137b3565b60405163a9059cbb60e01b8152336004820152602481019190915291829081906044820190565b038160006000805160206153248339815191525af1801561065657612aa8575b5015612a75576001906128a6565b60405162461bcd60e51b815260206004820152600b60248201526a14ddd85c0811985a5b195960aa1b6044820152606490fd5b612ac09060203d60201161064f576106408183613779565b5087612a67565b90506020813d602011612af1575b81612ae260209383613779565b8101031261027b5751876129ff565b3d9150612ad5565b612b12915060203d6020116106fd576106ee8183613779565b8761279f565b9091506040519182523360048301526020826024816000805160206153248339815191525afa91821561065657600092612b88575b5064e8d4a5100082029180830464e8d4a510001490151715612b725711158780612707565b634e487b7160e01b600052601160045260246000fd5b9091506020813d602011612bb4575b81612ba460209383613779565b8101031261027b57519088612b4d565b3d9150612b97565b90506020823d602011612bea575b81612bd760209383613779565b8101031261027b576126e09151906126d6565b3d9150612bca565b6001600160a01b03612c11610463886024969798999b95602095613893565b16604051938480926370a0823160e01b82523360048301525afa8015610656578e8a8994600093612dda575b50612c586104636004966020946001600160a01b0394613893565b166040519485809263313ce56760e01b82525afa928315610656578f938b88958789958d95600095612d9b575b509482612ce860ff612ccb612cbe8561046397612cb8612cee9c9d612cb2610463858f9e612cb29f613893565b90614383565b9d613893565b359c612710809c04613873565b8c81119c908d15612d8c5790612ce09161393d565b985b1661394a565b94613893565b9315612d515786612cfe916137b3565b0490670de0b6b3a764000091828102928184041490151715612b72578c612d4082612d2e600196612d4696613873565b928b612d3a838d613958565b52613958565b5261396c565b955b019291906123c9565b9d612d6292989993508e91506138cd565b9b87612d6e838d613958565b52612d79828b613958565b52612d839061396c565b95600190612d48565b612d959161393d565b98612ce2565b868096508486989394959260203d602011612dd3575b612dbb8183613779565b8101612dc691613924565b9750949392509650612c85565b503d612db1565b94505050506020823d602011612e0f575b81612df860209383613779565b8101031261027b5790518691908e8a612c58612c3d565b3d9150612deb565b9193926001600160a01b03612e30610463858986613893565b1660405180916370a0823160e01b825233600483015281602460209485935afa91821561065657600092612e82575b5050600191611150612e7992612cb2610463888c89613893565b9394920161238c565b90809250813d8311612eab575b612e998183613779565b8101031261027b575181611150612e5f565b503d612e8f565b3461027b57600036600319011261027b5760206111566142da565b3461027b5760208060031936011261027b57612ee761364c565b604051908282016001600160a01b03926bffffffffffffffffffffffff198360601b16825260148152612f1981613741565b5190209082811615612ff057612fa6612fb2856108349360405190612f4083870183613779565b85825282820195614af08739604080516001600160a01b039092168483019081523060208201529190612f7f908290840103601f198101835282613779565b604051958693612f97868601998a9251928391613604565b84019151809386840190613604565b01038084520182613779565b519020604051908482019260ff60f81b84523060601b60218401526035830152605582015260558152612fe48161375d565b51902016604051908152f35b60405162461bcd60e51b815260048101859052601d60248201527f4f776e657220616464726573732063616e6e6f74206265207a65726f2e0000006044820152606490fd5b3461027b57606036600319011261027b5761304e61364c565b613056613662565b604435906001600160a01b03831692836000526002602052604060002033600052602052604060002054936000198503613096575b50610e6693506141fa565b8385106131025780156130e95733156130d057610e669484916000526002602052604060002033600052602052036040600020558461308b565b604051634a1406b160e11b815260006004820152602490fd5b60405163e602df0560e01b815260006004820152602490fd5b604051637dc7a0d960e11b81523360048201526024810186905260448101859052606490fd5b3461027b57600036600319011261027b576020600354604051908152f35b3461027b57600036600319011261027b5761315f613ccc565b613180600354613170811515613c54565b61125a61317b6142da565b61379b565b60405163802431fb60e01b81523060048201526000805160206153248339815191526024820152600060448201526001600160a01b039060209081816064817f000000000000000000000000000000000000000000000000000000000000000087165afa9081156106565760009161341c575b50306000526001825260406000205490604051936370a0823160e01b918286523060048701526000805160206153248339815191529685876024818b5afa968715610656576000976133ed575b5064e8d4a510009081830292808404831490151715612b72578083101561335a5750808702908782041487151715612b725785946132ec93670de0b6b3a76400006132916132de956132e495613873565b0491808311613352575b507f0000000000000000000000000000000000000000000000000000000000000000166132c88982613cef565b6132d3308a30614105565b9384928310156137c6565b30613e73565b309030613fd2565b5060246040518096819382523060048301525afa90811561065657600091613322575b5061331b925011613827565b6001600655005b905082813d831161334b575b6133388183613779565b8101031261027b5761331b91518361330f565b503d61332e565b91508a61329b565b9350509095509392919311613373575b5050505061331b565b6133d26133c56133ca6001946133e4977f0000000000000000000000000000000000000000000000000000000000000000166133b0888230613e73565b6133bb308930613fd2565b93849283116137c6565b613cef565b309030614105565b50306000525260406000205411613827565b8080808061336a565b9096508581813d8311613415575b6134058183613779565b8101031261027b57519588613240565b503d6133fb565b90508181813d8311613442575b6134338183613779565b8101031261027b5751846131f3565b503d613429565b3461027b57604036600319011261027b5761346261364c565b6024359033156130e9576001600160a01b03169081156130d057336000526002602052604060002082600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b3461027b57600036600319011261027b5760405160006004549060018260011c916001841691821561358a575b602094858510841461108757858794868652918260001461106757505060011461352d5750610ff292500383613779565b84915060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b906000915b858310613572575050610ff2935082010185610fe5565b8054838901850152879450869390920191810161355b565b92607f16926134fc565b3461027b57602036600319011261027b577fbea1b31142ae4b1f4efad240349036d718b7950d246c127768097ccf602fc7e060206004356135d3613ca0565b80600d55604051908152a1005b3461027b57600036600319011261027b576020611156600354613170811515613c54565b60005b8381106136175750506000910152565b8181015183820152602001613607565b9060209161364081518092818552858086019101613604565b601f01601f1916010190565b600435906001600160a01b038216820361027b57565b602435906001600160a01b038216820361027b57565b35906001600160a01b038216820361027b57565b9181601f8401121561027b5782359167ffffffffffffffff831161027b576020808501948460051b01011161027b57565b604060031982011261027b5767ffffffffffffffff9160043583811161027b57826136ea9160040161368c565b9390939260243591821161027b576137049160040161368c565b9091565b610100810190811067ffffffffffffffff82111761073b57604052565b60a0810190811067ffffffffffffffff82111761073b57604052565b6040810190811067ffffffffffffffff82111761073b57604052565b6080810190811067ffffffffffffffff82111761073b57604052565b90601f8019910116810190811067ffffffffffffffff82111761073b57604052565b90670de0b6b3a76400009180830292830403612b7257565b81810292918115918404141715612b7257565b156137cd57565b60405162461bcd60e51b815260206004820152602c60248201527f417262697472616765206661696c65643a20696e73756666696369656e74206f60448201526b1d5d1c1d5d08185b5bdd5b9d60a21b6064820152608490fd5b1561382e57565b60405162461bcd60e51b815260206004820152601860248201527f41726269747261676520646964206e6f742070726f66697400000000000000006044820152606490fd5b811561387d570490565b634e487b7160e01b600052601260045260246000fd5b91908110156138a35760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b038116810361027b5790565b91908201809211612b7257565b67ffffffffffffffff811161073b5760051b60200190565b906138fc826138da565b6139096040519182613779565b828152809261391a601f19916138da565b0190602036910137565b9081602091031261027b575160ff8116810361027b5790565b91908203918211612b7257565b604d8111612b7257600a0a90565b80518210156138a35760209160051b010190565b6000198114612b725760010190565b9081602091031261027b5751801515810361027b5790565b9081602091031261027b57516001600160a01b038116810361027b5790565b156139b957565b60405162461bcd60e51b815260206004820152601760248201527f53776170204661696c65642c20547279204275726e28290000000000000000006044820152606490fd5b9190613a08613ccc565b613a1183614704565b6001600160a01b0380931690600093828552602090600c8252604086205493613a3b851515613b01565b8652600c825260408087208790555163a9059cbb60e01b81526001600160a01b03841660048201526024810185905282816044818a7f000000000000000000000000000000000000000000000000000000000000000087165af18015613af6577f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f72419495969750613ad9575b50604051938585521692a2906001600655565b613aef90833d851161064f576106408183613779565b5038613ac6565b6040513d89823e3d90fd5b15613b0857565b60405162461bcd60e51b815260206004820152601360248201527f4e6f207265776172647320746f20636c61696d000000000000000000000000006044820152606490fd5b15613b5457565b60405162461bcd60e51b815260206004820152601060248201526f125b9cdd59999a58da595b9d0810905360821b6044820152606490fd5b15613b9357565b60405162461bcd60e51b815260206004820152602260248201527f546f74616c2042414c554e4920737570706c792063616e6e6f74206265207a65604482015261726f60f01b6064820152608490fd5b9060ff8091169116039060ff8211612b7257565b60ff16604d8111612b7257600a0a90565b15613c0f57565b60405162461bcd60e51b815260206004820152601960248201527f436865636b2074686520746f6b656e20616c6c6f77616e6365000000000000006044820152606490fd5b15613c5b57565b60405162461bcd60e51b815260206004820152601b60248201527f546f74616c20737570706c792063616e6e6f74206265207a65726f00000000006044820152606490fd5b6001600160a01b03600054163303613cb457565b60405163118cdaa760e01b8152336004820152602490fd5b600260065414613cdd576002600655565b604051633ee5aeb560e01b8152600490fd5b60408051636eb1769f60e11b81523060048201526001600160a01b03831660248201526020936000805160206153248339815191528583604481845afa928315613e6857600093613e39575b50818303613d4c575b505050505050565b8592613dc4575b835163095ea7b360e01b81526001600160a01b0390951660048601526024850191909152839081600081604481015b03925af1908115613dba5750613d9c575b80808080613d44565b81613db292903d1061064f576106408183613779565b503880613d93565b513d6000823e3d90fd5b91509192835163095ea7b360e01b81526001600160a01b03821660048201526000602482015285816044816000875af18015613e2e5791869391613d82969593613e11575b509450613d53565b613e2790853d871161064f576106408183613779565b5038613e09565b85513d6000823e3d90fd5b9092508581813d8311613e61575b613e518183613779565b8101031261027b57519138613d3b565b503d613e47565b84513d6000823e3d90fd5b60408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015260209590949293919290918516908684604481855afa938415613e2e57600094613fa3575b50828403613ece575b50505050505050565b8693613f40575b845163095ea7b360e01b81526001600160a01b0390911660048201526024810192909252909350839081600081604481015b03925af1908115613dba5750613f22575b8080808080613ec5565b81613f3892903d1061064f576106408183613779565b503880613f18565b91938095919350519063095ea7b360e01b8252821660048201526000602482015285816044816000875af18015613e2e5791869391613f07969593613f86575b50613ed5565b613f9c90853d871161064f576106408183613779565b5038613f80565b9093508681813d8311613fcb575b613fbb8183613779565b8101031261027b57519238613ebc565b503d613fb1565b90604051613fdf81613708565b6001600160a01b03809316815282806020830160008051602061532483398151915281526040840194610bb88652826060860198168852608085019042825260a0860190815260c08601918460009a8b998a86528260e08b01978c89526040519d8e9c8d63414bf38960e01b9052511660048d0152511660248b01525162ffffff1660448a0152511660648801525160848701525160a48601525160c4850152511660e48301527f000000000000000000000000000000000000000000000000000000000000000016815a9361010492602095f19182156140f95780926140c557505090565b9091506020823d6020116140f1575b816140e160209383613779565b810103126140ee57505190565b80fd5b3d91506140d4565b604051903d90823e3d90fd5b9060405161411281613708565b600080516020615324833981519152815260208101926001600160a01b0380948180931681526040840194610bb88652826060860198168852608085019042825260a0860190815260c08601918460009a8b998a86528260e08b01978c89526040519d8e9c8d63414bf38960e01b9052511660048d0152511660248b01525162ffffff1660448a0152511660648801525160848701525160a48601525160c4850152511660e48301527f000000000000000000000000000000000000000000000000000000000000000016815a9361010492602095f19182156140f95780926140c557505090565b916001600160a01b038084169283156142c157169283156142a8576000908382526001602052604082205490838210614276575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95876020965260018652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b6000806010545b8082106142ed57505090565b90916001600160a01b0361430084614953565b90549060031b1c16604080516370a0823160e01b815230600482015260208082602481875afa928315613dba5750600092614350575b50509161115061434892600194614383565b9201906142e1565b81819392933d831161437c575b6143678183613779565b810103126140ee575051611150614348614336565b503d61435d565b60405163313ce56760e01b8082529192600092906020906001600160a01b03908116908285600481855afa948515614545578695614526575b506040519384526000805160206153248339815191528385600481845afa948515613af6578795614507575b5082146144d35760405163802431fb60e01b81526001600160a01b039290921660048301526000805160206153248339815191526024830152600060448301528290829060649082907f0000000000000000000000000000000000000000000000000000000000000000165afa918590836144a0575b50505061446e5750505050600090565b670de0b6b3a76400009361449661448f611928611c1f9461449c9796613be3565b80926137b3565b926137b3565b0490565b909180939650813d83116144cc575b6144b98183613779565b810103126140ee5750519238808061445e565b503d6144af565b505050505064e8d4a51000918281029281840414901517156144f3575090565b634e487b7160e01b81526011600452602490fd5b61451f919550843d8611610c0d57610bff8183613779565b93386143e8565b61453e919550833d8511610c0d57610bff8183613779565b93386143bc565b6040513d88823e3d90fd5b919061455b816138f2565b9060005b81811061456d575090925050565b8061457a60019287613958565b516145858286613958565b520161455f565b90916040519160209384916bffffffffffffffffffffffff199060601b168285015261017760eb1b80603486015272d500b1d8e8ef31e21c99d1db9a6444d3adf12760641b6037860152604b8501527309e46f287cb791987b6228c32669ea5126aa105d60621b604e850152604284526146058461375d565b6040519361461285613725565b8452818401926146726001600160a01b0392838093168652604087019642885260608101918252608081019660009788938482526040519a8b988997889663c04b8d5960e01b88528c60048901525160a0602489015260c4880190613627565b94511660448601525160648501525160848401525160a483015203927f0000000000000000000000000000000000000000000000000000000000000000165af19283156146f75781936146c6575b50505090565b9091809350813d83116146f0575b6146de8183613779565b810103126140ee5750513880806146c0565b503d6146d4565b50604051903d90823e3d90fd5b61472f6001600160a01b03614718836148dd565b92169182600052600c6020526040600020546138cd565b90600052600c602052604060002055600a54600b602052604060002055565b6001600160a01b03169081156142a8577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020826147906000946003546138cd565b6003558484526001825260408420818154019055604051908152a3565b9192906147bb831515613c54565b60128210156147ee576147cf9192936137b3565b9060120360128111612b72576147eb9261192d61192d9261394a565b90565b61125a91506147eb936137b3565b91906001600160a01b0383169081156142c1578160005260016020526040600020549381851061486e57506020817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260009596858752600184520360408620558060035403600355604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481018590526044810191909152606490fd5b60095490816148ad575050565b600a5490670de0b6b3a764000090818102918183041490151715612b72576148d89261115091613873565b600a55565b6001600160a01b0316670de0b6b3a76400006149486000838152600860205261494361490d60408320544261393d565b6301e1338095908681111561494d575085905b835260076020526144966040842054936040600a5491600b60205220549061393d565b6137b3565b040490565b90614920565b6010548110156138a35760106000527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720190600090565b600081815260116020526040812054614a225760105468010000000000000000811015614a0e5760018101806010558110156149fa5790826040927f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672015560105492815260116020522055600190565b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b82526041600452602482fd5b905090565b909190614a505750805115614a3e57805190602001fd5b604051630a12f52160e11b8152600490fd5b9080511580614a87575b614a615790565b604051639996b31560e01b81526000805160206153248339815191526004820152602490fd5b506000805160206153248339815191523b15614a5a565b90614ab35750805115614a3e57805190602001fd5b81511580614ae6575b614ac4575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15614abc56fe60803460bc57601f61083438819003918201601f19168301916001600160401b0383118484101760c157808492604094855283398101031260bc57604b602060458360d7565b920160d7565b6001600160a01b0390811691903383900360895760018060a01b03199116816000541617600055600154161760015560405161074990816100eb8239f35b60405162461bcd60e51b815260206004820152600b60248201526a27b7363c902937baba32b960a91b6044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820360bc5756fe608060408181526004908136101561001657600080fd5b600092833560e01c9081638da5cb5b1461045357508063b0f479a11461042b5763eedc3c501461004557600080fd5b3461042757806003193601126104275767ffffffffffffffff9082358281116103dc576100759036908501610476565b91909360248035858111610423576100909036908401610476565b90956001600160a01b0395600198878a541633036103e0578a5b82811061031c5750505050848754169084518092630c2fe7ff60e11b8252818660209586935afa908115610312578a916102e1575b50888a5b888a858084106101fb579450505050506100fb578880f35b88805b82811061010b5750508880f35b89918861012161011c84878e610570565b6104e4565b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81036101605750504761014d575b0189906100fe565b61015b888c5416479061066f565b610145565b88516370a0823160e01b8152308982015292935090919085828881845afa9182156101f157908392918d9594926101bb575b508a600a83116101a6575b50505050610145565b6101b2935416906105a9565b8a38808a61019d565b945090508584813d81116101ea575b6101d481836104f8565b810103126101e6578b93519038610192565b5080fd5b503d6101ca565b89513d85823e3d90fd5b8361011c9161020993610570565b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee810361024857506102406127106102368547610580565b048a84541661066f565b0189906100e3565b88516370a0823160e01b815230898201529192509085818881855afa908d82156102d6578d94939286929061029b575b5061028a610296939261271092610580565b04908b855416906105a9565b610240565b92945050508581813d83116102cf575b6102b581836104f8565b810103126102cb57518b9290849061028a610278565b8c80fd5b503d6102ab565b8a51903d90823e3d90fd5b90508281813d831161030b575b6102f881836104f8565b810103126103075751386100df565b8980fd5b503d6102ee565b86513d8c823e3d90fd5b61032a61011c8285856104ac565b8c6020918261033a8588886104ac565b0135906103488588886104ac565b8c81013590601e19813603018212156103dc57018035908982116103dc5785019281360384136103dc578493828f519384928337810185815203925af161038d610530565b501561039b57508a016100aa565b876011886064938c519362461bcd60e51b85528401528201527f42617463682063616c6c206661696c65640000000000000000000000000000006044820152fd5b8480fd5b865162461bcd60e51b8152602081880152601b60248201527f43616c6c61626c65206f6e6c792062792074686520726f7574657200000000006044820152606490fd5b8780fd5b8280fd5b8382346101e657816003193601126101e6576020906001600160a01b03600154169051908152f35b8490346101e657816003193601126101e6576001600160a01b0360209254168152f35b9181601f840112156104a75782359167ffffffffffffffff83116104a7576020808501948460051b0101116104a757565b600080fd5b91908110156104ce5760051b81013590605e19813603018212156104a7570190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036104a75790565b90601f8019910116810190811067ffffffffffffffff82111761051a57604052565b634e487b7160e01b600052604160045260246000fd5b3d1561056b573d9067ffffffffffffffff821161051a576040519161055f601f8201601f1916602001846104f8565b82523d6000602084013e565b606090565b91908110156104ce5760051b0190565b8181029291811591840414171561059357565b634e487b7160e01b600052601160045260246000fd5b91909160405192602084019263a9059cbb60e01b84526001600160a01b038092166024860152604485015260448452608084019184831067ffffffffffffffff84111761051a57610614926040521692600080938192519082875af161060d610530565b90846106c2565b908151918215159283610644575b50505061062c5750565b60249060405190635274afe760e01b82526004820152fd5b8192935090602091810103126101e657602001519081159182150361066c5750388080610622565b80fd5b8147106106aa5760008080936001600160a01b038294165af1610690610530565b501561069857565b604051630a12f52160e11b8152600490fd5b60405163cd78605960e01b8152306004820152602490fd5b906106d7575080511561069857805190602001fd5b8151158061070a575b6106e8575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156106e056fea26469706673582212205930771bdac7a28577e83853179585c14d2d1de60202bee4d616bc2925c9934164736f6c634300081900330000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174a2646970667358221220de3461838761f5993074ee61b8d8216b7b91b643b2cf00cadf63f8ac3497f19664736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063012a33aa146135e057806306497cb91461359457806306fdde03146134cf578063095ea7b31461344957806312f399cf1461314657806318160ddd14613128578063185fcffe14610cda57806323b872dd1461303557806327d54a9214612ecd578063295b930014612eb25780632be01190146123745780632e17de78146122405780632f86556814611ff7578063313ce56714611fdb57806334a1ca8914611faf57806334decfc914611f9257806342966c6814611dc05780634e71d92d14611cc157806350b1b34a146117f95780635e7f8b761461173a57806365534d521461171c57806370259077146116e257806370a08231146116a8578063715018a61461164f57806371ddcfb81461161857806372f702f3146115d4578063735de9f7146115905780637811a785146115555780637b848914146115095780637d9fc717146112235780637dc0d1d0146111df578063833d557f146111a5578063853771881461118757806389a302711461115e5780638b086764146111125780638bdb2afa146110ce5780638da5cb5b146110a757806395d89b4114610f93578063a694fc3a14610e71578063a9059cbb14610e40578063ab86c69e14610cf8578063b9f5e61714610cda578063bf9c89bb14610ca0578063cde53358146109ca578063dd62ed3e14610978578063eedc3c5014610325578063f2fde38b1461029e578063f377e7cf146102805763f7c618c11461023757600080fd5b3461027b57600036600319011261027b5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b600080fd5b3461027b57600036600319011261027b576020600954604051908152f35b3461027b57602036600319011261027b576102b761364c565b6102bf613ca0565b6001600160a01b0380911690811561030c57600054826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b3461027b57610333366136bd565b919261033d613ccc565b60405160208101903360601b82526014815261035881613741565b5190203360005260126020526001600160a01b036040600020541615610869575b503360005260126020526001600160a01b036040600020541661039b846138da565b946103a96040519687613779565b8486526103b5856138da565b601f190136602088013760005b85811061082f5750813b1561027b5791604051928391630eedc3c560e41b8352816044840160406004860152526064830160648360051b85010192826000905b82821061077d5750505050508181036003190160248301528581526020018460005b8781106107515750509181600081819503925af1801561065657610723575b5060005b828110610455576001600655005b610468610463828585613893565b6138b9565b90604051630b4c774160e11b81526001600160a01b0383166004820152730d500b1d8e8ef31e21c99d1db9a6444d3adf12706024820152610bb860448201526020816064816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa90811561065657600091610704575b5060405190630b4c774160e11b82526001600160a01b0384166004830152730d500b1d8e8ef31e21c99d1db9a6444d3adf127060248301526101f460448301526020826064816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa918215610656576000926106ca575b506001600160a01b031615908115916106b7575b506105888287613958565b511515806106b0575b610698575b156105a6575b6001915001610447565b6040516370a0823160e01b8152306004820152916020836024816001600160a01b0385165afa92831561065657600093610662575b5060405163a9059cbb60e01b8152336004820152602481019390935260209083908160006001600160a01b0382604481015b0393165af191821561065657600192610627575b5061059c565b6106489060203d60201161064f575b6106408183613779565b81019061397b565b5085610621565b503d610636565b6040513d6000823e3d90fd5b92506020833d602011610690575b8161067d60209383613779565b8101031261027b5791519161060d6105db565b3d9150610670565b6106aa6001600160a01b03841661498a565b50610596565b5080610591565b6001600160a01b0391501615158661057d565b6001600160a01b039192506106f69060203d6020116106fd575b6106ee8183613779565b810190613993565b9190610569565b503d6106e4565b61071d915060203d6020116106fd576106ee8183613779565b866104e8565b67ffffffffffffffff811161073b5760405283610443565b634e487b7160e01b600052604160045260246000fd5b91819350602080916001600160a01b0361076c600195613678565b168152019301910190849291610424565b9193955091936063198882030185528535605e198336030181121561027b5782016001600160a01b036107af82613678565b168252602081013560208301526040810135601e198236030181121561027b5701906020823592019167ffffffffffffffff811161027b57803603831361027b576001928260209392606060408695015280606083015280608093848401376000838284010152601f801991011601019701950192018795949391610402565b806001600160a01b036108486104636001948a8a613893565b16600052601160205260406000205415610862828a613958565b52016103c2565b6040516108348082019082821067ffffffffffffffff83111761073b5782916108a091614af0843933815230602082015260400190565b03906000f58015610656576001600160a01b031663ffffffff813b1615610925573360008181526012602090815260409182902080546001600160a01b0319168517905581519283526001600160a01b03909316928201929092527f8c6e353968e7ffd60dba22ff7d2a4354af301f9d41858a35668e7292ec1301b69190a184610379565b60405162461bcd60e51b815260206004820152602560248201527f4167656e74206372656174696f6e206661696c65642c206e6f74206120636f6e6044820152641d1c9858dd60da1b6064820152608490fd5b3461027b57604036600319011261027b5761099161364c565b610999613662565b906001600160a01b038091166000526002602052604060002091166000526020526020604060002054604051908152f35b3461027b5760208060031936011261027b57600435906109e8613ccc565b6109f3821515613b4d565b6000916001600160a01b03807f00000000000000000000000000000000000000000000000000000000000000001693817f000000000000000000000000000000000000000000000000000000000000000016905b601054811015610c4f5780610a5c8492614953565b929054600393841b1c169154916040516370a0823160e01b815230600482015260249388828681865afa91821561065657600092610c20575b508115610c1457308314610c145760405163313ce56760e01b8152918983600481875afa9081156106565760ff8a92610ad895600091610be7575b5016926147ad565b9060008051602061532483398151915288818314610b8a5750604051630b4c774160e11b81526004810183905294850152610bb8604485015287846064818c5afa938415610656576001948791600091610b6d575b50610b39848885613e73565b1615610b5257610b4a913391613fd2565b505b01610a47565b610b6190610b6892339161458c565b15156139b2565b610b4c565b610b8491508a3d8c116106fd576106ee8183613779565b8b610b2d565b60405163a9059cbb60e01b8152336004820152602481019490945292945084915060449082906000905af191821561065657600192610bca575b50610b4c565b610be090873d891161064f576106408183613779565b5087610bc4565b610c0791508d803d10610c0d575b610bff8183613779565b810190613924565b8e610ad0565b503d610bf5565b50505060019150610b4c565b9091508881813d8311610c48575b610c388183613779565b8101031261027b5751908a610a95565b503d610c2e565b7fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5610c9685610c7e81336147fc565b60408051338152602081019290925290918291820190565b0390a16001600655005b3461027b57602036600319011261027b576001600160a01b03610cc161364c565b1660005260076020526020604060002054604051908152f35b3461027b57600036600319011261027b576020600d54604051908152f35b3461027b5760208060031936011261027b576004358015610dfb5760095415610da6576040516323b872dd60e01b81523360048201523060248201526044810182905291808360648160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af192831561065657610d8693610d88575b50506148a0565b005b81610d9e92903d1061064f576106408183613779565b508280610d7f565b60405162461bcd60e51b815260048101839052602760248201527f4e6f207374616b696e6720737570706c7920746f2064697374726962757465206044820152667265776172647360c81b6064820152608490fd5b60405162461bcd60e51b815260048101839052601760248201527f526577617264206d75737420626520706f7369746976650000000000000000006044820152606490fd5b3461027b57604036600319011261027b57610e66610e5c61364c565b60243590336141fa565b602060405160018152f35b3461027b5760208060031936011261027b5760043590610e8f613ccc565b610e9833614704565b3360005260078152610eaf826040600020546138cd565b3360005260078252604060002055610ec9826009546138cd565b60095533600081815260088352604090819020429055516323b872dd60e01b81526004810191909152306024820152604481018390529080828060648101038160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1918215610656577f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d92610f76575b506040519283523392a26001600655005b610f8c90823d841161064f576106408183613779565b5083610f65565b3461027b57600036600319011261027b5760405160006005549060018260011c916001841691821561109d575b602094858510841461108757858794868652918260001461106757505060011461100a575b50610ff292500383613779565b611006604051928284938452830190613627565b0390f35b84915060056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0906000915b85831061104f575050610ff2935082010185610fe5565b80548389018501528794508693909201918101611038565b60ff191685820152610ff295151560051b8501019250879150610fe59050565b634e487b7160e01b600052602260045260246000fd5b92607f1692610fc0565b3461027b57600036600319011261027b5760206001600160a01b0360005416604051908152f35b3461027b57600036600319011261027b5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461027b57602036600319011261027b57602061115661113061364c565b6001600160a01b038116600052600c8352611150604060002054916148dd565b906138cd565b604051908152f35b3461027b57600036600319011261027b5760206040516000805160206153248339815191528152f35b3461027b57600036600319011261027b576020600e54604051908152f35b3461027b57602036600319011261027b576001600160a01b036111c661364c565b1660005260136020526020604060002054604051908152f35b3461027b57600036600319011261027b5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461027b5760208060031936011261027b57600435611240613ccc565b61125a61125f61124e6142da565b600354928391856137b3565b613873565b6040516370a0823160e01b815233600482015260008051602061532483398151915292918582602481875afa918215610656576000926114d8575b506112ad64e8d4a5100092931515613b8c565b0480911061149357604051636eb1769f60e11b81523360048201523060248201528481604481865afa8015610656578290600090611462575b6112f292501015613c08565b6040516323b872dd60e01b858201908152336024830152306044830152606480830193909352918152601f1991600091829190611330608482613779565b519082865af1903d15611455573d9167ffffffffffffffff831161073b57611374926113668760405194601f8401160184613779565b82523d60008784013e614a27565b80519084821515928361143c575b50505061142457506113af6113a8600e5461125a6113a2600d548361393d565b856137b3565b809261393d565b906113ba823061474e565b60408051308152602081018490527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592611406929091849190a1600954611416575b610c7e813361474e565b0390a16001600655604051908152f35b61141f846148a0565b6113fc565b60249060405190635274afe760e01b82526004820152fd5b61144c935082018101910161397b565b15848481611382565b5061137490606090614a27565b50508481813d831161148c575b6114798183613779565b8101031261027b57816112f291516112e6565b503d61146f565b60405162461bcd60e51b815260048101859052601c60248201527f555344432062616c616e636520697320696e73756666696369656e74000000006044820152606490fd5b91508582813d8311611502575b6114ef8183613779565b8101031261027b579051906112ad61129a565b503d6114e5565b3461027b57602036600319011261027b577f120de5c966483867382dce1eb95f0d016a917f91b2188b2f4c1413333a9ffb0f6020600435611548613ca0565b80600f55604051908152a1005b3461027b57602036600319011261027b5760206001600160a01b038061157961364c565b166000526012825260406000205416604051908152f35b3461027b57600036600319011261027b5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461027b57600036600319011261027b5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461027b57602036600319011261027b57602061115660035461163c811515613c54565b61125a6116476142da565b6004356137b3565b3461027b57600036600319011261027b57611668613ca0565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461027b57602036600319011261027b576001600160a01b036116c961364c565b1660005260016020526020604060002054604051908152f35b3461027b57602036600319011261027b576001600160a01b0361170361364c565b1660005260086020526020604060002054604051908152f35b3461027b57600036600319011261027b576020600f54604051908152f35b3461027b57600036600319011261027b57604051806010548083526020809301809160106000527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6729060005b868282106117e557868661179c82880383613779565b604051928392818401908285525180915260408401929160005b8281106117c557505050500390f35b83516001600160a01b0316855286955093810193928101926001016117b6565b835485529093019260019283019201611786565b3461027b57604036600319011261027b57600435611815613662565b9061181e613ccc565b6118416118296142da565b61125a6003549161183b831515613b8c565b846137b3565b60405163313ce56760e01b808252602094929160008051602061532483398151915291908681600481865afa90811561065657600091611ca4575b506001600160a01b03809516936040519283528783600481885afa92831561065657600093611c85575b506040519363802431fb60e01b855260048501528784606481602499898b830152600060448301527f0000000000000000000000000000000000000000000000000000000000000000165afa93841561065657600094611c56575b5060ff821660ff841611600014611c0a5761192d839461192d611928856119339697613be3565b613bf7565b90613873565b91670de0b6b3a764000092838102938185041490151715611bf55761192861195f939261192d92613be3565b6040516370a0823160e01b815233600482015285818581865afa8015610656578291600091611bc4575b5010611b8057604051636eb1769f60e11b81523360048201523060248201528581604481865afa8015610656578290600090611b4f575b6119cc92501015613c08565b604080516323b872dd60e01b8782019081523386830190815230602082015280840194909452928190039182018152601f1992600092839290611a129060600182613779565b519082865af13d15611b42573d67ffffffffffffffff8111611b2d5790611a589291611a488860405194601f8401160184613779565b82523d60008884013e5b83614a9e565b805190858215159283611b14575b505050611aff575050611a876113a8600e5461125a6113a2600d548361393d565b611a91813061474e565b60408051308152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918391a1600954611af0575b50611ad8823361474e565b60408051338152602081018490529081908101611406565b611af9906148a0565b83611acd565b60405190635274afe760e01b82526004820152fd5b611b24935082018101910161397b565b15858581611a66565b84634e487b7160e01b60005260416004526000fd5b611a589150606090611a52565b50508581813d8311611b79575b611b668183613779565b8101031261027b57816119cc91516119c0565b503d611b5c565b60405162461bcd60e51b8152600481018690526017818501527f42616c616e636520697320696e73756666696369656e740000000000000000006044820152606490fd5b809250878092503d8311611bee575b611bdd8183613779565b8101031261027b5781905187611989565b503d611bd3565b84634e487b7160e01b60005260116004526000fd5b61192d8294611c1f61192886611c2596613be3565b906137b3565b91670de0b6b3a764000092838102938185041490151715611bf557611928611c51939261192d92613be3565b61195f565b9093508781813d8311611c7e575b611c6e8183613779565b8101031261027b57519288611901565b503d611c64565b611c9d919350883d8a11610c0d57610bff8183613779565b91886118a6565b611cbb9150873d8911610c0d57610bff8183613779565b8761187c565b3461027b57600036600319011261027b57611cda613ccc565b611ce333614704565b336000526020600c8152604060002054611cfe811515613b01565b336000818152600c845260408082208290555163a9059cbb60e01b81526004810192909252602482018390528390829060449082907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1801561065657611da3575b506040518181527f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241833392a26001600655604051908152f35b611db990833d851161064f576106408183613779565b5082611d6a565b3461027b5760208060031936011261027b5760043590611dde613ccc565b3360005260019060018152611dfa836040600020541015613b4d565b6000825b611e31577fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5610c9685610c7e81336147fc565b601054811015611f8d579081611e4e6001600160a01b0393614953565b939054600394851b1c169254926040516370a0823160e01b81523060048201528381602481855afa90811561065657600091611f60575b508581158015611f57575b611f4c575060405163313ce56760e01b8152918483600481845afa9283156106565760009689611efa9460ff8997611ed0958c91611f35575016926147ad565b60405163a9059cbb60e01b8152336004820152602481019190915295869283919082906044820190565b03925af19081156106565784938492611f18575b505b019091611dfe565b611f2e90843d861161064f576106408183613779565b5086611f0e565b610c079150893d8b11610c0d57610bff8183613779565b945050508290611f10565b50308314611e90565b90508381813d8311611f86575b611f778183613779565b8101031261027b575187611e85565b503d611f6d565b610c4f565b3461027b57600036600319011261027b5760206040516101f48152f35b3461027b57604036600319011261027b576020611156611fcd61364c565b611fd5613662565b906139fe565b3461027b57600036600319011261027b57602060405160128152f35b3461027b5760208060031936011261027b5761201161364c565b612019613ccc565b6040516370a0823160e01b81523060048201526001600160a01b038281168483602481845afa92831561065657600093612211575b5060405190630b4c774160e11b825260048201526000805160206153248339815191526024820152610bb860448201528481606481857f0000000000000000000000000000000000000000000000000000000000000000165afa908115610656576000916121f4575b506120e583837f00000000000000000000000000000000000000000000000000000000000000001686613e73565b16156121e0576120fa91610b61913091613fd2565b7f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f724161212533306139fe565b917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968856121bf61271061215c600354600f54906137b3565b04612167813061474e565b3060005260078452604060002061217f8282546138cd565b905561218d816009546138cd565b6009553360005260088452426040600020556009546121d2575b60408051308152602081019290925290918291820190565b0390a16040519283523392a26001600655005b6121db816148a0565b6121a7565b6121ef91610b6191309161458c565b6120fa565b61220b9150853d87116106fd576106ee8183613779565b856120b7565b9092508481813d8311612239575b6122298183613779565b8101031261027b5751918561204e565b503d61221f565b3461027b5760208060031936011261027b576004359061225e613ccc565b61226733614704565b336000526007815260406000205482811061232f57826122869161393d565b33600052600782526040600020556122a08260095461393d565b60095560405163a9059cbb60e01b81523360048201526024810183905290808260448160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1918215610656577f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7592610f7657506040519283523392a26001600655005b60405162461bcd60e51b815260048101839052601f60248201527f496e73756666696369656e742062616c616e636520746f20756e7374616b65006044820152606490fd5b3461027b57612382366136bd565b6000939192939160005b858110612e17575061239d856138f2565b906123a7866138f2565b936123b1876138f2565b936123bb886138f2565b936000916000936000996000925b8c88818610612bf257505050505050826123f4836123ee61240096956123fa95614550565b99614550565b96614550565b93614550565b9460005b8551811015612647576124178186613958565b51612425575b600101612404565b61248f906001600160a01b038061244a610463612442858c613958565b518d89613893565b166124558389613958565b516040516323b872dd60e01b8152336004820152306024820152604481019190915260209490918591839190829060009082906064820190565b03925af180156106565761262a575b506124b76104636124af848b613958565b518c88613893565b604051630b4c774160e11b815290821660048201526000805160206153248339815191526024820152610bb860448201529280846064817f000000000000000000000000000000000000000000000000000000000000000086165afa90811561065657838a6001968e936000956125f5575b505061257c9261253f6125479361046393613958565b51908a613893565b612551858b613958565b5190847f00000000000000000000000000000000000000000000000000000000000000001690613e73565b16156125bd576125ad6125956104636124af848b613958565b61259f8389613958565b5187516125b6573391613fd2565b505b905061241d565b3091613fd2565b6125e86125d06104636124af848b613958565b6125da8389613958565b5187516125ee57339161458c565b506125af565b309161458c565b6104639295506125479361261d61257c96938361253f94903d106106fd576106ee8183613779565b9693509350819450612529565b61264090843d861161064f576106408183613779565b508a61249e565b508582888560005b8151811015610e66576126628186613958565b51612670575b60010161264f565b61267a8186613958565b516127109081810290808204831490151715612b72578761269a91613873565b6040516370a0823160e01b80825233600483015292916020826024816000805160206153248339815191525afa90811561065657600091612bbc575b6126e092506137b3565b64e8d4a5100081029080820464e8d4a510001490151715612b725704908115159182612b18575b5050156126685761272661046361271e8385613958565b518587613893565b6001600160a01b0360405191630b4c774160e11b83521660048201526000805160206153248339815191526024820152610bb860448201526020816064816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa90811561065657600091612af9575b506001600160a01b036127c06104636127b88587613958565b518789613893565b91612801827f000000000000000000000000000000000000000000000000000000000000000016938464e8d4a510006127f9888d613958565b510491613e73565b16156128cc57508061283861281f6104636127b86128769587613958565b64e8d4a5100061282f848a613958565b51043091614105565b602061284f600e5461125a6113a2600d548361393d565b60405163a9059cbb60e01b8152336004820152602481019190915293849081906044820190565b038160006000805160206153248339815191525af1908115610656576001936128a6926128ad575b5015156139b2565b9050612668565b6128c59060203d60201161064f576106408183613779565b508961289e565b60206001600160a01b036128ee6104636128e68688613958565b51888a613893565b926129d2600064e8d4a51000612904888d613958565b516040517309e46f287cb791987b6228c32669ea5126aa105d60621b8882015261017760eb1b6034820181905272d500b1d8e8ef31e21c99d1db9a6444d3adf12760641b6037830152604b820152606098891b6bffffffffffffffffffffffff1916604e8201526042815291900461297b8261375d565b6040519161298883613725565b8252868201903082526040830198428a5283019081526080830190848252604051998a988997889663c04b8d5960e01b88528c60048901525160a0602489015260c4880190613627565b94511660448601525160648501525160848401525160a483015203925af190811561065657600091612ac7575b50612a476020612a20600e5461125a612a1a600d548361393d565b866137b3565b60405163a9059cbb60e01b8152336004820152602481019190915291829081906044820190565b038160006000805160206153248339815191525af1801561065657612aa8575b5015612a75576001906128a6565b60405162461bcd60e51b815260206004820152600b60248201526a14ddd85c0811985a5b195960aa1b6044820152606490fd5b612ac09060203d60201161064f576106408183613779565b5087612a67565b90506020813d602011612af1575b81612ae260209383613779565b8101031261027b5751876129ff565b3d9150612ad5565b612b12915060203d6020116106fd576106ee8183613779565b8761279f565b9091506040519182523360048301526020826024816000805160206153248339815191525afa91821561065657600092612b88575b5064e8d4a5100082029180830464e8d4a510001490151715612b725711158780612707565b634e487b7160e01b600052601160045260246000fd5b9091506020813d602011612bb4575b81612ba460209383613779565b8101031261027b57519088612b4d565b3d9150612b97565b90506020823d602011612bea575b81612bd760209383613779565b8101031261027b576126e09151906126d6565b3d9150612bca565b6001600160a01b03612c11610463886024969798999b95602095613893565b16604051938480926370a0823160e01b82523360048301525afa8015610656578e8a8994600093612dda575b50612c586104636004966020946001600160a01b0394613893565b166040519485809263313ce56760e01b82525afa928315610656578f938b88958789958d95600095612d9b575b509482612ce860ff612ccb612cbe8561046397612cb8612cee9c9d612cb2610463858f9e612cb29f613893565b90614383565b9d613893565b359c612710809c04613873565b8c81119c908d15612d8c5790612ce09161393d565b985b1661394a565b94613893565b9315612d515786612cfe916137b3565b0490670de0b6b3a764000091828102928184041490151715612b72578c612d4082612d2e600196612d4696613873565b928b612d3a838d613958565b52613958565b5261396c565b955b019291906123c9565b9d612d6292989993508e91506138cd565b9b87612d6e838d613958565b52612d79828b613958565b52612d839061396c565b95600190612d48565b612d959161393d565b98612ce2565b868096508486989394959260203d602011612dd3575b612dbb8183613779565b8101612dc691613924565b9750949392509650612c85565b503d612db1565b94505050506020823d602011612e0f575b81612df860209383613779565b8101031261027b5790518691908e8a612c58612c3d565b3d9150612deb565b9193926001600160a01b03612e30610463858986613893565b1660405180916370a0823160e01b825233600483015281602460209485935afa91821561065657600092612e82575b5050600191611150612e7992612cb2610463888c89613893565b9394920161238c565b90809250813d8311612eab575b612e998183613779565b8101031261027b575181611150612e5f565b503d612e8f565b3461027b57600036600319011261027b5760206111566142da565b3461027b5760208060031936011261027b57612ee761364c565b604051908282016001600160a01b03926bffffffffffffffffffffffff198360601b16825260148152612f1981613741565b5190209082811615612ff057612fa6612fb2856108349360405190612f4083870183613779565b85825282820195614af08739604080516001600160a01b039092168483019081523060208201529190612f7f908290840103601f198101835282613779565b604051958693612f97868601998a9251928391613604565b84019151809386840190613604565b01038084520182613779565b519020604051908482019260ff60f81b84523060601b60218401526035830152605582015260558152612fe48161375d565b51902016604051908152f35b60405162461bcd60e51b815260048101859052601d60248201527f4f776e657220616464726573732063616e6e6f74206265207a65726f2e0000006044820152606490fd5b3461027b57606036600319011261027b5761304e61364c565b613056613662565b604435906001600160a01b03831692836000526002602052604060002033600052602052604060002054936000198503613096575b50610e6693506141fa565b8385106131025780156130e95733156130d057610e669484916000526002602052604060002033600052602052036040600020558461308b565b604051634a1406b160e11b815260006004820152602490fd5b60405163e602df0560e01b815260006004820152602490fd5b604051637dc7a0d960e11b81523360048201526024810186905260448101859052606490fd5b3461027b57600036600319011261027b576020600354604051908152f35b3461027b57600036600319011261027b5761315f613ccc565b613180600354613170811515613c54565b61125a61317b6142da565b61379b565b60405163802431fb60e01b81523060048201526000805160206153248339815191526024820152600060448201526001600160a01b039060209081816064817f000000000000000000000000000000000000000000000000000000000000000087165afa9081156106565760009161341c575b50306000526001825260406000205490604051936370a0823160e01b918286523060048701526000805160206153248339815191529685876024818b5afa968715610656576000976133ed575b5064e8d4a510009081830292808404831490151715612b72578083101561335a5750808702908782041487151715612b725785946132ec93670de0b6b3a76400006132916132de956132e495613873565b0491808311613352575b507f0000000000000000000000000000000000000000000000000000000000000000166132c88982613cef565b6132d3308a30614105565b9384928310156137c6565b30613e73565b309030613fd2565b5060246040518096819382523060048301525afa90811561065657600091613322575b5061331b925011613827565b6001600655005b905082813d831161334b575b6133388183613779565b8101031261027b5761331b91518361330f565b503d61332e565b91508a61329b565b9350509095509392919311613373575b5050505061331b565b6133d26133c56133ca6001946133e4977f0000000000000000000000000000000000000000000000000000000000000000166133b0888230613e73565b6133bb308930613fd2565b93849283116137c6565b613cef565b309030614105565b50306000525260406000205411613827565b8080808061336a565b9096508581813d8311613415575b6134058183613779565b8101031261027b57519588613240565b503d6133fb565b90508181813d8311613442575b6134338183613779565b8101031261027b5751846131f3565b503d613429565b3461027b57604036600319011261027b5761346261364c565b6024359033156130e9576001600160a01b03169081156130d057336000526002602052604060002082600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b3461027b57600036600319011261027b5760405160006004549060018260011c916001841691821561358a575b602094858510841461108757858794868652918260001461106757505060011461352d5750610ff292500383613779565b84915060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b906000915b858310613572575050610ff2935082010185610fe5565b8054838901850152879450869390920191810161355b565b92607f16926134fc565b3461027b57602036600319011261027b577fbea1b31142ae4b1f4efad240349036d718b7950d246c127768097ccf602fc7e060206004356135d3613ca0565b80600d55604051908152a1005b3461027b57600036600319011261027b576020611156600354613170811515613c54565b60005b8381106136175750506000910152565b8181015183820152602001613607565b9060209161364081518092818552858086019101613604565b601f01601f1916010190565b600435906001600160a01b038216820361027b57565b602435906001600160a01b038216820361027b57565b35906001600160a01b038216820361027b57565b9181601f8401121561027b5782359167ffffffffffffffff831161027b576020808501948460051b01011161027b57565b604060031982011261027b5767ffffffffffffffff9160043583811161027b57826136ea9160040161368c565b9390939260243591821161027b576137049160040161368c565b9091565b610100810190811067ffffffffffffffff82111761073b57604052565b60a0810190811067ffffffffffffffff82111761073b57604052565b6040810190811067ffffffffffffffff82111761073b57604052565b6080810190811067ffffffffffffffff82111761073b57604052565b90601f8019910116810190811067ffffffffffffffff82111761073b57604052565b90670de0b6b3a76400009180830292830403612b7257565b81810292918115918404141715612b7257565b156137cd57565b60405162461bcd60e51b815260206004820152602c60248201527f417262697472616765206661696c65643a20696e73756666696369656e74206f60448201526b1d5d1c1d5d08185b5bdd5b9d60a21b6064820152608490fd5b1561382e57565b60405162461bcd60e51b815260206004820152601860248201527f41726269747261676520646964206e6f742070726f66697400000000000000006044820152606490fd5b811561387d570490565b634e487b7160e01b600052601260045260246000fd5b91908110156138a35760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b038116810361027b5790565b91908201809211612b7257565b67ffffffffffffffff811161073b5760051b60200190565b906138fc826138da565b6139096040519182613779565b828152809261391a601f19916138da565b0190602036910137565b9081602091031261027b575160ff8116810361027b5790565b91908203918211612b7257565b604d8111612b7257600a0a90565b80518210156138a35760209160051b010190565b6000198114612b725760010190565b9081602091031261027b5751801515810361027b5790565b9081602091031261027b57516001600160a01b038116810361027b5790565b156139b957565b60405162461bcd60e51b815260206004820152601760248201527f53776170204661696c65642c20547279204275726e28290000000000000000006044820152606490fd5b9190613a08613ccc565b613a1183614704565b6001600160a01b0380931690600093828552602090600c8252604086205493613a3b851515613b01565b8652600c825260408087208790555163a9059cbb60e01b81526001600160a01b03841660048201526024810185905282816044818a7f000000000000000000000000000000000000000000000000000000000000000087165af18015613af6577f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f72419495969750613ad9575b50604051938585521692a2906001600655565b613aef90833d851161064f576106408183613779565b5038613ac6565b6040513d89823e3d90fd5b15613b0857565b60405162461bcd60e51b815260206004820152601360248201527f4e6f207265776172647320746f20636c61696d000000000000000000000000006044820152606490fd5b15613b5457565b60405162461bcd60e51b815260206004820152601060248201526f125b9cdd59999a58da595b9d0810905360821b6044820152606490fd5b15613b9357565b60405162461bcd60e51b815260206004820152602260248201527f546f74616c2042414c554e4920737570706c792063616e6e6f74206265207a65604482015261726f60f01b6064820152608490fd5b9060ff8091169116039060ff8211612b7257565b60ff16604d8111612b7257600a0a90565b15613c0f57565b60405162461bcd60e51b815260206004820152601960248201527f436865636b2074686520746f6b656e20616c6c6f77616e6365000000000000006044820152606490fd5b15613c5b57565b60405162461bcd60e51b815260206004820152601b60248201527f546f74616c20737570706c792063616e6e6f74206265207a65726f00000000006044820152606490fd5b6001600160a01b03600054163303613cb457565b60405163118cdaa760e01b8152336004820152602490fd5b600260065414613cdd576002600655565b604051633ee5aeb560e01b8152600490fd5b60408051636eb1769f60e11b81523060048201526001600160a01b03831660248201526020936000805160206153248339815191528583604481845afa928315613e6857600093613e39575b50818303613d4c575b505050505050565b8592613dc4575b835163095ea7b360e01b81526001600160a01b0390951660048601526024850191909152839081600081604481015b03925af1908115613dba5750613d9c575b80808080613d44565b81613db292903d1061064f576106408183613779565b503880613d93565b513d6000823e3d90fd5b91509192835163095ea7b360e01b81526001600160a01b03821660048201526000602482015285816044816000875af18015613e2e5791869391613d82969593613e11575b509450613d53565b613e2790853d871161064f576106408183613779565b5038613e09565b85513d6000823e3d90fd5b9092508581813d8311613e61575b613e518183613779565b8101031261027b57519138613d3b565b503d613e47565b84513d6000823e3d90fd5b60408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015260209590949293919290918516908684604481855afa938415613e2e57600094613fa3575b50828403613ece575b50505050505050565b8693613f40575b845163095ea7b360e01b81526001600160a01b0390911660048201526024810192909252909350839081600081604481015b03925af1908115613dba5750613f22575b8080808080613ec5565b81613f3892903d1061064f576106408183613779565b503880613f18565b91938095919350519063095ea7b360e01b8252821660048201526000602482015285816044816000875af18015613e2e5791869391613f07969593613f86575b50613ed5565b613f9c90853d871161064f576106408183613779565b5038613f80565b9093508681813d8311613fcb575b613fbb8183613779565b8101031261027b57519238613ebc565b503d613fb1565b90604051613fdf81613708565b6001600160a01b03809316815282806020830160008051602061532483398151915281526040840194610bb88652826060860198168852608085019042825260a0860190815260c08601918460009a8b998a86528260e08b01978c89526040519d8e9c8d63414bf38960e01b9052511660048d0152511660248b01525162ffffff1660448a0152511660648801525160848701525160a48601525160c4850152511660e48301527f000000000000000000000000000000000000000000000000000000000000000016815a9361010492602095f19182156140f95780926140c557505090565b9091506020823d6020116140f1575b816140e160209383613779565b810103126140ee57505190565b80fd5b3d91506140d4565b604051903d90823e3d90fd5b9060405161411281613708565b600080516020615324833981519152815260208101926001600160a01b0380948180931681526040840194610bb88652826060860198168852608085019042825260a0860190815260c08601918460009a8b998a86528260e08b01978c89526040519d8e9c8d63414bf38960e01b9052511660048d0152511660248b01525162ffffff1660448a0152511660648801525160848701525160a48601525160c4850152511660e48301527f000000000000000000000000000000000000000000000000000000000000000016815a9361010492602095f19182156140f95780926140c557505090565b916001600160a01b038084169283156142c157169283156142a8576000908382526001602052604082205490838210614276575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95876020965260018652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b6000806010545b8082106142ed57505090565b90916001600160a01b0361430084614953565b90549060031b1c16604080516370a0823160e01b815230600482015260208082602481875afa928315613dba5750600092614350575b50509161115061434892600194614383565b9201906142e1565b81819392933d831161437c575b6143678183613779565b810103126140ee575051611150614348614336565b503d61435d565b60405163313ce56760e01b8082529192600092906020906001600160a01b03908116908285600481855afa948515614545578695614526575b506040519384526000805160206153248339815191528385600481845afa948515613af6578795614507575b5082146144d35760405163802431fb60e01b81526001600160a01b039290921660048301526000805160206153248339815191526024830152600060448301528290829060649082907f0000000000000000000000000000000000000000000000000000000000000000165afa918590836144a0575b50505061446e5750505050600090565b670de0b6b3a76400009361449661448f611928611c1f9461449c9796613be3565b80926137b3565b926137b3565b0490565b909180939650813d83116144cc575b6144b98183613779565b810103126140ee5750519238808061445e565b503d6144af565b505050505064e8d4a51000918281029281840414901517156144f3575090565b634e487b7160e01b81526011600452602490fd5b61451f919550843d8611610c0d57610bff8183613779565b93386143e8565b61453e919550833d8511610c0d57610bff8183613779565b93386143bc565b6040513d88823e3d90fd5b919061455b816138f2565b9060005b81811061456d575090925050565b8061457a60019287613958565b516145858286613958565b520161455f565b90916040519160209384916bffffffffffffffffffffffff199060601b168285015261017760eb1b80603486015272d500b1d8e8ef31e21c99d1db9a6444d3adf12760641b6037860152604b8501527309e46f287cb791987b6228c32669ea5126aa105d60621b604e850152604284526146058461375d565b6040519361461285613725565b8452818401926146726001600160a01b0392838093168652604087019642885260608101918252608081019660009788938482526040519a8b988997889663c04b8d5960e01b88528c60048901525160a0602489015260c4880190613627565b94511660448601525160648501525160848401525160a483015203927f0000000000000000000000000000000000000000000000000000000000000000165af19283156146f75781936146c6575b50505090565b9091809350813d83116146f0575b6146de8183613779565b810103126140ee5750513880806146c0565b503d6146d4565b50604051903d90823e3d90fd5b61472f6001600160a01b03614718836148dd565b92169182600052600c6020526040600020546138cd565b90600052600c602052604060002055600a54600b602052604060002055565b6001600160a01b03169081156142a8577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020826147906000946003546138cd565b6003558484526001825260408420818154019055604051908152a3565b9192906147bb831515613c54565b60128210156147ee576147cf9192936137b3565b9060120360128111612b72576147eb9261192d61192d9261394a565b90565b61125a91506147eb936137b3565b91906001600160a01b0383169081156142c1578160005260016020526040600020549381851061486e57506020817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260009596858752600184520360408620558060035403600355604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481018590526044810191909152606490fd5b60095490816148ad575050565b600a5490670de0b6b3a764000090818102918183041490151715612b72576148d89261115091613873565b600a55565b6001600160a01b0316670de0b6b3a76400006149486000838152600860205261494361490d60408320544261393d565b6301e1338095908681111561494d575085905b835260076020526144966040842054936040600a5491600b60205220549061393d565b6137b3565b040490565b90614920565b6010548110156138a35760106000527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720190600090565b600081815260116020526040812054614a225760105468010000000000000000811015614a0e5760018101806010558110156149fa5790826040927f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672015560105492815260116020522055600190565b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b82526041600452602482fd5b905090565b909190614a505750805115614a3e57805190602001fd5b604051630a12f52160e11b8152600490fd5b9080511580614a87575b614a615790565b604051639996b31560e01b81526000805160206153248339815191526004820152602490fd5b506000805160206153248339815191523b15614a5a565b90614ab35750805115614a3e57805190602001fd5b81511580614ae6575b614ac4575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15614abc56fe60803460bc57601f61083438819003918201601f19168301916001600160401b0383118484101760c157808492604094855283398101031260bc57604b602060458360d7565b920160d7565b6001600160a01b0390811691903383900360895760018060a01b03199116816000541617600055600154161760015560405161074990816100eb8239f35b60405162461bcd60e51b815260206004820152600b60248201526a27b7363c902937baba32b960a91b6044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820360bc5756fe608060408181526004908136101561001657600080fd5b600092833560e01c9081638da5cb5b1461045357508063b0f479a11461042b5763eedc3c501461004557600080fd5b3461042757806003193601126104275767ffffffffffffffff9082358281116103dc576100759036908501610476565b91909360248035858111610423576100909036908401610476565b90956001600160a01b0395600198878a541633036103e0578a5b82811061031c5750505050848754169084518092630c2fe7ff60e11b8252818660209586935afa908115610312578a916102e1575b50888a5b888a858084106101fb579450505050506100fb578880f35b88805b82811061010b5750508880f35b89918861012161011c84878e610570565b6104e4565b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81036101605750504761014d575b0189906100fe565b61015b888c5416479061066f565b610145565b88516370a0823160e01b8152308982015292935090919085828881845afa9182156101f157908392918d9594926101bb575b508a600a83116101a6575b50505050610145565b6101b2935416906105a9565b8a38808a61019d565b945090508584813d81116101ea575b6101d481836104f8565b810103126101e6578b93519038610192565b5080fd5b503d6101ca565b89513d85823e3d90fd5b8361011c9161020993610570565b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee810361024857506102406127106102368547610580565b048a84541661066f565b0189906100e3565b88516370a0823160e01b815230898201529192509085818881855afa908d82156102d6578d94939286929061029b575b5061028a610296939261271092610580565b04908b855416906105a9565b610240565b92945050508581813d83116102cf575b6102b581836104f8565b810103126102cb57518b9290849061028a610278565b8c80fd5b503d6102ab565b8a51903d90823e3d90fd5b90508281813d831161030b575b6102f881836104f8565b810103126103075751386100df565b8980fd5b503d6102ee565b86513d8c823e3d90fd5b61032a61011c8285856104ac565b8c6020918261033a8588886104ac565b0135906103488588886104ac565b8c81013590601e19813603018212156103dc57018035908982116103dc5785019281360384136103dc578493828f519384928337810185815203925af161038d610530565b501561039b57508a016100aa565b876011886064938c519362461bcd60e51b85528401528201527f42617463682063616c6c206661696c65640000000000000000000000000000006044820152fd5b8480fd5b865162461bcd60e51b8152602081880152601b60248201527f43616c6c61626c65206f6e6c792062792074686520726f7574657200000000006044820152606490fd5b8780fd5b8280fd5b8382346101e657816003193601126101e6576020906001600160a01b03600154169051908152f35b8490346101e657816003193601126101e6576001600160a01b0360209254168152f35b9181601f840112156104a75782359167ffffffffffffffff83116104a7576020808501948460051b0101116104a757565b600080fd5b91908110156104ce5760051b81013590605e19813603018212156104a7570190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036104a75790565b90601f8019910116810190811067ffffffffffffffff82111761051a57604052565b634e487b7160e01b600052604160045260246000fd5b3d1561056b573d9067ffffffffffffffff821161051a576040519161055f601f8201601f1916602001846104f8565b82523d6000602084013e565b606090565b91908110156104ce5760051b0190565b8181029291811591840414171561059357565b634e487b7160e01b600052601160045260246000fd5b91909160405192602084019263a9059cbb60e01b84526001600160a01b038092166024860152604485015260448452608084019184831067ffffffffffffffff84111761051a57610614926040521692600080938192519082875af161060d610530565b90846106c2565b908151918215159283610644575b50505061062c5750565b60249060405190635274afe760e01b82526004820152fd5b8192935090602091810103126101e657602001519081159182150361066c5750388080610622565b80fd5b8147106106aa5760008080936001600160a01b038294165af1610690610530565b501561069857565b604051630a12f52160e11b8152600490fd5b60405163cd78605960e01b8152306004820152602490fd5b906106d7575080511561069857805190602001fd5b8151158061070a575b6106e8575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156106e056fea26469706673582212205930771bdac7a28577e83853179585c14d2d1de60202bee4d616bc2925c9934164736f6c634300081900330000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174a2646970667358221220de3461838761f5993074ee61b8d8216b7b91b643b2cf00cadf63f8ac3497f19664736f6c63430008190033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 357,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 363,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 365,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 367,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 369,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1573,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7449,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "balanceStakedOf",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7453,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "stakeTimestamp",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7455,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "stakingSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 7460,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "rewardIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 7464,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "rewardIndexOf",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7468,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "earned",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4601,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "_BPS_FEE",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4604,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "_BPS_BASE",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4607,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "_BPS_LIQUIDATE_FEE",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4614,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "tokens",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(AddressSet)1957_storage"
      },
      {
        "astId": 4649,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "userAgents",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_contract(BaluniAgent)4560)"
      },
      {
        "astId": 4653,
        "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
        "label": "tokenBalanceMap",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(BaluniAgent)4560": {
        "encoding": "inplace",
        "label": "contract BaluniAgent",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(BaluniAgent)4560)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract BaluniAgent)",
        "numberOfBytes": "32",
        "value": "t_contract(BaluniAgent)4560"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)1957_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1956,
            "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1642_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1642_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1637,
            "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1641,
            "contract": "contracts/core/BaluniRouter.sol:BaluniRouter",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}