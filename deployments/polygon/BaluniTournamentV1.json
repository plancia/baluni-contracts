{
  "address": "0xf823c515eAdC0C8fC2699f88F3e87389e97953b0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxParticipants",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "predictor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "predictedPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PredictionSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "winners",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prizeAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "TournamentResolved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPricePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRoundPartecipants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastWinners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestRoundPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxPartecipants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextVerificationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPartecipants",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPredictions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "predictor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "predictedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct BaluniTournamentV1.Prediction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRoundOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeperPercentageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRoundPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxParticipants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract Oracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "predictions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "predictor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "predictedPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolutionEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolveTournament",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundWinners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "submissionEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_predictedPrice",
          "type": "uint256"
        }
      ],
      "name": "submitPrediction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verificationEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verificationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9437fa5371f61982722c5a5187387bf695253af39163bdb7c747ad48674ee885",
  "receipt": {
    "to": null,
    "from": "0x84F07be28ecd5b29Df340be8b065A6113a8e893e",
    "contractAddress": "0xf823c515eAdC0C8fC2699f88F3e87389e97953b0",
    "transactionIndex": 142,
    "gasUsed": "1564846",
    "logsBloom": "0x
    "blockHash": "0x2662ecd55208cfe8b4529775b73f35bdfe3afeb4f83b752fa0fd06efb22bc4b9",
    "transactionHash": "0x9437fa5371f61982722c5a5187387bf695253af39163bdb7c747ad48674ee885",
    "logs": [
      {
        "transactionIndex": 142,
        "blockNumber": 53713364,
        "transactionHash": "0x9437fa5371f61982722c5a5187387bf695253af39163bdb7c747ad48674ee885",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000084f07be28ecd5b29df340be8b065a6113a8e893e",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000006138ee1257f49a000000000000000000000000000000000000000000000000346c51fe559d5d6000000000000000000000000000000000000000000002c5610e0ba517d85a1a3b000000000000000000000000000000000000000000000000340b1910434568c600000000000000000000000000000000000000000002c5610e6cde05eab20ed5",
        "logIndex": 399,
        "blockHash": "0x2662ecd55208cfe8b4529775b73f35bdfe3afeb4f83b752fa0fd06efb22bc4b9"
      }
    ],
    "blockNumber": 53713364,
    "cumulativeGasUsed": "14019975",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaC81354605019e00FfCfb36df3031419E62540B3",
    50
  ],
  "numDeployments": 5,
  "solcInputHash": "3d2f6baedbf78b7b1c24291f14160280",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxParticipants\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"predictor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"predictedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PredictionSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prizeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"TournamentResolved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPricePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundPartecipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestRoundPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPartecipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextVerificationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPartecipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPredictions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"predictor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"predictedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct BaluniTournamentV1.Prediction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRoundOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRoundPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract Oracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"predictions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"predictor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"predictedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolutionEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolveTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundWinners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submissionEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictedPrice\",\"type\":\"uint256\"}],\"name\":\"submitPrediction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verificationEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verificationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaluniTournament_v1.sol\":\"BaluniTournamentV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/BaluniTournament_v1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./Oracle.sol\\\";\\r\\n\\r\\ncontract BaluniTournamentV1 is ReentrancyGuard {\\r\\n\\tOracle public oracle;\\r\\n\\r\\n\\tuint256 public keeperPercentageFee = 100;\\r\\n\\tuint256 public submissionEndTime = 8 hours;\\r\\n\\tuint256 public verificationEndTime = 1 days;\\r\\n\\tuint256 public resolutionEndTime = 1 hours;\\r\\n\\r\\n\\tstruct Prediction {\\r\\n\\t\\tuint256 round;\\r\\n\\t\\taddress predictor;\\r\\n\\t\\tuint256 predictedPrice;\\r\\n\\t\\tuint256 amount;\\r\\n\\t}\\r\\n\\r\\n\\tuint256 public maxParticipants;\\r\\n\\r\\n\\tuint256 public lastRoundPrice;\\r\\n\\r\\n\\tPrediction[] public predictions;\\r\\n\\r\\n\\tuint256 public verificationTime;\\r\\n\\taddress public priceFeedAddress;\\r\\n\\tuint256 public prizePool;\\r\\n\\tuint256 public currentRound = 0;\\r\\n\\r\\n\\tmapping(uint256 => uint256) scores;\\r\\n\\tmapping(uint256 => uint256) prizePerScore;\\r\\n\\r\\n\\taddress[] public roundWinners;\\r\\n\\r\\n\\tstruct WinnerInfo {\\r\\n\\t\\tuint256 index;\\r\\n\\t\\tuint256 difference;\\r\\n\\t\\tbool exists;\\r\\n\\t}\\r\\n\\r\\n\\tevent PredictionSubmitted(\\r\\n\\t\\tuint256 round,\\r\\n\\t\\taddress indexed predictor,\\r\\n\\t\\tuint256 predictedPrice,\\r\\n\\t\\tuint256 amount\\r\\n\\t);\\r\\n\\r\\n\\tevent TournamentResolved(\\r\\n\\t\\tuint256 round,\\r\\n\\t\\taddress[] winners,\\r\\n\\t\\tuint256[] prizeAmounts\\r\\n\\t);\\r\\n\\r\\n\\tconstructor(\\r\\n\\t\\taddress _oracleAddress,\\r\\n\\t\\tuint256 _maxParticipants\\r\\n\\t) ReentrancyGuard() {\\r\\n\\t\\toracle = Oracle(_oracleAddress);\\r\\n\\t\\tmaxParticipants = _maxParticipants;\\r\\n\\t\\tverificationTime = block.timestamp + verificationEndTime;\\r\\n\\t}\\r\\n\\r\\n\\tfunction isRoundOpen() public view returns (bool) {\\r\\n\\t\\treturn block.timestamp <= verificationTime - 4 hours;\\r\\n\\t}\\r\\n\\r\\n\\tfunction submitPrediction(uint256 _predictedPrice) external payable {\\r\\n\\t\\trequire(msg.value >= 0.01 ether, \\\"Entry fee is 0.01 ether\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tpredictions.length < maxParticipants,\\r\\n\\t\\t\\t\\\"Participant limit reached\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tblock.timestamp <= verificationTime - submissionEndTime,\\r\\n\\t\\t\\t\\\"Submissions closed 4 hours before round ends\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tpredictions.push(\\r\\n\\t\\t\\tPrediction(currentRound, msg.sender, _predictedPrice, msg.value)\\r\\n\\t\\t);\\r\\n\\t\\tprizePool += msg.value;\\r\\n\\t\\temit PredictionSubmitted(\\r\\n\\t\\t\\tcurrentRound,\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t_predictedPrice,\\r\\n\\t\\t\\tmsg.value\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _resetTournament() private {\\r\\n\\t\\tdelete predictions;\\r\\n\\t\\tprizePool = 0;\\r\\n\\t\\tverificationTime = block.timestamp + verificationEndTime;\\r\\n\\t\\tcurrentRound += 1;\\r\\n\\t}\\r\\n\\r\\n\\tfunction resolveTournament() external nonReentrant {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tblock.timestamp >= verificationTime,\\r\\n\\t\\t\\t\\\"Tournament cannot be resolved yet\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tif (block.timestamp >= verificationTime + resolutionEndTime) {\\r\\n\\t\\t\\tfor (uint256 i = 0; i < predictions.length; i++) {\\r\\n\\t\\t\\t\\tAddress.sendValue(\\r\\n\\t\\t\\t\\t\\tpayable(predictions[i].predictor),\\r\\n\\t\\t\\t\\t\\tpredictions[i].amount\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\temit TournamentResolved(\\r\\n\\t\\t\\t\\tcurrentRound,\\r\\n\\t\\t\\t\\tnew address[](0),\\r\\n\\t\\t\\t\\tnew uint256[](0)\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\t_resetTournament();\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 actualPrice = oracle.getLatestPrice();\\r\\n\\t\\tuint256 actualPriceUint = actualPrice * 1e10;\\r\\n\\t\\tlastRoundPrice = actualPriceUint;\\r\\n\\r\\n\\t\\tif (predictions.length == 0) {\\r\\n\\t\\t\\temit TournamentResolved(\\r\\n\\t\\t\\t\\tcurrentRound,\\r\\n\\t\\t\\t\\tnew address[](0),\\r\\n\\t\\t\\t\\tnew uint256[](0)\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\troundWinners = new address[](0);\\r\\n\\t\\t\\t_resetTournament();\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (predictions.length == 1) {\\r\\n\\t\\t\\t// Restituisce il premio all'unico partecipante\\r\\n\\t\\t\\taddress[] memory winnerAddress = new address[](1);\\r\\n\\t\\t\\tuint256[] memory winnerPrize = new uint256[](1);\\r\\n\\t\\t\\twinnerAddress[0] = predictions[0].predictor;\\r\\n\\t\\t\\twinnerPrize[0] = prizePool;\\r\\n\\t\\t\\tAddress.sendValue(payable(winnerAddress[0]), winnerPrize[0]);\\r\\n\\t\\t\\temit TournamentResolved(currentRound, winnerAddress, winnerPrize);\\r\\n\\t\\t\\troundWinners = winnerAddress;\\r\\n\\t\\t\\t_resetTournament();\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (predictions.length == 2) {\\r\\n\\t\\t\\t// Distribuisci il premio tra i due partecipanti\\r\\n\\t\\t\\taddress[] memory winnersAddresses = new address[](2);\\r\\n\\t\\t\\tuint256[] memory prizes = new uint256[](2);\\r\\n\\t\\t\\tuint256 halfPrize = prizePool / 2;\\r\\n\\t\\t\\tfor (uint256 i = 0; i < 2; i++) {\\r\\n\\t\\t\\t\\twinnersAddresses[i] = predictions[i].predictor;\\r\\n\\t\\t\\t\\tprizes[i] = halfPrize;\\r\\n\\t\\t\\t\\tAddress.sendValue(payable(winnersAddresses[i]), prizes[i]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\temit TournamentResolved(currentRound, winnersAddresses, prizes);\\r\\n\\t\\t\\troundWinners = winnersAddresses;\\r\\n\\t\\t\\t_resetTournament();\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tWinnerInfo[3] memory winners;\\r\\n\\t\\tuint256 winnersCount = 0;\\r\\n\\r\\n\\t\\t// Identifica i potenziali vincitori e calcola la differenza di prezzo\\r\\n\\t\\tfor (uint256 i = 0; i < predictions.length; i++) {\\r\\n\\t\\t\\tuint256 difference = predictions[i].predictedPrice > actualPriceUint\\r\\n\\t\\t\\t\\t? predictions[i].predictedPrice - actualPriceUint\\r\\n\\t\\t\\t\\t: actualPriceUint - predictions[i].predictedPrice;\\r\\n\\r\\n\\t\\t\\tif (winnersCount < 3) {\\r\\n\\t\\t\\t\\twinners[winnersCount] = WinnerInfo(i, difference, true);\\r\\n\\t\\t\\t\\twinnersCount++;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t// Trova e sostituisci il vincitore con la differenza maggiore se ce n'\\u00e8 uno con una differenza minore\\r\\n\\t\\t\\t\\tuint256 maxDiffIndex = 0;\\r\\n\\t\\t\\t\\tuint256 maxDiff = winners[0].difference;\\r\\n\\t\\t\\t\\tfor (uint256 j = 1; j < 3; j++) {\\r\\n\\t\\t\\t\\t\\tif (winners[j].difference > maxDiff) {\\r\\n\\t\\t\\t\\t\\t\\tmaxDiff = winners[j].difference;\\r\\n\\t\\t\\t\\t\\t\\tmaxDiffIndex = j;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif (difference < maxDiff) {\\r\\n\\t\\t\\t\\t\\twinners[maxDiffIndex] = WinnerInfo(i, difference, true);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 keeperFee = (prizePool * keeperPercentageFee) / 10000;\\r\\n\\t\\tprizePool -= keeperFee;\\r\\n\\t\\tAddress.sendValue(payable(msg.sender), keeperFee);\\r\\n\\r\\n\\t\\tuint256 totalPrize = prizePool;\\r\\n\\r\\n\\t\\t// Preparazione degli array per i vincitori e i premi\\r\\n\\t\\taddress[] memory finalWinnersAddresses = new address[](winnersCount);\\r\\n\\t\\tuint256[] memory finalPrizeAmounts = new uint256[](winnersCount);\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < winnersCount; i++) {\\r\\n\\t\\t\\tfinalWinnersAddresses[i] = predictions[winners[i].index].predictor;\\r\\n\\t\\t\\t// Distribuzione equa del premio\\r\\n\\t\\t\\tfinalPrizeAmounts[i] = totalPrize / winnersCount;\\r\\n\\t\\t\\tAddress.sendValue(\\r\\n\\t\\t\\t\\tpayable(finalWinnersAddresses[i]),\\r\\n\\t\\t\\t\\tfinalPrizeAmounts[i]\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\troundWinners = finalWinnersAddresses;\\r\\n\\r\\n\\t\\temit TournamentResolved(\\r\\n\\t\\t\\tcurrentRound,\\r\\n\\t\\t\\tfinalWinnersAddresses,\\r\\n\\t\\t\\tfinalPrizeAmounts\\r\\n\\t\\t);\\r\\n\\t\\t_resetTournament();\\r\\n\\t}\\r\\n\\r\\n\\tfunction getLastWinners() external view returns (address[] memory) {\\r\\n\\t\\treturn roundWinners;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPrice() public view returns (uint256) {\\r\\n\\t\\treturn oracle.getLatestPrice() * 1e10;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getLatestRoundPrice() external view returns (uint256) {\\r\\n\\t\\treturn lastRoundPrice;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getCurrentRound() external view returns (uint256) {\\r\\n\\t\\treturn currentRound;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMaxPartecipants() external view returns (uint256) {\\r\\n\\t\\treturn maxParticipants;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getCurrentRoundPartecipants() external view returns (uint256) {\\r\\n\\t\\treturn predictions.length;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getCurrentPricePool() external view returns (uint256) {\\r\\n\\t\\treturn prizePool;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getNextVerificationTime() external view returns (uint256) {\\r\\n\\t\\treturn verificationTime;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPredictions() external view returns (Prediction[] memory) {\\r\\n\\t\\treturn predictions;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPartecipants() external view returns (address[] memory) {\\r\\n\\t\\taddress[] memory partecipants = new address[](predictions.length);\\r\\n\\t\\tfor (uint256 i = 0; i < predictions.length; i++) {\\r\\n\\t\\t\\tpartecipants[i] = predictions[i].predictor;\\r\\n\\t\\t}\\r\\n\\t\\treturn partecipants;\\r\\n\\t}\\r\\n\\r\\n\\treceive() external payable {\\r\\n\\t\\tprizePool += msg.value;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xe736b7ff8183d2620b2082ef168589340774c274cd76320468735a3fe2264345\",\"license\":\"MIT\"},\"contracts/Oracle.sol\":{\"content\":\"import \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract Oracle {\\r\\n\\tAggregatorV3Interface internal priceFeed;\\r\\n\\r\\n\\tconstructor(address _priceFeedAddress) {\\r\\n\\t\\tpriceFeed = AggregatorV3Interface(_priceFeedAddress);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getLatestPrice() public view returns (uint256) {\\r\\n\\t\\t(, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n\\t\\t// Assumiamo che il prezzo sia sempre positivo\\r\\n\\t\\treturn uint256(price); // Adatta questa moltiplicazione in base alla tua necessit\\u00e0\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x3d71c8afb17be59e107fc8f69d49dc6bffef1ad3570441adebc01f187337135b\"}},\"version\":1}",
  "bytecode": "0x6080604052606460025561708060035562015180600455610e106005556000600c5534801561002d57600080fd5b50604051620019033803806200190383398101604081905261004e9161008b565b6001600081905580546001600160a01b0319166001600160a01b038416179055600681905560045461008090426100c5565b600955506100ec9050565b6000806040838503121561009e57600080fd5b82516001600160a01b03811681146100b557600080fd5b6020939093015192949293505050565b808201808211156100e657634e487b7160e01b600052601160045260246000fd5b92915050565b61180780620000fc6000396000f3fe6080604052600436106101835760003560e01c80638a19c8bc116100d1578063bb9b110b1161008a578063e2f1dcc611610064578063e2f1dcc614610426578063ef949f4a1461043b578063f985ad9314610450578063f9ceb3ea1461046657600080fd5b8063bb9b110b146103bf578063c78c3a83146103e4578063e0abca0b1461040657600080fd5b80638a19c8bc146103315780638dd78d671461034757806393bc976e1461035d578063956909361461037357806398d5fdca14610395578063a32bf597146103aa57600080fd5b8063532eaca01161013e578063719ce73e11610118578063719ce73e146102ae57806376a4956c146102c45780637dc0d1d0146102fc57806385d62b451461031c57600080fd5b8063532eaca01461026e57806358f6b9c5146102845780635d21b2551461029957600080fd5b80624fbbb0146101a7578062614418146101f4578063149c6dac1461021857806324924bf71461022e578063308d19ab14610244578063344c8e371461025957600080fd5b366101a25734600b600082825461019a91906115af565b925050819055005b600080fd5b3480156101b357600080fd5b506101c76101c23660046115c8565b61047b565b604080519485526001600160a01b0390931660208501529183015260608201526080015b60405180910390f35b34801561020057600080fd5b5061020a60095481565b6040519081526020016101eb565b34801561022457600080fd5b5061020a60025481565b34801561023a57600080fd5b5061020a60065481565b34801561025057600080fd5b5060065461020a565b34801561026557600080fd5b5060095461020a565b34801561027a57600080fd5b5061020a60035481565b34801561029057600080fd5b5060075461020a565b3480156102a557600080fd5b50600b5461020a565b3480156102ba57600080fd5b5061020a600b5481565b3480156102d057600080fd5b506102e46102df3660046115c8565b6104be565b6040516001600160a01b0390911681526020016101eb565b34801561030857600080fd5b506001546102e4906001600160a01b031681565b61032f61032a3660046115c8565b6104e8565b005b34801561033d57600080fd5b5061020a600c5481565b34801561035357600080fd5b5061020a60075481565b34801561036957600080fd5b5061020a60045481565b34801561037f57600080fd5b5061038861075d565b6040516101eb9190611625565b3480156103a157600080fd5b5061020a6107bf565b3480156103b657600080fd5b50600c5461020a565b3480156103cb57600080fd5b506103d4610841565b60405190151581526020016101eb565b3480156103f057600080fd5b506103f961085b565b6040516101eb919061163f565b34801561041257600080fd5b50600a546102e4906001600160a01b031681565b34801561043257600080fd5b5060085461020a565b34801561044757600080fd5b5061032f6108e5565b34801561045c57600080fd5b5061020a60055481565b34801561047257600080fd5b506103886111f3565b6008818154811061048b57600080fd5b600091825260209091206004909102018054600182015460028301546003909301549193506001600160a01b0316919084565b600f81815481106104ce57600080fd5b6000918252602090912001546001600160a01b0316905081565b662386f26fc100003410156105445760405162461bcd60e51b815260206004820152601760248201527f456e7472792066656520697320302e303120657468657200000000000000000060448201526064015b60405180910390fd5b600654600854106105975760405162461bcd60e51b815260206004820152601960248201527f5061727469636970616e74206c696d6974207265616368656400000000000000604482015260640161053b565b6003546009546105a791906116ac565b42111561060b5760405162461bcd60e51b815260206004820152602c60248201527f5375626d697373696f6e7320636c6f736564203420686f757273206265666f7260448201526b6520726f756e6420656e647360a01b606482015260840161053b565b60408051608081018252600c5481523360208201908152918101838152346060830181815260088054600181018255600091825294517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee360049096029586015594517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee4850180546001600160a01b0319166001600160a01b0390921691909117905591517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee584015590517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee690920191909155600b8054919290916107109084906115af565b9091555050600c546040805191825260208201839052349082015233907f6508c7e3d28df907ed24f614c03b61c067dbc85e84a98bb8f78ffb1c8a711e559060600160405180910390a250565b6060600f8054806020026020016040519081016040528092919081815260200182805480156107b557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610797575b5050505050905090565b60015460408051638e15f47360e01b815290516000926001600160a01b031691638e15f4739160048083019260209291908290030181865afa158015610809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082d91906116bf565b61083c906402540be4006116d8565b905090565b600061384060095461085391906116ac565b421115905090565b60606008805480602002602001604051908101604052809291908181526020016000905b828210156108dc5760008481526020908190206040805160808101825260048602909201805483526001808201546001600160a01b031684860152600282015492840192909252600301546060830152908352909201910161087f565b50505050905090565b6108ed6112c7565b6009544210156109495760405162461bcd60e51b815260206004820152602160248201527f546f75726e616d656e742063616e6e6f74206265207265736f6c7665642079656044820152601d60fa1b606482015260840161053b565b60055460095461095991906115af565b4210610a305760005b6008548110156109e3576109d160088281548110610982576109826116ef565b906000526020600020906004020160010160009054906101000a90046001600160a01b0316600883815481106109ba576109ba6116ef565b906000526020600020906004020160030154611320565b806109db81611705565b915050610962565b50600c5460408051600080825260208201908152818301928390526000805160206117b283398151915293610a1b9390929190611734565b60405180910390a1610a2b61143e565b6111e7565b60015460408051638e15f47360e01b815290516000926001600160a01b031691638e15f4739160048083019260209291908290030181865afa158015610a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9e91906116bf565b90506000610ab1826402540be4006116d8565b6007819055600854909150600003610b2f57600c5460408051600080825260208201908152818301928390526000805160206117b283398151915293610afa9390929190611734565b60405180910390a16040805160008152602081019182905251610b1f91600f9161147c565b50610b2861143e565b50506111e7565b600854600103610c91576040805160018082528183019092526000916020808301908036833750506040805160018082528183019092529293506000929150602080830190803683370190505090506008600081548110610b9257610b926116ef565b6000918252602082206001600490920201015483516001600160a01b03909116918491610bc157610bc16116ef565b60200260200101906001600160a01b031690816001600160a01b031681525050600b5481600081518110610bf757610bf76116ef565b602002602001018181525050610c4182600081518110610c1957610c196116ef565b602002602001015182600081518110610c3457610c346116ef565b6020026020010151611320565b6000805160206117b2833981519152600c548383604051610c6493929190611734565b60405180910390a18151610c7f90600f90602085019061147c565b50610c8861143e565b505050506111e7565b600854600203610e1b5760408051600280825260608201835260009260208301908036833750506040805160028082526060820183529394506000939092509060208301908036833701905050905060006002600b54610cf1919061178f565b905060005b6002811015610dc95760088181548110610d1257610d126116ef565b906000526020600020906004020160010160009054906101000a90046001600160a01b0316848281518110610d4957610d496116ef565b60200260200101906001600160a01b031690816001600160a01b03168152505081838281518110610d7c57610d7c6116ef565b602002602001018181525050610db7848281518110610d9d57610d9d6116ef565b6020026020010151848381518110610c3457610c346116ef565b80610dc181611705565b915050610cf6565b506000805160206117b2833981519152600c548484604051610ded93929190611734565b60405180910390a18251610e0890600f90602086019061147c565b50610e1161143e565b50505050506111e7565b610e236114e1565b6000805b600854811015610fd45760008460088381548110610e4757610e476116ef565b90600052602060002090600402016002015411610e935760088281548110610e7157610e716116ef565b90600052602060002090600402016002015485610e8e91906116ac565b610ec3565b8460088381548110610ea757610ea76116ef565b906000526020600020906004020160020154610ec391906116ac565b90506003831015610f1557604051806060016040528083815260200182815260200160011515815250848460038110610efe57610efe6116ef565b602002015282610f0d81611705565b935050610fc1565b83516020015160009060015b6003811015610f7f5781878260038110610f3d57610f3d6116ef565b6020020151602001511115610f6d57868160038110610f5e57610f5e6116ef565b60200201516020015191508092505b80610f7781611705565b915050610f21565b5080831015610fbe57604051806060016040528085815260200184815260200160011515815250868360038110610fb857610fb86116ef565b60200201525b50505b5080610fcc81611705565b915050610e27565b506000612710600254600b54610fea91906116d8565b610ff4919061178f565b905080600b600082825461100891906116ac565b9091555061101890503382611320565b600b5460008367ffffffffffffffff8111156110365761103661171e565b60405190808252806020026020018201604052801561105f578160200160208202803683370190505b50905060008467ffffffffffffffff81111561107d5761107d61171e565b6040519080825280602002602001820160405280156110a6578160200160208202803683370190505b50905060005b858110156111965760088782600381106110c8576110c86116ef565b602002015151815481106110de576110de6116ef565b906000526020600020906004020160010160009054906101000a90046001600160a01b0316838281518110611115576111156116ef565b6001600160a01b0390921660209283029190910190910152611137868561178f565b828281518110611149576111496116ef565b60200260200101818152505061118483828151811061116a5761116a6116ef565b6020026020010151838381518110610c3457610c346116ef565b8061118e81611705565b9150506110ac565b5081516111aa90600f90602085019061147c565b506000805160206117b2833981519152600c5483836040516111ce93929190611734565b60405180910390a16111de61143e565b50505050505050505b6111f16001600055565b565b60085460609060009067ffffffffffffffff8111156112145761121461171e565b60405190808252806020026020018201604052801561123d578160200160208202803683370190505b50905060005b6008548110156112c15760088181548110611260576112606116ef565b906000526020600020906004020160010160009054906101000a90046001600160a01b0316828281518110611297576112976116ef565b6001600160a01b0390921660209283029190910190910152806112b981611705565b915050611243565b50919050565b6002600054036113195760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161053b565b6002600055565b804710156113705760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161053b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146113bd576040519150601f19603f3d011682016040523d82523d6000602084013e6113c2565b606091505b50509050806114395760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161053b565b505050565b61144a6008600061152c565b6000600b5560045461145c90426115af565b6009819055506001600c600082825461147591906115af565b9091555050565b8280548282559060005260206000209081019282156114d1579160200282015b828111156114d157825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061149c565b506114dd929150611550565b5090565b60405180606001604052806003905b611516604051806060016040528060008152602001600081526020016000151581525090565b8152602001906001900390816114f05790505090565b508054600082556004029060005260206000209081019061154d9190611565565b50565b5b808211156114dd5760008155600101611551565b5b808211156114dd5760008082556001820180546001600160a01b0319169055600282018190556003820155600401611566565b634e487b7160e01b600052601160045260246000fd5b808201808211156115c2576115c2611599565b92915050565b6000602082840312156115da57600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561161a5781516001600160a01b0316875295820195908201906001016115f5565b509495945050505050565b60208152600061163860208301846115e1565b9392505050565b602080825282518282018190526000919060409081850190868401855b8281101561169f57815180518552868101516001600160a01b0316878601528581015186860152606090810151908501526080909301929085019060010161165c565b5091979650505050505050565b818103818111156115c2576115c2611599565b6000602082840312156116d157600080fd5b5051919050565b80820281158282048414176115c2576115c2611599565b634e487b7160e01b600052603260045260246000fd5b60006001820161171757611717611599565b5060010190565b634e487b7160e01b600052604160045260246000fd5b8381526000602060608184015261174e60608401866115e1565b838103604085015284518082528286019183019060005b8181101561178157835183529284019291840191600101611765565b509098975050505050505050565b6000826117ac57634e487b7160e01b600052601260045260246000fd5b50049056fe4fd7288032271e74afa3073bdad87433c58165b48192fee01cb3ca4d114c3a0fa26469706673582212208990ec97d04b5c45dba2ea3b528a532da3b0fb63781b315c7e0334726c73177764736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 451,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "oracle",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Oracle)1324"
      },
      {
        "astId": 454,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "keeperPercentageFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 457,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "submissionEndTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 460,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "verificationEndTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 463,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "resolutionEndTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 474,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "maxParticipants",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 476,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "lastRoundPrice",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 480,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "predictions",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Prediction)472_storage)dyn_storage"
      },
      {
        "astId": 482,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "verificationTime",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 484,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "priceFeedAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 486,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "prizePool",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 489,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "currentRound",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 493,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "scores",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 497,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "prizePerScore",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 500,
        "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
        "label": "roundWinners",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Prediction)472_storage)dyn_storage": {
        "base": "t_struct(Prediction)472_storage",
        "encoding": "dynamic_array",
        "label": "struct BaluniTournamentV1.Prediction[]",
        "numberOfBytes": "32"
      },
      "t_contract(Oracle)1324": {
        "encoding": "inplace",
        "label": "contract Oracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Prediction)472_storage": {
        "encoding": "inplace",
        "label": "struct BaluniTournamentV1.Prediction",
        "members": [
          {
            "astId": 465,
            "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 467,
            "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
            "label": "predictor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 469,
            "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
            "label": "predictedPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 471,
            "contract": "contracts/BaluniTournament_v1.sol:BaluniTournamentV1",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}