{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/core/Stake.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\n\r\ncontract Stake {\r\n\tIERC20 public immutable stakingToken;\r\n\tIERC20 public immutable rewardToken;\r\n\r\n\tmapping(address => uint256) public balanceOf;\r\n\tuint256 public totalSupply;\r\n\r\n\tuint256 private constant MULTIPLIER = 1e18;\r\n\tuint256 private rewardIndex;\r\n\tmapping(address => uint256) private rewardIndexOf;\r\n\tmapping(address => uint256) private earned;\r\n\r\n\tconstructor(address _stakingToken, address _rewardToken) {\r\n\t\tstakingToken = IERC20(_stakingToken);\r\n\t\trewardToken = IERC20(_rewardToken);\r\n\t}\r\n\r\n\tfunction updateRewardIndex(uint256 reward) external {\r\n\t\trewardToken.transferFrom(msg.sender, address(this), reward);\r\n\t\trewardIndex += (reward * MULTIPLIER) / totalSupply;\r\n\t}\r\n\r\n\tfunction _calculateRewards(address account) private view returns (uint256) {\r\n\t\tuint256 shares = balanceOf[account];\r\n\t\treturn (shares * (rewardIndex - rewardIndexOf[account])) / MULTIPLIER;\r\n\t}\r\n\r\n\tfunction calculateRewardsEarned(\r\n\t\taddress account\r\n\t) external view returns (uint256) {\r\n\t\treturn earned[account] + _calculateRewards(account);\r\n\t}\r\n\r\n\tfunction _updateRewards(address account) private {\r\n\t\tearned[account] += _calculateRewards(account);\r\n\t\trewardIndexOf[account] = rewardIndex;\r\n\t}\r\n\r\n\tfunction stake(uint256 amount) external {\r\n\t\t_updateRewards(msg.sender);\r\n\r\n\t\tbalanceOf[msg.sender] += amount;\r\n\t\ttotalSupply += amount;\r\n\r\n\t\tstakingToken.transferFrom(msg.sender, address(this), amount);\r\n\t}\r\n\r\n\tfunction unstake(uint256 amount) external {\r\n\t\t_updateRewards(msg.sender);\r\n\r\n\t\tbalanceOf[msg.sender] -= amount;\r\n\t\ttotalSupply -= amount;\r\n\r\n\t\tstakingToken.transfer(msg.sender, amount);\r\n\t}\r\n\r\n\tfunction claim() external returns (uint256) {\r\n\t\t_updateRewards(msg.sender);\r\n\r\n\t\tuint256 reward = earned[msg.sender];\r\n\t\tif (reward > 0) {\r\n\t\t\tearned[msg.sender] = 0;\r\n\t\t\trewardToken.transfer(msg.sender, reward);\r\n\t\t}\r\n\r\n\t\treturn reward;\r\n\t}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "london",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}