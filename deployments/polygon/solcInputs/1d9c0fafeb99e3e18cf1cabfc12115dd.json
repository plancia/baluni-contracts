{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/BaluniPoolPolygon_v1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./Oracle.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\ncontract BaluniPoolV1 is ReentrancyGuard {\r\n\tOracle public oracle;\r\n\r\n\tenum Coin {\r\n\t\tMATIC\r\n\t}\r\n\r\n\tstruct Prediction {\r\n\t\taddress predictor;\r\n\t\tCoin token;\r\n\t\tuint256 predictedPrice;\r\n\t\tuint256 actualPrice;\r\n\t\tuint256 resolvedPrice;\r\n\t\tuint256 difference;\r\n\t\tuint256 timestamp;\r\n\t\tuint256 endTime;\r\n\t\tbool resolved;\r\n\t}\r\n\r\n\tPrediction[] public predictions;\r\n\r\n\tuint256 public registrationFee = 0.01 ether;\r\n\tuint256 public totalPredictions = 0;\r\n\r\n\tmapping(address => uint256) public distributionCounter;\r\n\tmapping(address => uint256) public lastWithdraw;\r\n\tmapping(address => uint256) public userSubmissionFees;\r\n\r\n\tevent PredictionRegistered(\r\n\t\taddress indexed predictor,\r\n\t\tCoin token,\r\n\t\tuint256 predictedPrice,\r\n\t\tuint256 actualPrice,\r\n\t\tuint256 timestamp,\r\n\t\tuint256 endTime\r\n\t);\r\n\tevent RewardWithdrawn(address indexed predictor, uint256 amount);\r\n\r\n\tconstructor(address _oracleAddress) ReentrancyGuard() {\r\n\t\toracle = Oracle(_oracleAddress);\r\n\t}\r\n\r\n\tfunction getSubmissionFee() public view returns (uint256) {\r\n\t\treturn userSubmissionFees[msg.sender];\r\n\t}\r\n\r\n\tfunction submit(Coin _token, uint256 _predictedPrice) public payable {\r\n\t\trequire(msg.value >= 0.01 ether, \"Invalid fee amount\");\r\n\t\trequire(\r\n\t\t\tmsg.value >= userSubmissionFees[msg.sender],\r\n\t\t\t\"Invalid fee amount\"\r\n\t\t);\r\n\r\n\t\tuserSubmissionFees[msg.sender] = msg.value;\r\n\t\tuserSubmissionFees[msg.sender] += 0.001 ether;\r\n\r\n\t\tuint256 price = oracle.getLatestPrice() * 1e10;\r\n\r\n\t\tpredictions.push(\r\n\t\t\tPrediction(\r\n\t\t\t\tmsg.sender,\r\n\t\t\t\t_token,\r\n\t\t\t\t_predictedPrice,\r\n\t\t\t\tprice,\r\n\t\t\t\t0,\r\n\t\t\t\t0,\r\n\t\t\t\tblock.timestamp,\r\n\t\t\t\tblock.timestamp + 1 days,\r\n\t\t\t\tfalse\r\n\t\t\t)\r\n\t\t);\r\n\t\ttotalPredictions++;\r\n\t\tdistributionCounter[msg.sender]++;\r\n\r\n\t\temit PredictionRegistered(\r\n\t\t\tmsg.sender,\r\n\t\t\t_token,\r\n\t\t\t_predictedPrice,\r\n\t\t\tprice,\r\n\t\t\tblock.timestamp,\r\n\t\t\tblock.timestamp + 1 days\r\n\t\t);\r\n\t}\r\n\r\n\tfunction exit() public {\r\n\t\trequire(\r\n\t\t\tblock.timestamp - lastWithdraw[msg.sender] >= 30 days,\r\n\t\t\t\"Wait for 30 days before next withdraw\"\r\n\t\t);\r\n\r\n\t\tuint256 reward = calculateReward(msg.sender);\r\n\r\n\t\trequire(reward > 0, \"No reward available\");\r\n\r\n\t\t// Aggiornamento dello stato prima della trasferimento per prevenire reentrancy\r\n\t\ttotalPredictions -= distributionCounter[msg.sender];\r\n\t\tdistributionCounter[msg.sender] = 0;\r\n\t\tlastWithdraw[msg.sender] = block.timestamp;\r\n\r\n\t\tuserSubmissionFees[msg.sender] = registrationFee;\r\n\r\n\t\tAddress.sendValue(payable(msg.sender), reward);\r\n\r\n\t\temit RewardWithdrawn(msg.sender, reward);\r\n\t}\r\n\r\n\tfunction calculateReward(address user) public view returns (uint256) {\r\n\t\tuint256 userShare = (distributionCounter[user] * 1e18) /\r\n\t\t\ttotalPredictions;\r\n\t\treturn (address(this).balance * userShare) / 1e18 / 2;\r\n\t}\r\n\r\n\tfunction last10Predictions() public view returns (Prediction[] memory) {\r\n\t\tuint256 length = predictions.length;\r\n\t\tuint256 start = length > 10 ? length - 10 : 0;\r\n\t\tPrediction[] memory result = new Prediction[](length - start);\r\n\t\tfor (uint256 i = start; i < length; i++) {\r\n\t\t\tresult[i - start] = predictions[i];\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction getPrediction(\r\n\t\tuint256 index\r\n\t) public view returns (Prediction memory) {\r\n\t\trequire(index < predictions.length, \"Invalid index\");\r\n\t\treturn predictions[index];\r\n\t}\r\n\r\n\tfunction getPredictionFromTo(\r\n\t\tuint256 from,\r\n\t\tuint256 to\r\n\t) public view returns (Prediction[] memory) {\r\n\t\trequire(from < to, \"Invalid range\");\r\n\t\trequire(to <= predictions.length, \"Invalid range\");\r\n\t\tPrediction[] memory result = new Prediction[](to - from);\r\n\t\tfor (uint256 i = from; i < to; i++) {\r\n\t\t\tresult[i - from] = predictions[i];\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction getPredictionCount() public view returns (uint256) {\r\n\t\treturn predictions.length;\r\n\t}\r\n\r\n\tfunction getTotalPredictions() public view returns (uint256) {\r\n\t\treturn totalPredictions;\r\n\t}\r\n\r\n\tfunction hasAnyUnresolvedPastEndTime() public view returns (bool) {\r\n\t\tfor (uint256 i = 0; i < predictions.length; i++) {\r\n\t\t\tif (\r\n\t\t\t\t!predictions[i].resolved &&\r\n\t\t\t\tblock.timestamp > predictions[i].endTime\r\n\t\t\t) {\r\n\t\t\t\treturn true; // Restituisce true alla prima occorrenza di una previsione non risolta superata da endTime\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false; // Se nessuna previsione non risolta ha superato endTime, restituisce false\r\n\t}\r\n\r\n\tfunction resolve() public {\r\n\t\tuint256 latestPrice = oracle.getLatestPrice() * 1e10;\r\n\r\n\t\tbool hasUnresolvedPredictions = false;\r\n\r\n\t\tfor (\r\n\t\t\tuint256 i = 0;\r\n\t\t\ti < predictions.length && !hasUnresolvedPredictions;\r\n\t\t\ti++\r\n\t\t) {\r\n\t\t\tif (predictions[i].resolved == false) {\r\n\t\t\t\thasUnresolvedPredictions = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!hasUnresolvedPredictions) return;\r\n\r\n\t\tfor (uint256 i = 0; i < predictions.length; i++) {\r\n\t\t\tif (\r\n\t\t\t\t!predictions[i].resolved &&\r\n\t\t\t\tblock.timestamp >= predictions[i].endTime\r\n\t\t\t) {\r\n\t\t\t\tuint256 predictedPrice = predictions[i].predictedPrice;\r\n\t\t\t\tuint256 priceDifference = predictedPrice > latestPrice\r\n\t\t\t\t\t? predictedPrice - latestPrice\r\n\t\t\t\t\t: latestPrice - predictedPrice;\r\n\r\n\t\t\t\tpredictions[i].difference = priceDifference;\r\n\t\t\t\tpredictions[i].resolved = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttotalPredictions++;\r\n\t\tdistributionCounter[msg.sender]++;\r\n\t}\r\n\r\n\tfunction hasUnresolvedPredictions() public view returns (bool) {\r\n\t\tfor (uint256 i = 0; i < predictions.length; i++) {\r\n\t\t\tif (!predictions[i].resolved) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Permetti al contratto di ricevere ETH\r\n\treceive() external payable {}\r\n}\r\n"
    },
    "contracts/BaluniTournamentPolygon_v1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./Oracle.sol\";\r\n\r\ncontract BaluniTournamentV1 is ReentrancyGuard {\r\n\tOracle public oracle;\r\n\r\n\tuint256 public keeperPercentageFee = 100;\r\n\r\n\tstruct Prediction {\r\n\t\tuint256 round;\r\n\t\taddress predictor;\r\n\t\tuint256 predictedPrice;\r\n\t\tuint256 amount;\r\n\t}\r\n\r\n\tuint256 public maxParticipants;\r\n\r\n\tuint256 public lastRoundPrice;\r\n\r\n\tPrediction[] public predictions;\r\n\r\n\tuint256 public verificationTime;\r\n\taddress public priceFeedAddress;\r\n\tuint256 public prizePool;\r\n\tuint256 public currentRound = 0;\r\n\r\n\tstruct WinnerInfo {\r\n\t\tuint256 index;\r\n\t\tuint256 difference;\r\n\t\tbool exists;\r\n\t}\r\n\r\n\tevent PredictionSubmitted(\r\n\t\tuint256 round,\r\n\t\taddress indexed predictor,\r\n\t\tuint256 predictedPrice,\r\n\t\tuint256 amount\r\n\t);\r\n\r\n\tevent TournamentResolved(\r\n\t\tuint256 round,\r\n\t\taddress[] winners,\r\n\t\tuint256[] prizeAmounts\r\n\t);\r\n\r\n\tconstructor(\r\n\t\taddress _oracleAddress,\r\n\t\tuint256 _maxParticipants\r\n\t) ReentrancyGuard() {\r\n\t\toracle = Oracle(_oracleAddress);\r\n\t\tmaxParticipants = _maxParticipants;\r\n\t\tverificationTime = block.timestamp + 1 days;\r\n\t}\r\n\r\n\tfunction isRoundOpen() public view returns (bool) {\r\n\t\treturn block.timestamp <= verificationTime - 4 hours;\r\n\t}\r\n\r\n\tfunction submitPrediction(uint256 _predictedPrice) external payable {\r\n\t\trequire(msg.value >= 0.01 ether, \"Entry fee is 0.01 ether\");\r\n\t\trequire(\r\n\t\t\tpredictions.length < maxParticipants,\r\n\t\t\t\"Participant limit reached\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tblock.timestamp <= verificationTime - 4 hours,\r\n\t\t\t\"Submissions closed 4 hours before round ends\"\r\n\t\t);\r\n\r\n\t\tpredictions.push(\r\n\t\t\tPrediction(currentRound, msg.sender, _predictedPrice, msg.value)\r\n\t\t);\r\n\t\tprizePool += msg.value;\r\n\t\temit PredictionSubmitted(\r\n\t\t\tcurrentRound,\r\n\t\t\tmsg.sender,\r\n\t\t\t_predictedPrice,\r\n\t\t\tmsg.value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _resetTournament() private {\r\n\t\tdelete predictions;\r\n\t\tprizePool = 0;\r\n\t\tverificationTime = block.timestamp + 1 days;\r\n\t\tcurrentRound += 1;\r\n\t}\r\n\r\n\tfunction resolveTournament() external nonReentrant {\r\n\t\trequire(\r\n\t\t\tblock.timestamp >= verificationTime,\r\n\t\t\t\"Tournament cannot be resolved yet\"\r\n\t\t);\r\n\r\n\t\tuint256 actualPrice = oracle.getLatestPrice();\r\n\t\tuint256 actualPriceUint = actualPrice * 1e10;\r\n\t\tlastRoundPrice = actualPriceUint;\r\n\r\n\t\tWinnerInfo[3] memory winners;\r\n\t\taddress[] memory winnersAddresses = new address[](3);\r\n\t\tuint256[] memory prizeAmounts = new uint256[](3);\r\n\r\n\t\tif (predictions.length == 0) {\r\n\t\t\temit TournamentResolved(\r\n\t\t\t\tcurrentRound,\r\n\t\t\t\twinnersAddresses,\r\n\t\t\t\tprizeAmounts\r\n\t\t\t);\r\n\t\t\t_resetTournament();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tuint256 winnersCount = 0; // Contatore per i vincitori effettivi\r\n\r\n\t\tif (predictions.length == 1) {\r\n\t\t\t// Restituisci i fondi all'unico partecipante\r\n\t\t\tAddress.sendValue(\r\n\t\t\t\tpayable(predictions[0].predictor),\r\n\t\t\t\tpredictions[0].amount\r\n\t\t\t);\r\n\t\t\twinnersAddresses[winnersCount] = predictions[0].predictor;\r\n\t\t\tprizeAmounts[winnersCount] = predictions[0].amount;\r\n\t\t\twinnersCount++;\r\n\t\t} else if (predictions.length == 2) {\r\n\t\t\t// Distribuisci i fondi equamente o basati sulla loro scommessa, qui esempio con distribuzione equa\r\n\t\t\tuint256 halfPrize = prizePool / 2;\r\n\t\t\tfor (uint256 i = 0; i < 2; i++) {\r\n\t\t\t\tAddress.sendValue(payable(predictions[i].predictor), halfPrize);\r\n\t\t\t\twinnersAddresses[winnersCount] = predictions[i].predictor;\r\n\t\t\t\tprizeAmounts[winnersCount] = halfPrize;\r\n\t\t\t\twinnersCount++;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (uint256 i = 0; i < winners.length; i++) {\r\n\t\t\t\twinners[i].difference = type(uint256).max;\r\n\t\t\t\twinners[i].exists = false;\r\n\t\t\t}\r\n\r\n\t\t\tfor (uint256 i = 0; i < predictions.length; i++) {\r\n\t\t\t\tuint256 difference = predictions[i].predictedPrice >\r\n\t\t\t\t\tactualPriceUint\r\n\t\t\t\t\t? predictions[i].predictedPrice - actualPriceUint\r\n\t\t\t\t\t: actualPriceUint - predictions[i].predictedPrice;\r\n\r\n\t\t\t\tfor (uint256 j = 0; j < winners.length; j++) {\r\n\t\t\t\t\tif (difference < winners[j].difference) {\r\n\t\t\t\t\t\tfor (uint256 k = winners.length - 1; k > j; k--) {\r\n\t\t\t\t\t\t\twinners[k] = winners[k - 1];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twinners[j] = WinnerInfo(i, difference, true);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tuint256 totalBetTopThree = 0;\r\n\t\t\tfor (uint256 i = 0; i < winners.length; i++) {\r\n\t\t\t\tif (winners[i].exists) {\r\n\t\t\t\t\ttotalBetTopThree += predictions[winners[i].index].amount;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\trequire(totalBetTopThree > 0, \"Total bet of top three is zero\");\r\n\r\n\t\t\tuint256 keeperFee = (prizePool * keeperPercentageFee) / 10000;\r\n\r\n\t\t\tprizePool = prizePool - keeperFee;\r\n\r\n\t\t\tAddress.sendValue(payable(msg.sender), keeperFee);\r\n\r\n\t\t\tfor (uint256 i = 0; i < winners.length; i++) {\r\n\t\t\t\tif (winners[i].exists) {\r\n\t\t\t\t\tuint256 winnerPrize = (predictions[winners[i].index]\r\n\t\t\t\t\t\t.amount * prizePool) / totalBetTopThree;\r\n\t\t\t\t\tAddress.sendValue(\r\n\t\t\t\t\t\tpayable(predictions[winners[i].index].predictor),\r\n\t\t\t\t\t\twinnerPrize\r\n\t\t\t\t\t);\r\n\t\t\t\t\tprizeAmounts[i] = winnerPrize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Ridimensiona gli array basati sul numero effettivo di vincitori\r\n\t\taddress[] memory finalWinnersAddresses = new address[](winnersCount);\r\n\t\tuint256[] memory finalPrizeAmounts = new uint256[](winnersCount);\r\n\r\n\t\tfor (uint256 i = 0; i < winnersCount; i++) {\r\n\t\t\tfinalWinnersAddresses[i] = winnersAddresses[i];\r\n\t\t\tfinalPrizeAmounts[i] = prizeAmounts[i];\r\n\t\t}\r\n\t\temit TournamentResolved(\r\n\t\t\tcurrentRound,\r\n\t\t\tfinalWinnersAddresses,\r\n\t\t\tfinalPrizeAmounts\r\n\t\t);\r\n\t\t_resetTournament();\r\n\t}\r\n\r\n\tfunction getPrice() public view returns (uint256) {\r\n\t\treturn oracle.getLatestPrice() * 1e10;\r\n\t}\r\n\r\n\tfunction getLatestRoundPrice() external view returns (uint256) {\r\n\t\treturn lastRoundPrice;\r\n\t}\r\n\r\n\tfunction getCurrentRound() external view returns (uint256) {\r\n\t\treturn currentRound;\r\n\t}\r\n\r\n\tfunction getMaxPartecipants() external view returns (uint256) {\r\n\t\treturn maxParticipants;\r\n\t}\r\n\r\n\tfunction getCurrentRoundPartecipants() external view returns (uint256) {\r\n\t\treturn predictions.length;\r\n\t}\r\n\r\n\tfunction getCurrentPricePool() external view returns (uint256) {\r\n\t\treturn prizePool;\r\n\t}\r\n\r\n\tfunction getNextVerificationTime() external view returns (uint256) {\r\n\t\treturn verificationTime;\r\n\t}\r\n\r\n\treceive() external payable {\r\n\t\tprizePool += msg.value;\r\n\t}\r\n}\r\n"
    },
    "contracts/Oracle.sol": {
      "content": "import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract Oracle {\r\n\tAggregatorV3Interface internal priceFeed;\r\n\r\n\tconstructor(address _priceFeedAddress) {\r\n\t\tpriceFeed = AggregatorV3Interface(_priceFeedAddress);\r\n\t}\r\n\r\n\tfunction getLatestPrice() public view returns (uint256) {\r\n\t\t(, int256 price, , , ) = priceFeed.latestRoundData();\r\n\t\t// Assumiamo che il prezzo sia sempre positivo\r\n\t\treturn uint256(price); // Adatta questa moltiplicazione in base alla tua necessità\r\n\t}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}