{
  "address": "0x26345981657641c97b434317750aab6281B30e2C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "ChangeBpsFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "ChangeRewardPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct IBaluniV1Agent.Call[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensReturn",
          "type": "address[]"
        }
      ],
      "name": "Execute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_BPS_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_BPS_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_MAX_BPS_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agentFactory",
      "outputs": [
        {
          "internalType": "contract IBaluniV1AgentFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slippage",
          "type": "uint256"
        }
      ],
      "name": "arbitrage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "name": "burnERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "name": "burnUSDC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalBaluni",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalERC20Balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baluniAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenDecimals",
          "type": "uint256"
        }
      ],
      "name": "calculateTokenShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_agentFactory",
          "type": "address"
        }
      ],
      "name": "changeAgentFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "changeBpsFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IBaluniV1Agent.Call[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "tokensReturn",
          "type": "address[]"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAgentAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBpsFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getUSDCShareValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wnative",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniFactory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidateAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listAllTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balAmountToMint",
          "type": "uint256"
        }
      ],
      "name": "mintWithUSDC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balAmountToMint",
          "type": "uint256"
        }
      ],
      "name": "requiredUSDCtoMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tokenValuation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValuation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe105105bc36ed77af95bfaa3392de0b90f6aca818b8f494320092912f1910948",
  "receipt": {
    "to": null,
    "from": "0x84F07be28ecd5b29Df340be8b065A6113a8e893e",
    "contractAddress": "0x26345981657641c97b434317750aab6281B30e2C",
    "transactionIndex": 45,
    "gasUsed": "4049275",
    "logsBloom": "0x
    "blockHash": "0xb56bc0bb75aae1b03cfb514c4f658967db2a0b1e3478a2bebb85ffa907dcb2e5",
    "transactionHash": "0xe105105bc36ed77af95bfaa3392de0b90f6aca818b8f494320092912f1910948",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 57152992,
        "transactionHash": "0xe105105bc36ed77af95bfaa3392de0b90f6aca818b8f494320092912f1910948",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000084f07be28ecd5b29df340be8b065a6113a8e893e",
          "0x000000000000000000000000fcccd43296d9c1601a904eca9b339d94a5e5e098"
        ],
        "data": "0x000000000000000000000000000000000000000000000000020a356d975867c7000000000000000000000000000000000000000000000000430ee61133f3781c00000000000000000000000000000000000000000000203c85d56db54201ffbb0000000000000000000000000000000000000000000000004104b0a39c9b105500000000000000000000000000000000000000000000203c87dfa322d95a6782",
        "logIndex": 228,
        "blockHash": "0xb56bc0bb75aae1b03cfb514c4f658967db2a0b1e3478a2bebb85ffa907dcb2e5"
      }
    ],
    "blockNumber": 57152992,
    "cumulativeGasUsed": "9760850",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9f1e6b1df3f181fc205e5004d897f0ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"ChangeBpsFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"ChangeRewardPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IBaluniV1Agent.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensReturn\",\"type\":\"address[]\"}],\"name\":\"Execute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_BPS_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BPS_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MAX_BPS_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentFactory\",\"outputs\":[{\"internalType\":\"contract IBaluniV1AgentFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"arbitrage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burnERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burnUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBaluni\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalERC20Balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baluniAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"}],\"name\":\"calculateTokenShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agentFactory\",\"type\":\"address\"}],\"name\":\"changeAgentFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeBpsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IBaluniV1Agent.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensReturn\",\"type\":\"address[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAgentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBpsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getUSDCShareValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wnative\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAllTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balAmountToMint\",\"type\":\"uint256\"}],\"name\":\"mintWithUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balAmountToMint\",\"type\":\"uint256\"}],\"name\":\"requiredUSDCtoMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenValuation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValuation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"arbitrage(uint256)\":{\"details\":\"Performs arbitrage based on the market price and unit price. If the market price is lower than the unit price, it buys BALUNI tokens using USDC. If the market price is higher than the unit price, it sells BALUNI tokens for USDC. The function ensures that the necessary balances and approvals are in place before performing the swaps.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burnERC20(uint256)\":{\"details\":\"Burns a specified amount of BAL tokens from the caller's balance.\",\"params\":{\"burnAmount\":\"The amount of BAL tokens to burn.\"}},\"burnUSDC(uint256)\":{\"details\":\"Burns a specified amount of BAL tokens and performs token swaps on multiple tokens.\",\"params\":{\"burnAmount\":\"The amount of BAL tokens to burn.\"}},\"calculateTokenShare(uint256,uint256,uint256,uint256)\":{\"details\":\"Calculates the token share based on the total Baluni supply, total ERC20 balance, Baluni amount, and token decimals.\",\"params\":{\"baluniAmount\":\"The amount of Baluni tokens.\",\"tokenDecimals\":\"The number of decimals for the ERC20 token.\",\"totalBaluni\":\"The total supply of Baluni tokens.\",\"totalERC20Balance\":\"The total balance of the ERC20 token.\"},\"returns\":{\"_0\":\"The calculated token share.\"}},\"changeAgentFactory(address)\":{\"details\":\"Changes the address of the agent factory contract. Can only be called by the contract owner.\",\"params\":{\"_agentFactory\":\"The new address of the agent factory contract.\"}},\"changeBpsFee(uint256)\":{\"details\":\"Changes the basis points fee for the contract.\",\"params\":{\"_newFee\":\"The new basis points fee to be set.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"execute((address,uint256,bytes)[],address[])\":{\"details\":\"Executes a series of calls to a BaluniV1Agent contract and handles token returns.\",\"params\":{\"calls\":\"An array of IBaluniV1Agent.Call structs representing the calls to be executed.\",\"tokensReturn\":\"An array of addresses representing the tokens to be returned.\"}},\"getAgentAddress(address)\":{\"details\":\"Retrieves the agent address associated with a user.\",\"params\":{\"_user\":\"The user's address.\"},\"returns\":{\"_0\":\"The agent address.\"}},\"getBpsFee()\":{\"details\":\"Returns the basis points fee.\",\"returns\":{\"_0\":\"The basis points fee as a uint256 value.\"}},\"getUSDCShareValue(uint256)\":{\"details\":\"Calculates the value of a given amount of Baluni tokens in USDC.\",\"params\":{\"amount\":\"The amount of Baluni tokens.\"},\"returns\":{\"_0\":\"The calculated value of the Baluni tokens in USDC.\"}},\"getUnitPrice()\":{\"details\":\"Returns the unit price of the token in USDC.\",\"returns\":{\"_0\":\"The unit price of the token in USDC.\"}},\"getVersion()\":{\"details\":\"Returns the version of the contract.\",\"returns\":{\"_0\":\"The version string.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(address,address,address,address,address)\":{\"details\":\"Initializes the BaluniV1Router contract. It sets the initial values for various variables and mints 1 ether to the contract's address. It also sets the USDC token address, WNATIVE token address, oracle address, Uniswap router address, and Uniswap factory address. Finally, it adds the USDC token address to the tokens set.\"},\"liquidate(address)\":{\"details\":\"Liquidates the specified token by swapping it for USDC.\",\"params\":{\"token\":\"The address of the token to be liquidated.\"}},\"liquidateAll()\":{\"details\":\"Liquidates all tokens in the contract. This function iterates through all the tokens in the contract and calls the `liquidate` function for each token. Can only be called by the contract owner.\"},\"listAllTokens()\":{\"details\":\"Returns an array of all listed tokens.\",\"returns\":{\"_0\":\"An array of all listed tokens.\"}},\"mintWithUSDC(uint256)\":{\"details\":\"Mints a specified amount of BALUNI tokens in exchange for USDC.\",\"params\":{\"balAmountToMint\":\"The amount of BALUNI tokens to mint.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredUSDCtoMint(uint256)\":{\"details\":\"Calculates the amount of USDC required to mint a given amount of BAL tokens.\",\"params\":{\"balAmountToMint\":\"The amount of BAL tokens to be minted.\"},\"returns\":{\"_0\":\"The amount of USDC required to mint the specified amount of BAL tokens.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"tokenValuation(uint256,address)\":{\"details\":\"Calculates the valuation of a given amount of a specific ERC20 token.\",\"params\":{\"amount\":\"The amount of the ERC20 token.\",\"token\":\"The address of the ERC20 token.\"},\"returns\":{\"_0\":\"The calculated valuation of the ERC20 token.\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"totalValuation()\":{\"details\":\"Returns the total valuation of the Baluni ecosystem.\",\"returns\":{\"_0\":\"The total valuation of the Baluni ecosystem.\"}},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"arbitrage(uint256)\":{\"notice\":\"This function can only be called by external accounts.\"},\"burnERC20(uint256)\":{\"notice\":\"This function requires the caller to have a balance of at least `burnAmount` BAL tokens.The function also checks the USDC balance before burning the tokens.After burning the tokens, the function transfers a proportional share of each ERC20 token held by the contract to the caller.The share is calculated based on the total supply of BAL tokens, the balance of each ERC20 token, and the decimals of each token.Finally, the function emits a `Burn` event with the caller's address and the amount of tokens burned.\"},\"execute((address,uint256,bytes)[],address[])\":{\"notice\":\"This function requires the agentFactory to be set and creates a new agent if necessary.If a token is new and a Uniswap pool exists for it, the token is added to the tokens set.If no Uniswap pool exists for a token, the token balance is transferred back to the caller.\"},\"liquidate(address)\":{\"notice\":\"The contract must have sufficient approval to spend the specified token.If a pool exists for the token and USDC on Uniswap, a direct swap is performed.If no pool exists, a multi-hop swap is performed through the WNATIVE token.If the swap fails, the `burn` function should be called to handle the failed swap.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaluniV1Router.sol\":\"BaluniV1Router\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x23a373902059fb51db98e32e13f89a0ef0c570039081a1345022e66bc7e315d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/BaluniV1Router.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\r\\npragma solidity 0.8.25;\\r\\n/**\\r\\n *  __                  __                      __\\r\\n * /  |                /  |                    /  |\\r\\n * $$ |____    ______  $$ | __    __  _______  $$/\\r\\n * $$      \\\\  /      \\\\ $$ |/  |  /  |/       \\\\ /  |\\r\\n * $$$$$$$  | $$$$$$  |$$ |$$ |  $$ |$$$$$$$  |$$ |\\r\\n * $$ |  $$ | /    $$ |$$ |$$ |  $$ |$$ |  $$ |$$ |\\r\\n * $$ |__$$ |/$$$$$$$ |$$ |$$ \\\\__$$ |$$ |  $$ |$$ |\\r\\n * $$    $$/ $$    $$ |$$ |$$    $$/ $$ |  $$ |$$ |\\r\\n * $$$$$$$/   $$$$$$$/ $$/  $$$$$$/  $$/   $$/ $$/\\r\\n *\\r\\n *\\r\\n *                  ,-\\\"\\\"\\\"\\\"-.\\r\\n *                ,'      _ `.\\r\\n *               /       )_)  \\\\\\r\\n *              :              :\\r\\n *              \\\\              /\\r\\n *               \\\\            /\\r\\n *                `.        ,'\\r\\n *                  `.    ,'\\r\\n *                    `.,'\\r\\n *                     /\\\\`.   ,-._\\r\\n *                         `-'    \\\\__\\r\\n *                              .\\r\\n *               s                \\\\\\r\\n *                                \\\\\\\\\\r\\n *                                 \\\\\\\\\\r\\n *                                  >\\\\/7\\r\\n *                              _.-(6'  \\\\\\r\\n *                             (=___._/` \\\\\\r\\n *                                  )  \\\\ |\\r\\n *                                 /   / |\\r\\n *                                /    > /\\r\\n *                               j    < _\\\\\\r\\n *                           _.-' :      ``.\\r\\n *                           \\\\ r=._\\\\        `.\\r\\n */\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\r\\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\r\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\\r\\n\\r\\nimport './interfaces/IOracle.sol';\\r\\nimport './interfaces/IBaluniV1AgentFactory.sol';\\r\\nimport './interfaces/IBaluniV1Agent.sol';\\r\\nimport './interfaces/IBaluniV1MarketOracle.sol';\\r\\n\\r\\ncontract BaluniV1Router is ERC20Upgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {\\r\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n  struct Call {\\r\\n    address to;\\r\\n    uint256 value;\\r\\n    bytes data;\\r\\n  }\\r\\n\\r\\n  uint256 public _MAX_BPS_FEE;\\r\\n  uint256 public _BPS_FEE;\\r\\n  uint256 public _BPS_BASE;\\r\\n\\r\\n  EnumerableSetUpgradeable.AddressSet private tokens;\\r\\n  IERC20Upgradeable private USDC;\\r\\n  IERC20MetadataUpgradeable private WNATIVE;\\r\\n  IOracle private oracle;\\r\\n  ISwapRouter private uniswapRouter;\\r\\n  IUniswapV3Factory private uniswapFactory;\\r\\n  IBaluniV1AgentFactory public agentFactory;\\r\\n\\r\\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\r\\n\\r\\n  event Execute(address user, IBaluniV1Agent.Call[] calls, address[] tokensReturn);\\r\\n  event Burn(address user, uint256 value);\\r\\n  event Mint(address user, uint256 value);\\r\\n  event ChangeBpsFee(uint256 newFee);\\r\\n  event ChangeRewardPool(address pool);\\r\\n  event Log(string message, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the BaluniV1Router contract.\\r\\n   * It sets the initial values for various variables and mints 1 ether to the contract's address.\\r\\n   * It also sets the USDC token address, WNATIVE token address, oracle address, Uniswap router address, and Uniswap factory address.\\r\\n   * Finally, it adds the USDC token address to the tokens set.\\r\\n   */\\r\\n  function initialize(\\r\\n    address _usdc,\\r\\n    address _wnative,\\r\\n    address _oracle,\\r\\n    address _uniRouter,\\r\\n    address _uniFactory\\r\\n  ) public initializer {\\r\\n    __ERC20_init('Baluni', 'BALUNI');\\r\\n    __Ownable_init();\\r\\n    __ReentrancyGuard_init();\\r\\n    __UUPSUpgradeable_init();\\r\\n    _mint(address(this), 1 ether);\\r\\n\\r\\n    _MAX_BPS_FEE = 500;\\r\\n    _BPS_FEE = 30; // 0.3%.\\r\\n    _BPS_BASE = 10000;\\r\\n    USDC = IERC20Upgradeable(_usdc);\\r\\n    WNATIVE = IERC20MetadataUpgradeable(_wnative);\\r\\n    oracle = IOracle(_oracle); // 1inch Spot Aggregator\\r\\n    uniswapRouter = ISwapRouter(_uniRouter);\\r\\n    uniswapFactory = IUniswapV3Factory(_uniFactory);\\r\\n    EnumerableSetUpgradeable.add(tokens, address(USDC));\\r\\n  }\\r\\n\\r\\n  function getTreasury() public view returns (address) {\\r\\n    return owner();\\r\\n  }\\r\\n\\r\\n  function upgradeTo(address newImplementation) external virtual override {\\r\\n    _authorizeUpgrade(newImplementation);\\r\\n    _upgradeToAndCallSecure(newImplementation, bytes(''), false);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function to authorize an upgrade to a new implementation contract.\\r\\n   * @param newImplementation The address of the new implementation contract.\\r\\n   * @notice This function can only be called by the contract owner.\\r\\n   */\\r\\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the basis points fee.\\r\\n   * @return The basis points fee as a uint256 value.\\r\\n   */\\r\\n  function getBpsFee() external view returns (uint256) {\\r\\n    return _BPS_FEE;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the unit price of the token in USDC.\\r\\n   * @return The unit price of the token in USDC.\\r\\n   */\\r\\n  function getUnitPrice() public view returns (uint256) {\\r\\n    return _calculateBaluniToUSDC(1e18);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns an array of all listed tokens.\\r\\n   * @return An array of all listed tokens.\\r\\n   */\\r\\n  function listAllTokens() external view returns (address[] memory) {\\r\\n    return tokens.values();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Changes the basis points fee for the contract.\\r\\n   * @param _newFee The new basis points fee to be set.\\r\\n   */\\r\\n  function changeBpsFee(uint256 _newFee) external onlyOwner {\\r\\n    _BPS_FEE = _newFee;\\r\\n    emit ChangeBpsFee(_newFee);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Changes the address of the agent factory contract.\\r\\n   * Can only be called by the contract owner.\\r\\n   * @param _agentFactory The new address of the agent factory contract.\\r\\n   */\\r\\n  function changeAgentFactory(address _agentFactory) external onlyOwner {\\r\\n    agentFactory = IBaluniV1AgentFactory(_agentFactory);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executes a series of calls to a BaluniV1Agent contract and handles token returns.\\r\\n   * @param calls An array of IBaluniV1Agent.Call structs representing the calls to be executed.\\r\\n   * @param tokensReturn An array of addresses representing the tokens to be returned.\\r\\n   * @notice This function requires the agentFactory to be set and creates a new agent if necessary.\\r\\n   * @notice If a token is new and a Uniswap pool exists for it, the token is added to the tokens set.\\r\\n   * @notice If no Uniswap pool exists for a token, the token balance is transferred back to the caller.\\r\\n   */\\r\\n  function execute(IBaluniV1Agent.Call[] memory calls, address[] memory tokensReturn) external nonReentrant {\\r\\n    require(address(agentFactory) != address(0), 'Agent factory not set');\\r\\n    address agent = agentFactory.getOrCreateAgent(msg.sender);\\r\\n    bool[] memory isTokenNew = new bool[](tokensReturn.length);\\r\\n    uint256[] memory tokenBalances = new uint256[](tokensReturn.length);\\r\\n\\r\\n    for (uint256 i = 0; i < tokensReturn.length; i++) {\\r\\n      isTokenNew[i] = !EnumerableSetUpgradeable.contains(tokens, tokensReturn[i]);\\r\\n      tokenBalances[i] = IERC20Upgradeable(tokensReturn[i]).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    IBaluniV1Agent(agent).execute(calls, tokensReturn);\\r\\n\\r\\n    for (uint256 i = 0; i < tokensReturn.length; i++) {\\r\\n      address token = tokensReturn[i];\\r\\n      uint256 balance = IERC20Upgradeable(token).balanceOf(address(this));\\r\\n      address poolNative3000 = uniswapFactory.getPool(token, address(WNATIVE), 3000);\\r\\n      address poolNative500 = uniswapFactory.getPool(token, address(WNATIVE), 500);\\r\\n      bool poolExist = poolNative3000 != address(0) || poolNative500 != address(0);\\r\\n\\r\\n      if (isTokenNew[i] && poolExist) {\\r\\n        EnumerableSetUpgradeable.add(tokens, token);\\r\\n      }\\r\\n\\r\\n      uint256 amountReceived = balance - tokenBalances[i];\\r\\n\\r\\n      if (!poolExist) {\\r\\n        IERC20Upgradeable(token).transfer(msg.sender, amountReceived);\\r\\n        return;\\r\\n      }\\r\\n\\r\\n      if (balance > tokenBalances[i]) {\\r\\n        uint256 fee = (amountReceived * _BPS_FEE) / _BPS_BASE;\\r\\n        IERC20Upgradeable(tokensReturn[i]).transfer(getTreasury(), fee);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Liquidates the specified token by swapping it for USDC.\\r\\n   * @param token The address of the token to be liquidated.\\r\\n   * @notice The contract must have sufficient approval to spend the specified token.\\r\\n   * @notice If a pool exists for the token and USDC on Uniswap, a direct swap is performed.\\r\\n   * @notice If no pool exists, a multi-hop swap is performed through the WNATIVE token.\\r\\n   * @notice If the swap fails, the `burn` function should be called to handle the failed swap.\\r\\n   */\\r\\n  function liquidate(address token) public {\\r\\n    uint256 totalERC20Balance = IERC20Upgradeable(token).balanceOf(address(this));\\r\\n    address pool = uniswapFactory.getPool(token, address(USDC), 3000);\\r\\n    secureApproval(token, address(uniswapRouter), totalERC20Balance);\\r\\n    bool haveBalance = totalERC20Balance > 0;\\r\\n    if (pool != address(0) && haveBalance) {\\r\\n      uint256 singleSwapResult = _singleSwap(token, address(USDC), totalERC20Balance, address(this));\\r\\n      require(singleSwapResult > 0, 'Swap Failed, Try Burn()');\\r\\n    } else if (pool == address(0) && haveBalance) {\\r\\n      uint256 amountOutHop = _multiHopSwap(token, address(WNATIVE), address(USDC), totalERC20Balance, address(this));\\r\\n      require(amountOutHop > 0, 'Swap Failed, Try Burn()');\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Liquidates all tokens in the contract.\\r\\n   * This function iterates through all the tokens in the contract and calls the `liquidate` function for each token.\\r\\n   * Can only be called by the contract owner.\\r\\n   */\\r\\n  function liquidateAll() public nonReentrant {\\r\\n    uint256 length = tokens.length();\\r\\n    for (uint256 i = 0; i < length; i++) {\\r\\n      address token = tokens.at(i);\\r\\n      liquidate(token);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Burns a specified amount of BAL tokens from the caller's balance.\\r\\n   * @param burnAmount The amount of BAL tokens to burn.\\r\\n   * @notice This function requires the caller to have a balance of at least `burnAmount` BAL tokens.\\r\\n   * @notice The function also checks the USDC balance before burning the tokens.\\r\\n   * @notice After burning the tokens, the function transfers a proportional share of each ERC20 token held by the contract to the caller.\\r\\n   * @notice The share is calculated based on the total supply of BAL tokens, the balance of each ERC20 token, and the decimals of each token.\\r\\n   * @notice Finally, the function emits a `Burn` event with the caller's address and the amount of tokens burned.\\r\\n   */\\r\\n  function burnERC20(uint256 burnAmount) external nonReentrant {\\r\\n    require(balanceOf(msg.sender) >= burnAmount, 'Insufficient BAL');\\r\\n    _checkUSDC(burnAmount);\\r\\n\\r\\n    for (uint256 i; i < tokens.length(); i++) {\\r\\n      address token = tokens.at(i);\\r\\n      uint256 totalBaluni = totalSupply();\\r\\n      uint256 totalERC20Balance = IERC20Upgradeable(token).balanceOf(address(this));\\r\\n\\r\\n      if (totalERC20Balance == 0 || token == address(this)) continue;\\r\\n\\r\\n      uint256 decimals = IERC20MetadataUpgradeable(token).decimals();\\r\\n      uint256 share = _calculateERC20Share(totalBaluni, totalERC20Balance, burnAmount, decimals);\\r\\n      uint256 amountAfterFee = _calculateNetAmountAfterFee(share);\\r\\n      IERC20Upgradeable(token).transfer(msg.sender, amountAfterFee);\\r\\n      IERC20Upgradeable(token).transfer(getTreasury(), share - amountAfterFee);\\r\\n    }\\r\\n    _burn(msg.sender, burnAmount);\\r\\n    emit Burn(msg.sender, burnAmount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Burns a specified amount of BAL tokens and performs token swaps on multiple tokens.\\r\\n   * @param burnAmount The amount of BAL tokens to burn.\\r\\n   */\\r\\n  function burnUSDC(uint256 burnAmount) external nonReentrant {\\r\\n    require(burnAmount > 0, 'Insufficient BAL');\\r\\n    _checkUSDC(burnAmount);\\r\\n\\r\\n    for (uint256 i; i < tokens.length(); i++) {\\r\\n      address token = tokens.at(i);\\r\\n      uint256 totalBaluni = totalSupply();\\r\\n      uint256 totalERC20Balance = IERC20Upgradeable(token).balanceOf(address(this));\\r\\n\\r\\n      if (totalERC20Balance > 0 == false) continue;\\r\\n\\r\\n      if (token == address(this)) continue;\\r\\n\\r\\n      uint256 decimals = IERC20MetadataUpgradeable(token).decimals();\\r\\n      uint256 burnAmountToken = _calculateERC20Share(totalBaluni, totalERC20Balance, burnAmount, decimals);\\r\\n\\r\\n      if (token == address(USDC)) {\\r\\n        IERC20Upgradeable(USDC).transfer(msg.sender, burnAmountToken);\\r\\n        continue;\\r\\n      }\\r\\n\\r\\n      address pool = uniswapFactory.getPool(token, address(USDC), 3000);\\r\\n      secureApproval(token, address(uniswapRouter), burnAmountToken);\\r\\n\\r\\n      if (pool != address(0)) {\\r\\n        uint256 amountOut = _singleSwap(token, address(USDC), burnAmountToken, address(this));\\r\\n        uint256 amountAfterFee = _calculateNetAmountAfterFee(amountOut);\\r\\n        IERC20Upgradeable(address(USDC)).transfer(msg.sender, amountAfterFee);\\r\\n        IERC20Upgradeable(address(USDC)).transfer(getTreasury(), amountOut - amountAfterFee);\\r\\n        require(amountOut > 0, 'Swap Failed, Try Burn()');\\r\\n      } else {\\r\\n        uint256 amountOutHop = _multiHopSwap(token, address(WNATIVE), address(USDC), burnAmountToken, msg.sender);\\r\\n        uint256 amountAfterFee = _calculateNetAmountAfterFee(amountOutHop);\\r\\n        IERC20Upgradeable(address(USDC)).transfer(msg.sender, amountAfterFee);\\r\\n        IERC20Upgradeable(address(USDC)).transfer(getTreasury(), amountOutHop - amountAfterFee);\\r\\n        require(amountOutHop > 0, 'Swap Failed, Try Burn()');\\r\\n      }\\r\\n    }\\r\\n    _burn(msg.sender, burnAmount);\\r\\n    emit Burn(msg.sender, burnAmount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Retrieves the agent address associated with a user.\\r\\n   * @param _user The user's address.\\r\\n   * @return The agent address.\\r\\n   */\\r\\n  function getAgentAddress(address _user) external view returns (address) {\\r\\n    return agentFactory.getAgentAddress(_user);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Mints a specified amount of BALUNI tokens in exchange for USDC.\\r\\n   * @param balAmountToMint The amount of BALUNI tokens to mint.\\r\\n   */\\r\\n  function mintWithUSDC(uint256 balAmountToMint) public nonReentrant {\\r\\n    uint256 totalUSDValuation = _totalValuation();\\r\\n    uint256 totalBalSupply = totalSupply();\\r\\n    uint256 usdcRequired = (balAmountToMint * totalUSDValuation) / totalBalSupply;\\r\\n    USDC.safeTransferFrom(msg.sender, address(this), usdcRequired / 1e12);\\r\\n    uint256 balance = IERC20Upgradeable(USDC).balanceOf(msg.sender);\\r\\n    uint256 allowed = USDC.allowance(msg.sender, address(this));\\r\\n    require(totalBalSupply > 0, 'Total BALUNI supply cannot be zero');\\r\\n    require(balance >= usdcRequired / 1e12, 'USDC balance is insufficient');\\r\\n    require(allowed >= usdcRequired / 1e12, 'Check the token allowance');\\r\\n\\r\\n    _mint(msg.sender, balAmountToMint);\\r\\n    emit Mint(msg.sender, balAmountToMint);\\r\\n\\r\\n    uint256 fee = ((usdcRequired / 1e12) * _BPS_FEE) / _BPS_BASE;\\r\\n    IERC20Upgradeable(address(USDC)).transfer(getTreasury(), fee);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the amount of USDC required to mint a given amount of BAL tokens.\\r\\n   * @param balAmountToMint The amount of BAL tokens to be minted.\\r\\n   * @return The amount of USDC required to mint the specified amount of BAL tokens.\\r\\n   */\\r\\n  function requiredUSDCtoMint(uint256 balAmountToMint) public view returns (uint256) {\\r\\n    uint256 totalUSDValuation = _totalValuation();\\r\\n    uint256 totalBalSupply = totalSupply();\\r\\n    uint256 usdcRequired = (balAmountToMint * totalUSDValuation) / totalBalSupply;\\r\\n    return usdcRequired / 1e12;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the token share based on the total Baluni supply, total ERC20 balance, Baluni amount, and token decimals.\\r\\n   * @param totalBaluni The total supply of Baluni tokens.\\r\\n   * @param totalERC20Balance The total balance of the ERC20 token.\\r\\n   * @param baluniAmount The amount of Baluni tokens.\\r\\n   * @param tokenDecimals The number of decimals for the ERC20 token.\\r\\n   * @return The calculated token share.\\r\\n   */\\r\\n  function calculateTokenShare(\\r\\n    uint256 totalBaluni,\\r\\n    uint256 totalERC20Balance,\\r\\n    uint256 baluniAmount,\\r\\n    uint256 tokenDecimals\\r\\n  ) external pure returns (uint256) {\\r\\n    return _calculateERC20Share(totalBaluni, totalERC20Balance, baluniAmount, tokenDecimals);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the valuation of a given amount of a specific ERC20 token.\\r\\n   * @param amount The amount of the ERC20 token.\\r\\n   * @param token The address of the ERC20 token.\\r\\n   * @return The calculated valuation of the ERC20 token.\\r\\n   */\\r\\n  function tokenValuation(uint256 amount, address token) external view returns (uint256) {\\r\\n    return _calculateERC20Valuation(amount, token);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the total valuation of the Baluni ecosystem.\\r\\n   * @return The total valuation of the Baluni ecosystem.\\r\\n   */\\r\\n  function totalValuation() external view returns (uint256) {\\r\\n    return _totalValuation();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the value of a given amount of Baluni tokens in USDC.\\r\\n   * @param amount The amount of Baluni tokens.\\r\\n   * @return The calculated value of the Baluni tokens in USDC.\\r\\n   */\\r\\n  function getUSDCShareValue(uint256 amount) external view returns (uint256) {\\r\\n    return _calculateBaluniToUSDC(amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs arbitrage based on the market price and unit price.\\r\\n   * If the market price is lower than the unit price, it buys BALUNI tokens using USDC.\\r\\n   * If the market price is higher than the unit price, it sells BALUNI tokens for USDC.\\r\\n   * The function ensures that the necessary balances and approvals are in place before performing the swaps.\\r\\n   * @notice This function can only be called by external accounts.\\r\\n   */\\r\\n  function arbitrage(uint256 slippage) external nonReentrant {\\r\\n    IBaluniV1MarketOracle marketOracle = IBaluniV1MarketOracle(address(0x284E255314C8Cc67263C1f02C46B655Ee53df126));\\r\\n    uint256 unitPrice = marketOracle.unitPriceBALUNI();\\r\\n    uint256 marketPrice = marketOracle.priceBALUNI() * 1e12;\\r\\n\\r\\n    uint256 baluniBalanceB4 = balanceOf(address(this));\\r\\n    uint256 usdcBalanceB4 = USDC.balanceOf(address(this));\\r\\n    uint256 usdcBalance = usdcBalanceB4 * 1e12;\\r\\n\\r\\n    secureApproval(address(this), address(uniswapRouter), type(uint256).max);\\r\\n    secureApproval(address(USDC), address(uniswapRouter), type(uint256).max);\\r\\n\\r\\n    if (marketPrice < unitPrice) {\\r\\n      executeBuyArbitrage(usdcBalance, usdcBalanceB4, baluniBalanceB4, slippage, marketPrice, unitPrice);\\r\\n    } else if (marketPrice > unitPrice) {\\r\\n      executeSellArbitrage(usdcBalance, usdcBalanceB4, baluniBalanceB4, slippage, marketPrice, unitPrice);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function executeBuyArbitrage(\\r\\n    uint256 usdcBalance,\\r\\n    uint256 usdcBalanceB4,\\r\\n    uint256 baluniBalanceB4,\\r\\n    uint256 slippage,\\r\\n    uint256 marketPrice,\\r\\n    uint256 unitPrice\\r\\n  ) internal {\\r\\n    uint256 amountToBuy = ((usdcBalance) / (marketPrice)) * 1e18;\\r\\n    if (amountToBuy > baluniBalanceB4) amountToBuy = baluniBalanceB4;\\r\\n    require(baluniBalanceB4 >= amountToBuy, 'Arbitrage failed: insufficient BALUNI balance');\\r\\n\\r\\n    uint256 amountOutMin = (usdcBalanceB4 * slippage) / 10000;\\r\\n    emit Log('Amount Out Min for USDC -> BALUNI:', amountOutMin);\\r\\n\\r\\n    uint256 amountOutBAL = _singleSwapSlippage(\\r\\n      address(USDC),\\r\\n      address(this),\\r\\n      usdcBalanceB4,\\r\\n      amountOutMin,\\r\\n      address(this)\\r\\n    );\\r\\n    require(amountOutBAL >= amountToBuy, 'Arbitrage failed: insufficient output amount');\\r\\n\\r\\n    amountOutMin = (amountOutBAL * slippage) / 10000;\\r\\n    emit Log('Amount Out Min for BALUNI -> USDC:', amountOutMin);\\r\\n\\r\\n    uint256 amountOutUSDC = _singleSwapSlippage(\\r\\n      address(this),\\r\\n      address(USDC),\\r\\n      amountOutBAL,\\r\\n      amountOutMin,\\r\\n      address(this)\\r\\n    );\\r\\n    require(amountOutUSDC >= usdcBalanceB4, 'Arbitrage did not profit BUY');\\r\\n  }\\r\\n\\r\\n  function executeSellArbitrage(\\r\\n    uint256 usdcBalance,\\r\\n    uint256 usdcBalanceB4,\\r\\n    uint256 baluniBalanceB4,\\r\\n    uint256 slippage,\\r\\n    uint256 marketPrice,\\r\\n    uint256 unitPrice\\r\\n  ) internal {\\r\\n    uint256 amountToSell = baluniBalanceB4;\\r\\n    require(baluniBalanceB4 >= amountToSell, 'Arbitrage failed: insufficient BALUNI balance');\\r\\n    require(usdcBalance > 0, 'Arbitrage failed: insufficient USDC balance');\\r\\n\\r\\n    uint256 amountOutMin = (amountToSell * slippage) / 10000;\\r\\n    emit Log('Amount Out Min for BALUNI -> USDC:', amountOutMin);\\r\\n\\r\\n    uint256 amountOutUSDC = _singleSwapSlippage(\\r\\n      address(this),\\r\\n      address(USDC),\\r\\n      amountToSell,\\r\\n      amountOutMin,\\r\\n      address(this)\\r\\n    );\\r\\n    require(amountOutUSDC > usdcBalanceB4, 'Arbitrage failed: insufficient output amount');\\r\\n\\r\\n    amountOutMin = (amountOutUSDC * slippage) / 10000;\\r\\n    emit Log('Amount Out Min for USDC -> BALUNI:', amountOutMin);\\r\\n\\r\\n    uint256 amountOutBAL = _singleSwapSlippage(\\r\\n      address(USDC),\\r\\n      address(this),\\r\\n      amountOutUSDC,\\r\\n      amountOutMin,\\r\\n      address(this)\\r\\n    );\\r\\n    require(amountOutBAL >= baluniBalanceB4, 'Arbitrage did not profit SELL');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Ensures that the contract has the necessary approval for a token to be spent by a spender.\\r\\n   * If the current allowance is not equal to the desired amount, it updates the allowance accordingly.\\r\\n   * @param token The address of the token to be approved.\\r\\n   * @param spender The address of the spender.\\r\\n   * @param amount The desired allowance amount.\\r\\n   * @notice This function is internal and should not be called directly.\\r\\n   */\\r\\n  function secureApproval(address token, address spender, uint256 amount) internal {\\r\\n    IERC20Upgradeable _token = IERC20Upgradeable(token);\\r\\n    uint256 currentAllowance = _token.allowance(address(this), spender);\\r\\n\\r\\n    if (currentAllowance < amount) {\\r\\n      _token.approve(spender, 0);\\r\\n      _token.approve(spender, amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the valuation of an ERC20 token based on the amount and token address.\\r\\n   * @param amount The amount of the token.\\r\\n   * @param token The address of the token.\\r\\n   * @return valuation The valuation of the token.\\r\\n   */\\r\\n  function _calculateERC20Valuation(uint256 amount, address token) internal view returns (uint256 valuation) {\\r\\n    uint256 rate;\\r\\n    uint8 tokenDecimal = IERC20MetadataUpgradeable(token).decimals();\\r\\n    uint8 usdcDecimal = IERC20MetadataUpgradeable(address(USDC)).decimals();\\r\\n\\r\\n    if (token == address(USDC)) return amount * 1e12;\\r\\n\\r\\n    try IOracle(oracle).getRate(IERC20Upgradeable(token), IERC20Upgradeable(USDC), true) returns (uint256 _rate) {\\r\\n      rate = _rate;\\r\\n    } catch {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    if (tokenDecimal == usdcDecimal) return ((amount * 1e12) * (rate)) / 1e18;\\r\\n\\r\\n    uint256 factor = (10 ** (tokenDecimal - usdcDecimal));\\r\\n\\r\\n    if (tokenDecimal < 18) return ((amount * factor) * (rate * factor)) / 1e18;\\r\\n\\r\\n    return ((amount) * (rate * factor)) / 1e18;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the equivalent amount of USDC tokens for a given amount of Baluni tokens.\\r\\n   * @param amount The amount of Baluni tokens to convert.\\r\\n   * @return shareUSDC The equivalent amount of USDC tokens.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The total supply of Baluni tokens must be greater than zero.\\r\\n   */\\r\\n  function _calculateBaluniToUSDC(uint256 amount) internal view returns (uint256 shareUSDC) {\\r\\n    uint256 totalBaluni = totalSupply();\\r\\n    require(totalBaluni > 0, 'Total supply cannot be zero');\\r\\n    uint256 totalUSDC = _totalValuation();\\r\\n    shareUSDC = (amount * totalUSDC) / totalBaluni;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the ERC20 share based on the total Baluni supply, total ERC20 balance,\\r\\n   * Baluni amount, and token decimals.\\r\\n   * @param totalBaluni The total supply of Baluni tokens.\\r\\n   * @param totalERC20Balance The total balance of the ERC20 token.\\r\\n   * @param baluniAmount The amount of Baluni tokens.\\r\\n   * @param tokenDecimals The number of decimals for the ERC20 token.\\r\\n   * @return The calculated ERC20 share.\\r\\n   */\\r\\n  function _calculateERC20Share(\\r\\n    uint256 totalBaluni,\\r\\n    uint256 totalERC20Balance,\\r\\n    uint256 baluniAmount,\\r\\n    uint256 tokenDecimals\\r\\n  ) internal pure returns (uint256) {\\r\\n    require(totalBaluni > 0, 'Total supply cannot be zero');\\r\\n    require(tokenDecimals <= 18, 'Token decimals should be <= 18');\\r\\n    uint256 baluniAdjusted;\\r\\n    uint256 amountAdjusted;\\r\\n\\r\\n    if (tokenDecimals < 18) {\\r\\n      baluniAdjusted = totalBaluni / (10 ** (18 - tokenDecimals));\\r\\n      amountAdjusted = baluniAmount / (10 ** (18 - tokenDecimals));\\r\\n    } else {\\r\\n      baluniAdjusted = totalBaluni;\\r\\n      amountAdjusted = baluniAmount;\\r\\n    }\\r\\n\\r\\n    uint256 result = (amountAdjusted * totalERC20Balance) / baluniAdjusted;\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executes a single swap on Uniswap.\\r\\n   * @param token0 The address of the input token.\\r\\n   * @param token1 The address of the output token.\\r\\n   * @param tokenBalance The amount of input token to be swapped.\\r\\n   * @param receiver The address that will receive the swapped tokens.\\r\\n   * @return amountOut The amount of output tokens received.\\r\\n   */\\r\\n  function _singleSwapSlippage(\\r\\n    address token0,\\r\\n    address token1,\\r\\n    uint256 tokenBalance,\\r\\n    uint256 adjustedBalance,\\r\\n    address receiver\\r\\n  ) private returns (uint256 amountOut) {\\r\\n    ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\r\\n      tokenIn: token0,\\r\\n      tokenOut: token1,\\r\\n      fee: 3000,\\r\\n      recipient: address(receiver),\\r\\n      deadline: block.timestamp,\\r\\n      amountIn: tokenBalance,\\r\\n      amountOutMinimum: adjustedBalance,\\r\\n      sqrtPriceLimitX96: 0\\r\\n    });\\r\\n\\r\\n    return uniswapRouter.exactInputSingle(params);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executes a single swap on Uniswap.\\r\\n   * @param token0 The address of the input token.\\r\\n   * @param token1 The address of the output token.\\r\\n   * @param tokenBalance The amount of input token to be swapped.\\r\\n   * @param receiver The address that will receive the swapped tokens.\\r\\n   * @return amountOut The amount of output tokens received.\\r\\n   */\\r\\n  function _singleSwap(\\r\\n    address token0,\\r\\n    address token1,\\r\\n    uint256 tokenBalance,\\r\\n    address receiver\\r\\n  ) private returns (uint256 amountOut) {\\r\\n    ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\r\\n      tokenIn: token0,\\r\\n      tokenOut: token1,\\r\\n      fee: 3000,\\r\\n      recipient: address(receiver),\\r\\n      deadline: block.timestamp,\\r\\n      amountIn: tokenBalance,\\r\\n      amountOutMinimum: 0,\\r\\n      sqrtPriceLimitX96: 0\\r\\n    });\\r\\n\\r\\n    return uniswapRouter.exactInputSingle(params);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executes a multi-hop swap using the Uniswap router.\\r\\n   * @param token0 The address of the first token in the swap path.\\r\\n   * @param token1 The address of the second token in the swap path.\\r\\n   * @param token2 The address of the third token in the swap path.\\r\\n   * @param tokenBalance The amount of tokens to be swapped.\\r\\n   * @param receiver The address that will receive the swapped tokens.\\r\\n   * @return amountOut The amount of tokens received after the swap.\\r\\n   */\\r\\n  function _multiHopSwap(\\r\\n    address token0,\\r\\n    address token1,\\r\\n    address token2,\\r\\n    uint256 tokenBalance,\\r\\n    address receiver\\r\\n  ) private returns (uint256 amountOut) {\\r\\n    ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\r\\n      path: abi.encodePacked(token0, uint24(3000), token1, uint24(3000), token2),\\r\\n      recipient: address(receiver),\\r\\n      deadline: block.timestamp,\\r\\n      amountIn: tokenBalance,\\r\\n      amountOutMinimum: 0\\r\\n    });\\r\\n    return uniswapRouter.exactInput(params);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the total valuation of the contract by summing up the valuation of each token held.\\r\\n   * @return The total valuation of the contract.\\r\\n   */\\r\\n  function _totalValuation() internal view returns (uint256) {\\r\\n    uint256 _totalV;\\r\\n\\r\\n    for (uint256 i; i < tokens.length(); i++) {\\r\\n      address token = tokens.at(i);\\r\\n      uint256 balance = IERC20Upgradeable(token).balanceOf(address(this));\\r\\n      uint256 tokenBalanceValuation = _calculateERC20Valuation(balance, token);\\r\\n      _totalV += tokenBalanceValuation;\\r\\n    }\\r\\n\\r\\n    return _totalV;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the net amount after deducting the fee.\\r\\n   * @param _amount The input amount.\\r\\n   * @return The net amount after deducting the fee.\\r\\n   */\\r\\n  function _calculateNetAmountAfterFee(uint256 _amount) internal view returns (uint256) {\\r\\n    uint256 amountInWithFee = (_amount * (_BPS_BASE - (_BPS_FEE))) / _BPS_BASE;\\r\\n    return amountInWithFee;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function to check the USDC balance and total supply before burning tokens.\\r\\n   * @param amountToBurn The amount of tokens to be burned.\\r\\n   */\\r\\n  function _checkUSDC(uint256 amountToBurn) internal view {\\r\\n    uint256 balance = IERC20Upgradeable(USDC).balanceOf(address(this));\\r\\n    if (balance >= 0.001 * 1e6 && totalSupply() >= 1) {\\r\\n      require(amountToBurn >= 0.01 ether, 'Minimum burn amount is 0.01 BALUNI');\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Resizes an array to the specified size.\\r\\n   * @param arr The array to be resized.\\r\\n   * @param size The new size of the array.\\r\\n   * @return The resized array.\\r\\n   */\\r\\n  function _resize(uint256[] memory arr, uint256 size) internal pure returns (uint256[] memory) {\\r\\n    uint256[] memory ret = new uint256[](size);\\r\\n    for (uint256 i; i < size; i++) {\\r\\n      ret[i] = arr[i];\\r\\n    }\\r\\n    return ret;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the version of the contract.\\r\\n   * @return The version string.\\r\\n   */\\r\\n  function getVersion() external pure returns (string memory) {\\r\\n    return 'v1.0.1';\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x90f9b46ddb74e0eb8f74bf4e42b431ecdbe080a9acabbfba6c6a0084eed32a0c\",\"license\":\"GNU AGPLv3\"},\"contracts/interfaces/IBaluniV1Agent.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\r\\npragma solidity 0.8.25;\\r\\n\\r\\ninterface IBaluniV1Agent {\\r\\n  struct Call {\\r\\n    address to;\\r\\n    uint256 value;\\r\\n    bytes data;\\r\\n  }\\r\\n\\r\\n  function execute(Call[] memory calls, address[] memory tokensReturn) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x1bbf5ddbc4f525451e727d6997e6a20a6238d69232b58b3813760a16e7f60bbe\",\"license\":\"GNU AGPLv3\"},\"contracts/interfaces/IBaluniV1AgentFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\r\\npragma solidity 0.8.25;\\r\\n\\r\\ninterface IBaluniV1AgentFactory {\\r\\n  function getAgentAddress(address user) external view returns (address);\\r\\n\\r\\n  function getOrCreateAgent(address user) external returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x3012f40ef9454088602115cddadfed4e313fce92a824cc36975bbdd192ebfc7b\",\"license\":\"GNU AGPLv3\"},\"contracts/interfaces/IBaluniV1MarketOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\r\\npragma solidity 0.8.25;\\r\\n\\r\\ninterface IBaluniV1MarketOracle {\\r\\n  function unitPriceBALUNI() external view returns (uint256);\\r\\n\\r\\n  function priceBALUNI() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x4bb68e61ad0778cd70252556585e7c78386c898bacba82c6680fd43d286e975a\",\"license\":\"GNU AGPLv3\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"pragma solidity 0.8.25;\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\r\\n\\r\\ninterface IOracle {\\r\\n  function getRate(\\r\\n    IERC20Upgradeable srcToken,\\r\\n    IERC20Upgradeable dstToken,\\r\\n    bool useWrappers\\r\\n  ) external view returns (uint256 weightedRate);\\r\\n}\\r\\n\",\"keccak256\":\"0xc5336813c369f52c5c2cc267ac8d12794fca47d29fee3657506f4d228e343cc4\"}},\"version\":1}",
  "bytecode": "0x60a0806040523460225730608052614831908161002782396080518161115b0152f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063012a33aa1461029a57806306497cb91461029557806306fdde0314610290578063095ea7b31461028b5780630a38abab146102865780630cfc7386146102815780630d8e6e2c1461027c5780631459457a1461027757806318160ddd14610272578063185fcffe146101fa5780631a168da21461026d57806323b872dd1461026857806327d54a9214610263578063295b93001461025e5780632bdd955a146102595780632f86556814610254578063313ce5671461024f57806334decfc91461024a5780633659cfe61461024557806339509351146102405780633b19e84a146102135780633c2066a91461023b5780634f1ef286146102365780635e7f8b761461023157806370a082311461022c578063715018a61461022757806371ddcfb8146102225780637df107ea1461021d57806385377188146102185780638da5cb5b1461021357806395d89b411461020e578063a457c2d714610209578063a9059cbb14610204578063aa95d893146101ff578063b9f5e617146101fa578063be2ee0be146101f5578063dd62ed3e146101f0578063eedc3c50146101eb578063f2fde38b146101e6578063fe0a4dd1146101e15763fe330a51146101dc575f80fd5b611eb1565b6119ef565b611955565b611851565b611771565b611592565b6108ee565b611556565b61152c565b61147e565b6113d9565b610f31565b6113bb565b611392565b61135b565b6112fd565b6112c2565b611249565b61111a565b610f59565b610edb565b610da2565b610d84565b610d69565b610d44565b610d1a565b610d00565b610c59565b610b87565b61090c565b6108d1565b6107b7565b610771565b610507565b6104b9565b610484565b610393565b610301565b6102ad565b5f9103126102a957565b5f80fd5b346102a9575f3660031901126102a9576035546102cb811515612d9b565b6102d3612f13565b670de0b6b3a764000090808202918204036102fc576020916102f491611fe8565b604051908152f35b611fa7565b346102a95760203660031901126102a9577fbea1b31142ae4b1f4efad240349036d718b7950d246c127768097ccf602fc7e0602060043561034d60018060a01b03606554163314611ed8565b8061012e55604051908152a1005b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b90602061039092818152019061035b565b90565b346102a9575f3660031901126102a9576040515f6036546103b381611f23565b8084529060209060019081811690811561044957506001146103f0575b6103ec856103e081870382611069565b6040519182918261037f565b0390f35b60365f90815293507f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b85b838510610436575050505081016020016103e0826103ec6103d0565b805486860184015293820193810161041a565b8695506103ec969350602092506103e094915060ff191682840152151560051b82010192936103d0565b6001600160a01b038116036102a957565b346102a95760403660031901126102a9576104ae6004356104a481610473565b6024359033612de7565b602060405160018152f35b346102a95760203660031901126102a9576004356104d681610473565b6065546001600160a01b03906104ef9082163314611ed8565b61013780546001600160a01b03191691909216179055005b346102a95760203660031901126102a95761052760026097541415611f5b565b600260975561054861054d61053a612f13565b603554928391600435611fd5565b611fe8565b610132546105729064e8d4a51000906001600160a01b03169204809230903390612faa565b61013254610590906001600160a01b03165b6001600160a01b031690565b6040516370a0823160e01b815233600482015290929091602083602481875afa928315610716575f93610750575b50604051636eb1769f60e11b815233600482015230602482015293602090859060449082905afa90811561071657610625816106789461066e94826020986106cc9a5f9361071b575b5061061761061e93941515612020565b1015612077565b10156120c3565b6106316004353361312e565b6040805133815260043560208201527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859190a161012e5490611fd5565b61012f5490611fe8565b61013254610692906105849081906001600160a01b031681565b60655460405163a9059cbb60e01b81526001600160a01b0390911660048201526024810192909252909283919082905f9082906044820190565b03925af18015610716576106e7575b6106e56001609755565b005b6107089060203d60201161070f575b6107008183611069565b81019061210f565b505f6106db565b503d6106f6565b612015565b61061e9350610742610617918c3d8e11610749575b61073a8183611069565b810190612006565b9350610607565b503d610730565b61076a91935060203d6020116107495761073a8183611069565b915f6105be565b346102a9575f3660031901126102a9576103ec60405161079081611018565b600681526576312e302e3160d01b602082015260405191829160208352602083019061035b565b346102a95760a03660031901126102a9576004356107d481610473565b6024356107e081610473565b6044356107ec81610473565b6064356107f881610473565b6084359161080583610473565b5f549360ff8560081c1694855f146108c85750303b155b1561086c576108319415958661084557612127565b61083757005b6106e561ff00195f54165f55565b61085761010061ff00195f5416175f55565b610867600160ff195f5416175f55565b612127565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b60ff161561081c565b346102a9575f3660031901126102a9576020603554604051908152f35b346102a9575f3660031901126102a957602061012e54604051908152f35b346102a9576020806003193601126102a957600480359161093260026097541415611f5b565b6002609755335f9081526033602052604090206109539084905410156123c5565b61095c836132af565b5f5b61013054811015610b335761097861058461058483614495565b603554604080516370a0823160e01b8152308782019081526001600160a01b03948516959493908790839081906020010381895afa918215610716575f92610b14575b5081158015610b0b575b610afe57825163313ce56760e01b81529187838a818a5afa9081156107165760ff8b926109fb955f91610ad1575b501692613353565b93610a05856133fe565b825163a9059cbb60e01b808252338a83019081526020810184905292979289908390819060400103815f885af1801561071657610a7c988a975f94610a5493610ab4575b50606554169461241d565b94519788958694859384528c840160209093929193604081019460018060a01b031681520152565b03925af191821561071657600192610a97575b505b0161095e565b610aad90843d861161070f576107008183611069565b505f610a8f565b610aca908a3d8c1161070f576107008183611069565b505f610a49565b610af191508b3d8d11610af7575b610ae98183611069565b810190612404565b5f6109f3565b503d610adf565b5050505060019150610a91565b503086146109c5565b610b2c919250873d89116107495761073a8183611069565b905f6109bb565b7fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5610b7a85610b62813361341d565b60408051338152602081019290925290918291820190565b0390a16106e56001609755565b346102a95760603660031901126102a957600435610ba481610473565b60243590610bb182610473565b610bbf6044358093836135f5565b6001600160a01b0381165f90815260346020908152604080832033845290915290205491808310610c0357610bf79203903390612de7565b60405160018152602090f35b60405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608490fd5b346102a95760203660031901126102a957600435610c7681610473565b610137546040516313eaa54960e11b81526001600160a01b0392831660048201529160209183916024918391165afa8015610716576103ec915f91610cd1575b506040516001600160a01b0390911681529081906020820190565b610cf3915060203d602011610cf9575b610ceb8183611069565b81019061242a565b5f610cb6565b503d610ce1565b346102a9575f3660031901126102a95760206102f4612f13565b346102a95760403660031901126102a95760206102f4602435610d3c81610473565b60043561371f565b346102a95760203660031901126102a9576106e5600435610d6481610473565b61248b565b346102a9575f3660031901126102a957602060405160128152f35b346102a9575f3660031901126102a957602061012d54604051908152f35b346102a95760203660031901126102a957600435610dbf81610473565b6065546001600160a01b039190610dd99083163314611ed8565b60405191610de683611033565b5f83525f805160206147bc833981519152928184541690610e06846144b6565b805115801590610ed4575b610ec3575b505f8051602061477c8339815191525460ff1615610e3057005b610eb8610ebe926106e595610e595f8051602061477c833981519152600160ff19825416179055565b604051631b2ce7f360e11b60208201526001600160a01b0385166024808301919091528152610e9390610e8d604482611069565b87614574565b505f8051602061477c833981519152805460ff1916905554166001600160a01b031690565b14613d58565b614634565b610ecd9084614574565b505f610e16565b505f610e11565b346102a95760403660031901126102a957600435610ef881610473565b335f9081526034602090815260408083206001600160a01b038516845290915290205460243581018091116102fc576104ae9133612de7565b346102a9575f3660031901126102a9576065546040516001600160a01b039091168152602090f35b346102a9575f3660031901126102a957610f7860026097541415611f5b565b600260975561013080545f5b818110610f92576001609755005b8254811015610fcc575f8390525f8051602061479c83398151915281015460019190610fc6906001600160a01b031661248b565b01610f84565b6127fc565b634e487b7160e01b5f52604160045260245ffd5b606081019081106001600160401b0382111761100057604052565b610fd1565b6001600160401b03811161100057604052565b604081019081106001600160401b0382111761100057604052565b602081019081106001600160401b0382111761100057604052565b60a081019081106001600160401b0382111761100057604052565b90601f801991011681019081106001600160401b0382111761100057604052565b604051906110978261104e565b565b6040519061010082018281106001600160401b0382111761100057604052565b6001600160401b03811161100057601f01601f191660200190565b81601f820112156102a9578035906110eb826110b9565b926110f96040519485611069565b828452602083830101116102a957815f926020809301838601378301015290565b60403660031901126102a95760043561113281610473565b6024356001600160401b0381116102a9576111519036906004016110d4565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692903084146111b3575f805160206147bc833981519152546106e5946111ae929091166001600160a01b031614612644565b6126a5565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b9081518082526020808093019301915f5b82811061122c575050505090565b83516001600160a01b03168552938101939281019260010161121e565b346102a9575f3660031901126102a957604051806101309182548082526020809201935f525f8051602061479c833981519152915f905b8282106112ab576103ec8561129781890382611069565b60405191829160208352602083019061120d565b835486529485019460019384019390910190611280565b346102a95760203660031901126102a9576004356112df81610473565b60018060a01b03165f526033602052602060405f2054604051908152f35b346102a9575f3660031901126102a9576065545f906001600160a01b03811690611328338314611ed8565b6001600160a01b0319166065557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346102a95760203660031901126102a95760206102f460355461137f811515612d9b565b61054861138a612f13565b600435611fd5565b346102a9575f3660031901126102a957610137546040516001600160a01b039091168152602090f35b346102a9575f3660031901126102a957602061012f54604051908152f35b346102a9575f3660031901126102a9576040515f6037546113f981611f23565b808452906020906001908181169081156104495750600114611425576103ec856103e081870382611069565b60375f90815293507f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae5b83851061146b575050505081016020016103e0826103ec6103d0565b805486860184015293820193810161144f565b346102a95760403660031901126102a95760043561149b81610473565b60243590335f5260346020526114c48160405f209060018060a01b03165f5260205260405f2090565b54918083106114d957610bf792039033612de7565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b346102a95760403660031901126102a9576104ae60043561154c81610473565b60243590336135f5565b346102a95760203660031901126102a957602064e8d4a5100061158961157a612f13565b61054860355491600435611fd5565b04604051908152f35b346102a9576020806003193601126102a957600435906115b760026097541415611f5b565b600260975560405163d9ef6e5160e01b81529173284e255314c8cc67263c1f02c46b655ee53df1268284600481845afa938415610716575f9461174d575b50826004916040519283809263188550cf60e31b82525afa801561071657611624915f91611730575b50611fbb565b305f90815260336020526040902054610132805490959294919290611651906001600160a01b0316610584565b6040516370a0823160e01b8152306004820152908390829060249082905afa928315610716575f93611711575b50506116da61168c83611fbb565b966116d46105846116c6610584610135946116b96116b3610584885460018060a01b031690565b306138e8565b546001600160a01b031690565b92546001600160a01b031690565b906138e8565b808510156116ec57506106db94614116565b90919293116116ff575b505050506106db565b61170893613fa5565b5f8080806116f6565b611728929350803d106107495761073a8183611069565b905f8061167e565b6117479150843d86116107495761073a8183611069565b5f61161e565b60049194506117698491823d84116107495761073a8183611069565b9491506115f5565b346102a95760403660031901126102a95760206117c760043561179381610473565b602435906117a082610473565b60018060a01b03165f526034835260405f209060018060a01b03165f5260205260405f2090565b54604051908152f35b6001600160401b0381116110005760051b60200190565b9080601f830112156102a9576020908235611801816117d0565b9361180f6040519586611069565b81855260208086019260051b8201019283116102a957602001905b828210611838575050505090565b838091833561184681610473565b81520191019061182a565b346102a9576040806003193601126102a9576004356001600160401b03918282116102a957366023830112156102a9578160040135916024611892846117d0565b936118a06040519586611069565b8085526020936024602087019260051b850101933685116102a95760248101925b8584106118ea57602435888a82116102a9576118e46106e59236906004016117e7565b90612761565b83358981116102a9578201606060231982360301126102a95783519161190f83610fe5565b8682013561191c81610473565b83526044820135898401526064820135928b84116102a9576119468a9493898695369201016110d4565b868201528152019301926118c1565b346102a95760203660031901126102a95760043561197281610473565b6065546001600160a01b039061198b9082163314611ed8565b81161561199b576106e590613dbc565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346102a9576020806003193601126102a957600490813590611a1660026097541415611f5b565b6002609755611a268215156123c5565b611a2f826132af565b5f5b61013054811015611e8257611a4b61058461058483614495565b603554604080516370a0823160e01b8152308882019081529194936001600160a01b0393848216939192918890839081906020010381875afa918215610716575f92611e63575b508115611e5557308414611e5557865163313ce56760e01b81529188838c81885afa9081156107165760ff8b92611ad1955f91611e3e57501692613353565b908661013293611aea610584865460018060a01b031690565b9086821614611ddb575061013654611b609190611b0f906001600160a01b0316610584565b8554611b23906001600160a01b0316610584565b90848d8b5195869485938493630b4c774160e11b85528401604090610bb892949394606082019560018060a01b0380921683521660208201520152565b03915afa80156107165785915f91611dbe575b5061013554611b96908590611b90906001600160a01b0316610584565b856139e4565b1615611cdb578254611bbe9230929091611bb8906001600160a01b0316610584565b90613c58565b91611bc8836133fe565b9088611be3610584610584610584875460018060a01b031690565b875163a9059cbb60e01b80825233938201938452602084018690529290918a9183919082905f90829060400103925af191821561071657611c7b611c54611c486105848f966105848f9b8c5f9961058494611cbd575b5050546001600160a01b031690565b9560655416968961241d565b9951998a96879586948552840160209093929193604081019460018060a01b031681520152565b03925af190811561071657600193611c9a92611ca0575b50151561243f565b01611a31565b611cb690863d881161070f576107008183611069565b505f611c92565b81611cd392903d1061070f576107008183611069565b508c5f611c39565b61013354611d129290611cf6906001600160a01b0316610584565b8454611d0a906001600160a01b0316610584565b903393613b5d565b91611d1c836133fe565b9088611d37610584610584610584875460018060a01b031690565b875163a9059cbb60e01b80825233938201938452602084018690529290918a9183919082905f90829060400103925af191821561071657611d9b611c54611c486105848f966105848f9b8c5f9961058494611cbd575050546001600160a01b031690565b03925af190811561071657600193611db992611ca05750151561243f565b611c9a565b611dd59150893d8b11610cf957610ceb8183611069565b5f611b73565b965163a9059cbb60e01b8152338b8201908152602081019490945296909450869350918391505f90829060400103925af191821561071657600192611e21575b50611c9a565b611e3790843d861161070f576107008183611069565b505f611e1b565b610af191508c8d3d10610af757610ae98183611069565b505050505060019150611c9a565b611e7b919250883d8a116107495761073a8183611069565b905f611a92565b7fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5610b7a84610b62813361341d565b346102a95760803660031901126102a95760206102f4606435604435602435600435613353565b15611edf57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90600182811c92168015611f51575b6020831014611f3d57565b634e487b7160e01b5f52602260045260245ffd5b91607f1691611f32565b15611f6257565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b634e487b7160e01b5f52601160045260245ffd5b9064e8d4a51000918281029281840414901517156102fc57565b818102929181159184041417156102fc57565b8115611ff2570490565b634e487b7160e01b5f52601260045260245ffd5b908160209103126102a9575190565b6040513d5f823e3d90fd5b1561202757565b60405162461bcd60e51b815260206004820152602260248201527f546f74616c2042414c554e4920737570706c792063616e6e6f74206265207a65604482015261726f60f01b6064820152608490fd5b1561207e57565b60405162461bcd60e51b815260206004820152601c60248201527f555344432062616c616e636520697320696e73756666696369656e74000000006044820152606490fd5b156120ca57565b60405162461bcd60e51b815260206004820152601960248201527f436865636b2074686520746f6b656e20616c6c6f77616e6365000000000000006044820152606490fd5b908160209103126102a9575180151581036102a95790565b94939192909260405161213981611018565b600681526020906542616c756e6960d01b60208201526040519161215c83611018565b600683526542414c554e4960d01b602084015261219060ff5f5460081c1661218381613195565b61218b614269565b613195565b8151916001600160401b038311611000576121b5836121b0603654611f23565b614279565b602091601f841160011461232c5750936122026122dc96946121fa856122b9966122ff9d9e966122739a5f92612321575b50508160011b915f199060031b1c19161790565b603655614353565b61220a6131f5565b612212613212565b61221a613226565b6122233061306f565b61222f6101f461012d55565b61223a601e61012e55565b61224661271061012f55565b61013280546001600160a01b0319166001600160a01b039384161790559096879485929161229691849190565b6101338054919092166001600160a01b03166001600160a01b0319909116179055565b6101348054919092166001600160a01b03166001600160a01b0319909116179055565b6101358054919092166001600160a01b03166001600160a01b0319909116179055565b6101368054919092166001600160a01b03166001600160a01b0319909116179055565b6101325461231e90612319906001600160a01b0316610584565b613246565b50565b015190505f806121e6565b60365f529190601f1984167f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b8935f905b8282106123ad575050946001856122ff9c9d956122739995612202956122b9996122dc9d9b10612395575b505050811b01603655614353565b01515f1960f88460031b161c191690555f8080612387565b8060018697829497870151815501960194019061235c565b156123cc57565b60405162461bcd60e51b815260206004820152601060248201526f125b9cdd59999a58da595b9d0810905360821b6044820152606490fd5b908160209103126102a9575160ff811681036102a95790565b919082039182116102fc57565b908160209103126102a9575161039081610473565b1561244657565b60405162461bcd60e51b815260206004820152601760248201527f53776170204661696c65642c20547279204275726e28290000000000000000006044820152606490fd5b6040516370a0823160e01b8152306004820152906001600160a01b0390602080846024818686165afa938415610716575f94612618575b50610136546124d9906001600160a01b0316610584565b9261253182610132956124f5610584885460018060a01b031690565b604051630b4c774160e11b81526001600160a01b0380891660048301529091166024820152610bb8604482015292839190829081906064820190565b03915afa928315610716575f936125f9575b505061013554612561908690611b90906001600160a01b0316610584565b16158315158115806125f2575b1561259a575050905461109792612593923092611bb8906001600160a01b0316610584565b151561243f565b919291816125ea575b506125ad57505050565b61013354611097936125939390916125cd906001600160a01b0316610584565b92543093906125e4906001600160a01b0316610584565b91613b5d565b90505f6125a3565b508061256e565b612610929350803d10610cf957610ceb8183611069565b905f80612543565b816126309295503d86116107495761073a8183611069565b925f6124c2565b919082018092116102fc57565b1561264b57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b6065546001600160a01b03906126be9082163314611ed8565b5f805160206147bc8339815191529281845416906126db846144b6565b805115801590612759575b612748575b5061270b6127075f8051602061477c8339815191525460ff1690565b1590565b612716575b50505050565b610eb8610ebe9261273f95610e595f8051602061477c833981519152600160ff19825416179055565b5f808080612710565b6127529084614574565b505f6126eb565b5060016126e6565b9061277f9161277560026097541415611f5b565b60026097556128bf565b6001609755565b1561278d57565b60405162461bcd60e51b81526020600482015260156024820152741059d95b9d08199858dd1bdc9e481b9bdd081cd95d605a1b6044820152606490fd5b906127d4826117d0565b6127e16040519182611069565b82815280926127f2601f19916117d0565b0190602036910137565b634e487b7160e01b5f52603260045260245ffd5b8051821015610fcc5760209160051b010190565b92916040916040850192604086528151809452606093606087019460608260051b890101956020809501935f925b8484106128705750505050505093610390939481840391015261120d565b90919293949786806128af600193858f8e8991605f19908503018b5251878060a01b03815116845285810151868501520151918189820152019061035b565b9a01940194019294939190612852565b610137549091906128d8906001600160a01b0316610584565b6001600160a01b03916128ee8284161515612786565b60408051639b76a5cd60e01b815233600480830191909152909660209591949293929091908690899060249082905f905af1978815610716575f98612d7c575b5061293983516127ca565b9161294484516127ca565b975f5b8551811015612a1d57806129a561299461270761297761296a6129da968c612810565b516001600160a01b031690565b6001600160a01b03165f9081526101316020526040902054151590565b61299e8389612810565b9015159052565b89896129ba61058461058461296a868d612810565b8a516370a0823160e01b8152309281019283529485928391829160200190565b03915afa8015610716576001925f91612a00575b506129f9828d612810565b5201612947565b612a1791508b3d8d116107495761073a8183611069565b5f6129ee565b509092918096949916803b156102a957895f91612a4f93838951809681958294630eedc3c560e41b84528c8401612824565b03925af1801561071657612d63575b505f5b8851811015612d5857612a7761296a828b612810565b85516370a0823160e01b815230868201908152919291888416908a90839081906020010381845afa918215610716575f92612d39575b5061013654612ac4906001600160a01b0316610584565b610133549094908890612adf906001600160a01b0316610584565b8a51630b4c774160e11b8082526001600160a01b0380861694830194855283166020850152610bb860408501529097919390929091908e90899081906060010381845afa978815610716578e938d8d925f9b612d16575b50519081526001600160a01b039384169181019182529490921660208301526101f460408301528391829081906060015b03915afa948515610716578a915f96612cf5575b5081161594851595612ce9575b5050612b9d612b978487612810565b51151590565b80612ce2575b612cd3575b612bbc612bb5848d612810565b518361241d565b9315612c7757508a8991612bd0848d612810565b5110612be3575b50506001915001612a61565b612c0a61058461058461296a86612c0461066e612c3f9a61012e5490611fd5565b95612810565b89606554165f8a5180978195829463a9059cbb60e01b84528d840160209093929193604081019460018060a01b031681520152565b03925af191821561071657600192612c5a575b50878a612bd7565b612c7090893d8b1161070f576107008183611069565b505f612c52565b965163a9059cbb60e01b8152339681019687526020870193909352509298509596508694508593928492505f915082906040015b03925af1801561071657612cbd575050565b8161231e92903d1061070f576107008183611069565b612cdc81614432565b50612ba8565b5083612ba3565b1615159350885f612b88565b82919650612d0f908d803d10610cf957610ceb8183611069565b9590612b7b565b612b67919b50612d3290873d8911610cf957610ceb8183611069565b9a90612b36565b612d519192508a3d8c116107495761073a8183611069565b905f612aad565b505095505050505050565b80612d70612d7692611005565b8061029f565b5f612a5e565b612d94919850863d8811610cf957610ceb8183611069565b965f61292e565b15612da257565b60405162461bcd60e51b815260206004820152601b60248201527f546f74616c20737570706c792063616e6e6f74206265207a65726f00000000006044820152606490fd5b6001600160a01b038082169291908315612ec2578216938415612e725780612e5c7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92594612e47612e6d9560018060a01b03165f52603460205260405f2090565b9060018060a01b03165f5260205260405f2090565b556040519081529081906020820190565b0390a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b5f80610130545b808210612f2657505090565b9091612f3761058461058485614495565b6040516370a0823160e01b81523060048201529091602080836024816001600160a01b0388165afa93841561071657600194612f8594612f7f935f92612f8d575b505061371f565b90612637565b920190612f1a565b612fa39250803d106107495761073a8183611069565b5f80612f78565b6040516323b872dd60e01b602082019081526001600160a01b039384166024830152938316604482015260648082019590955293845261304a93925f928392612ff28661104e565b1690826040519561300287611018565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020880152613038843b151561472f565b51925af1613044614545565b906146eb565b805180613055575050565b8160208061306a93611097950101910161210f565b61420a565b6001600160a01b0381169081156130e957603554670de0b6b3a7640000918282018092116102fc576035919091556001600160a01b03165f90815260336020526040902080549182018092116102fc57555f5f805160206147dc83398151915260405180612e6d8190670de0b6b3a7640000602083019252565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b6001600160a01b038116919082156130e957603554908282018092116102fc576035919091556001600160a01b03165f9081526033602052604090208054908282018092116102fc575f925f805160206147dc8339815191529260209255604051908152a3565b1561319c57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61320960ff5f5460081c1661218381613195565b61109733613dbc565b61277f60ff5f5460081c1661218b81613195565b61323660ff5f5460081c16613195565b61323e614269565b611097614269565b610390906001600160a01b0316614432565b1561325f57565b60405162461bcd60e51b815260206004820152602260248201527f4d696e696d756d206275726e20616d6f756e7420697320302e30312042414c556044820152614e4960f01b6064820152608490fd5b610132546132c5906001600160a01b0316610584565b6040516370a0823160e01b815230600482015290602090829060249082905afa8015610716576103e8915f91613326575b50101580613319575b6133065750565b662386f26fc10000611097911015613258565b50600160355410156132ff565b61333f915060203d6020116107495761073a8183611069565b5f6132f6565b604d81116102fc57600a0a90565b92919091613362841515612d9b565b601281116133b95760128110156133aa5760120391601283116102fc576133a56105489261339961339f6103909761339988613345565b90611fe8565b95613345565b611fd5565b50610390929161054891611fd5565b60405162461bcd60e51b815260206004820152601e60248201527f546f6b656e20646563696d616c732073686f756c64206265203c3d20313800006044820152606490fd5b61012f5461012e548103918183116102fc576103909261054891611fd5565b6001600160a01b0381169081156134f3576001600160a01b0381165f908152603360205260409020548381106134a357835f805160206147dc8339815191529261347e5f96612e6d94039160018060a01b03165f52603360205260405f2090565b5561349361348e8260355461241d565b603555565b6040519081529081906020820190565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b1561354957565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b156135a157565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b916001600160a01b0380841692909183156136a75761368a825f805160206147dc83398151915294612e6d94169661362e881515613542565b6001600160a01b0381165f908152603360205260409020613670908590546136588282101561359a565b039160018060a01b03165f52603360205260405f2090565b556001600160a01b03165f90815260336020526040902090565b613695828254612637565b90556040519081529081906020820190565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b9060ff8091169116039060ff82116102fc57565b60ff16604d81116102fc57600a0a90565b60405163313ce56760e01b80825291929091906020906001600160a01b039081168285600481845afa948515610716575f956138c9575b50610132546001600160a01b03169182166040519485528385600481845afa948515610716575f956138aa575b50811461389c57610134546137e59392839290916137a9906001600160a01b0316610584565b60405163802431fb60e01b81526001600160a01b0392831660048201529190921660248201526001604482015293849190829081906064820190565b03915afa9182915f9361387d575b505061380157505050505f90565b9060ff83169260ff8216841461386a57613820601292613825926136fa565b61370e565b9210613850579161383c6138429261039094611fd5565b90611fd5565b670de0b6b3a7640000900490565b61383c826138646138429461039096611fd5565b92611fd5565b505061384291506133a561039093611fbb565b613894929350803d106107495761073a8183611069565b905f806137f3565b505050505061039090611fbb565b6138c2919550843d8611610af757610ae98183611069565b935f613783565b6138e1919550833d8511610af757610ae98183611069565b935f613756565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526020939216908381604481855afa908115610716575f916139c7575b505f191161393457505050565b60405163095ea7b360e01b8082526001600160a01b03841660048301525f6024830152909290918484806044810103815f855af192831561071657612cab9486946139aa575b506040519081526001600160a01b0390921660048301525f196024830152909283919082905f9082906044820190565b6139c090853d871161070f576107008183611069565b505f61397a565b6139de9150843d86116107495761073a8183611069565b5f613927565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152602094921691908481604481865afa80156107165782915f91613af6575b5010613a315750505050565b60405163095ea7b360e01b8082526001600160a01b03851660048301525f6024830152939092908584806044810103815f865af1801561071657613aa59587955f92613ad9575b506040519081526001600160a01b0390921660048301526024820193909352938492839182906044820190565b03925af1801561071657613abb575b8080612710565b81613ad192903d1061070f576107008183611069565b505f80613ab4565b613aef90873d891161070f576107008183611069565b505f613a78565b613b0d9150863d88116107495761073a8183611069565b5f613a25565b6020815260a06080613b30845183602086015260c085019061035b565b93600180841b03602082015116604085015260408101516060850152606081015182850152015191015290565b92613be55f95613bcb602096613bbd613c2a976040519788938b850191926042936bffffffffffffffffffffffff19809360601b1684528261017760eb1b9182601487015260601b166017850152602b84015260601b16602e8201520190565b03601f198101865285611069565b613bd361108a565b9384526001600160a01b031685840152565b42604083015260608201526080810184905261013554613c0d906001600160a01b0316610584565b9060405194858094819363c04b8d5960e01b835260048301613b13565b03925af1908115610716575f91613c3f575090565b610390915060203d6020116107495761073a8183611069565b602092613ca85f95613c90613c2a95613c81613c72611099565b6001600160a01b039097168752565b6001600160a01b031685880152565b610bb860408501526001600160a01b03166060840152565b42608083015260a082015260c0810184905260e0810184905261013554613cd7906001600160a01b0316610584565b6040805163414bf38960e01b815283516001600160a01b0390811660048301526020850151811660248301529184015162ffffff1660448201526060840151821660648201526080840151608482015260a084015160a482015260c084015160c482015260e0909301511660e4830152909384928391908290610104820190565b15613d5f57565b60405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608490fd5b606580546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b15613e0b57565b60405162461bcd60e51b815260206004820152602d60248201527f417262697472616765206661696c65643a20696e73756666696369656e74204260448201526c414c554e492062616c616e636560981b6064820152608490fd5b919060408352602260408401527f416d6f756e74204f7574204d696e20666f722042414c554e49202d3e20555344606084015261219d60f11b6080840152602060a08401930152565b15613eb657565b60405162461bcd60e51b815260206004820152602c60248201527f417262697472616765206661696c65643a20696e73756666696369656e74206f60448201526b1d5d1c1d5d08185b5bdd5b9d60a21b6064820152608490fd5b919060408352602260408401527f416d6f756e74204f7574204d696e20666f722055534443202d3e2042414c554e606084015261249d60f11b6080840152602060a08401930152565b15613f6057565b60405162461bcd60e51b815260206004820152601d60248201527f41726269747261676520646964206e6f742070726f6669742053454c4c0000006044820152606490fd5b92909215614071576110979281613fca613fc261406a9486611fd5565b612710900490565b9161403a613fc2604051937fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b58580614003898499613e66565b0390a161403461402c6101329730908b6140266105848c5460018060a01b031690565b3061466c565b948511613eaf565b83611fd5565b91604051806140498582613f10565b0390a191543092908390614065906001600160a01b0316610584565b61466c565b1015613f59565b60405162461bcd60e51b815260206004820152602b60248201527f417262697472616765206661696c65643a20696e73756666696369656e74205560448201526a5344432062616c616e636560a81b6064820152608490fd5b156140d157565b60405162461bcd60e51b815260206004820152601c60248201527f41726269747261676520646964206e6f742070726f66697420425559000000006044820152606490fd5b93614122919394611fe8565b670de0b6b3a7640000908181029181830414901517156102fc5761109793826141fb938311614202575b82614158911015613e04565b614165613fc28286611fd5565b916141d2613fc2604051937fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b5858061419e898499613f10565b0390a16140346141c9610132976141be6105848a5460018060a01b031690565b908b3092309061466c565b94851015613eaf565b91604051806141e18582613e66565b0390a19154309290614026906001600160a01b0316610584565b10156140ca565b91508161414c565b1561421157565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b61109760ff5f5460081c16613195565b601f8111614285575050565b60365f527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b8906020601f840160051c830193106142dc575b601f0160051c01905b8181106142d1575050565b5f81556001016142c6565b90915081906142bd565b601f81116142f2575050565b60375f527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae906020601f840160051c83019310614349575b601f0160051c01905b81811061433e575050565b5f8155600101614333565b909150819061432a565b9081516001600160401b0381116110005761437881614373603754611f23565b6142e6565b602080601f83116001146143ad575081906143a893945f926123215750508160011b915f199060031b1c19161790565b603755565b90601f198316946143df60375f527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae90565b925f905b87821061441a575050836001959610614402575b505050811b01603755565b01515f1960f88460031b161c191690555f80806143f7565b806001859682949686015181550195019301906143e3565b805f526101318060205260405f2054155f1461448f576101308054680100000000000000008110156110005760018101808355811015610fcc5783905f8051602061479c833981519152015554915f5260205260405f2055600190565b50505f90565b6101308054821015610fcc575f525f8051602061479c833981519152015490565b803b156144ea575f805160206147bc83398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b3d1561456f573d90614556826110b9565b916145646040519384611069565b82523d5f602084013e565b606090565b90813b156145e0575f816103909360208394519201905af4614594614545565b604051916145a183610fe5565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b60408401526146eb565b60405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b61463d816144b6565b6001600160a01b03167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2565b9092613c2a926146be5f966146a6602097614697614688611099565b6001600160a01b039098168852565b6001600160a01b031686890152565b610bb860408601526001600160a01b03166060850152565b42608084015260a083015260c082015260e0810184905261013554613cd7906001600160a01b0316610584565b909190156146f7575090565b8151156147075750805190602001fd5b60405162461bcd60e51b81526020600482015290819061472b90602483019061035b565b0390fd5b1561473657565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fdfe4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91432f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf34360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212205995e89e4535631d2341d0bda9e7189fd4076dde7608a00cc2ba2ebe7837ce9564736f6c63430008190033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is upgraded."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "arbitrage(uint256)": {
        "details": "Performs arbitrage based on the market price and unit price. If the market price is lower than the unit price, it buys BALUNI tokens using USDC. If the market price is higher than the unit price, it sells BALUNI tokens for USDC. The function ensures that the necessary balances and approvals are in place before performing the swaps."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burnERC20(uint256)": {
        "details": "Burns a specified amount of BAL tokens from the caller's balance.",
        "params": {
          "burnAmount": "The amount of BAL tokens to burn."
        }
      },
      "burnUSDC(uint256)": {
        "details": "Burns a specified amount of BAL tokens and performs token swaps on multiple tokens.",
        "params": {
          "burnAmount": "The amount of BAL tokens to burn."
        }
      },
      "calculateTokenShare(uint256,uint256,uint256,uint256)": {
        "details": "Calculates the token share based on the total Baluni supply, total ERC20 balance, Baluni amount, and token decimals.",
        "params": {
          "baluniAmount": "The amount of Baluni tokens.",
          "tokenDecimals": "The number of decimals for the ERC20 token.",
          "totalBaluni": "The total supply of Baluni tokens.",
          "totalERC20Balance": "The total balance of the ERC20 token."
        },
        "returns": {
          "_0": "The calculated token share."
        }
      },
      "changeAgentFactory(address)": {
        "details": "Changes the address of the agent factory contract. Can only be called by the contract owner.",
        "params": {
          "_agentFactory": "The new address of the agent factory contract."
        }
      },
      "changeBpsFee(uint256)": {
        "details": "Changes the basis points fee for the contract.",
        "params": {
          "_newFee": "The new basis points fee to be set."
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "execute((address,uint256,bytes)[],address[])": {
        "details": "Executes a series of calls to a BaluniV1Agent contract and handles token returns.",
        "params": {
          "calls": "An array of IBaluniV1Agent.Call structs representing the calls to be executed.",
          "tokensReturn": "An array of addresses representing the tokens to be returned."
        }
      },
      "getAgentAddress(address)": {
        "details": "Retrieves the agent address associated with a user.",
        "params": {
          "_user": "The user's address."
        },
        "returns": {
          "_0": "The agent address."
        }
      },
      "getBpsFee()": {
        "details": "Returns the basis points fee.",
        "returns": {
          "_0": "The basis points fee as a uint256 value."
        }
      },
      "getUSDCShareValue(uint256)": {
        "details": "Calculates the value of a given amount of Baluni tokens in USDC.",
        "params": {
          "amount": "The amount of Baluni tokens."
        },
        "returns": {
          "_0": "The calculated value of the Baluni tokens in USDC."
        }
      },
      "getUnitPrice()": {
        "details": "Returns the unit price of the token in USDC.",
        "returns": {
          "_0": "The unit price of the token in USDC."
        }
      },
      "getVersion()": {
        "details": "Returns the version of the contract.",
        "returns": {
          "_0": "The version string."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(address,address,address,address,address)": {
        "details": "Initializes the BaluniV1Router contract. It sets the initial values for various variables and mints 1 ether to the contract's address. It also sets the USDC token address, WNATIVE token address, oracle address, Uniswap router address, and Uniswap factory address. Finally, it adds the USDC token address to the tokens set."
      },
      "liquidate(address)": {
        "details": "Liquidates the specified token by swapping it for USDC.",
        "params": {
          "token": "The address of the token to be liquidated."
        }
      },
      "liquidateAll()": {
        "details": "Liquidates all tokens in the contract. This function iterates through all the tokens in the contract and calls the `liquidate` function for each token. Can only be called by the contract owner."
      },
      "listAllTokens()": {
        "details": "Returns an array of all listed tokens.",
        "returns": {
          "_0": "An array of all listed tokens."
        }
      },
      "mintWithUSDC(uint256)": {
        "details": "Mints a specified amount of BALUNI tokens in exchange for USDC.",
        "params": {
          "balAmountToMint": "The amount of BALUNI tokens to mint."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredUSDCtoMint(uint256)": {
        "details": "Calculates the amount of USDC required to mint a given amount of BAL tokens.",
        "params": {
          "balAmountToMint": "The amount of BAL tokens to be minted."
        },
        "returns": {
          "_0": "The amount of USDC required to mint the specified amount of BAL tokens."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "tokenValuation(uint256,address)": {
        "details": "Calculates the valuation of a given amount of a specific ERC20 token.",
        "params": {
          "amount": "The amount of the ERC20 token.",
          "token": "The address of the ERC20 token."
        },
        "returns": {
          "_0": "The calculated valuation of the ERC20 token."
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "totalValuation()": {
        "details": "Returns the total valuation of the Baluni ecosystem.",
        "returns": {
          "_0": "The total valuation of the Baluni ecosystem."
        }
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "arbitrage(uint256)": {
        "notice": "This function can only be called by external accounts."
      },
      "burnERC20(uint256)": {
        "notice": "This function requires the caller to have a balance of at least `burnAmount` BAL tokens.The function also checks the USDC balance before burning the tokens.After burning the tokens, the function transfers a proportional share of each ERC20 token held by the contract to the caller.The share is calculated based on the total supply of BAL tokens, the balance of each ERC20 token, and the decimals of each token.Finally, the function emits a `Burn` event with the caller's address and the amount of tokens burned."
      },
      "execute((address,uint256,bytes)[],address[])": {
        "notice": "This function requires the agentFactory to be set and creates a new agent if necessary.If a token is new and a Uniswap pool exists for it, the token is added to the tokens set.If no Uniswap pool exists for a token, the token balance is transferred back to the caller."
      },
      "liquidate(address)": {
        "notice": "The contract must have sufficient approval to spend the specified token.If a pool exists for the token and USDC on Uniswap, a direct swap is performed.If no pool exists, a multi-hop swap is performed through the WNATIVE token.If the swap fails, the `burn` function should be called to handle the failed swap."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 540,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 543,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1964,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 795,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 801,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 803,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 805,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 807,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1348,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 124,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 732,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 775,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 522,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 717,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2858,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "_MAX_BPS_FEE",
        "offset": 0,
        "slot": "301",
        "type": "t_uint256"
      },
      {
        "astId": 2860,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "_BPS_FEE",
        "offset": 0,
        "slot": "302",
        "type": "t_uint256"
      },
      {
        "astId": 2862,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "_BPS_BASE",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 2865,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "tokens",
        "offset": 0,
        "slot": "304",
        "type": "t_struct(AddressSet)2337_storage"
      },
      {
        "astId": 2868,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "USDC",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(IERC20Upgradeable)1427"
      },
      {
        "astId": 2871,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "WNATIVE",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IERC20MetadataUpgradeable)1452"
      },
      {
        "astId": 2874,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "oracle",
        "offset": 0,
        "slot": "308",
        "type": "t_contract(IOracle)5149"
      },
      {
        "astId": 2877,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "309",
        "type": "t_contract(ISwapRouter)2821"
      },
      {
        "astId": 2880,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "uniswapFactory",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IUniswapV3Factory)2707"
      },
      {
        "astId": 2883,
        "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
        "label": "agentFactory",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(IBaluniV1AgentFactory)5119"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBaluniV1AgentFactory)5119": {
        "encoding": "inplace",
        "label": "contract IBaluniV1AgentFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20MetadataUpgradeable)1452": {
        "encoding": "inplace",
        "label": "contract IERC20MetadataUpgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1427": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)5149": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)2821": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV3Factory)2707": {
        "encoding": "inplace",
        "label": "contract IUniswapV3Factory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2337_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 2336,
            "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2036_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2036_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2031,
            "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2035,
            "contract": "contracts/BaluniV1Router.sol:BaluniV1Router",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}