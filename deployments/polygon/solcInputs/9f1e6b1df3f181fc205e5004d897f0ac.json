{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n        __ERC1967Upgrade_init_unchained();\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            _functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n        __ERC1967Upgrade_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/BaluniV1Router.sol": {
      "content": "// SPDX-License-Identifier: GNU AGPLv3\r\npragma solidity 0.8.25;\r\n/**\r\n *  __                  __                      __\r\n * /  |                /  |                    /  |\r\n * $$ |____    ______  $$ | __    __  _______  $$/\r\n * $$      \\  /      \\ $$ |/  |  /  |/       \\ /  |\r\n * $$$$$$$  | $$$$$$  |$$ |$$ |  $$ |$$$$$$$  |$$ |\r\n * $$ |  $$ | /    $$ |$$ |$$ |  $$ |$$ |  $$ |$$ |\r\n * $$ |__$$ |/$$$$$$$ |$$ |$$ \\__$$ |$$ |  $$ |$$ |\r\n * $$    $$/ $$    $$ |$$ |$$    $$/ $$ |  $$ |$$ |\r\n * $$$$$$$/   $$$$$$$/ $$/  $$$$$$/  $$/   $$/ $$/\r\n *\r\n *\r\n *                  ,-\"\"\"\"-.\r\n *                ,'      _ `.\r\n *               /       )_)  \\\r\n *              :              :\r\n *              \\              /\r\n *               \\            /\r\n *                `.        ,'\r\n *                  `.    ,'\r\n *                    `.,'\r\n *                     /\\`.   ,-._\r\n *                         `-'    \\__\r\n *                              .\r\n *               s                \\\r\n *                                \\\\\r\n *                                 \\\\\r\n *                                  >\\/7\r\n *                              _.-(6'  \\\r\n *                             (=___._/` \\\r\n *                                  )  \\ |\r\n *                                 /   / |\r\n *                                /    > /\r\n *                               j    < _\\\r\n *                           _.-' :      ``.\r\n *                           \\ r=._\\        `.\r\n */\r\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\r\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\r\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\r\n\r\nimport './interfaces/IOracle.sol';\r\nimport './interfaces/IBaluniV1AgentFactory.sol';\r\nimport './interfaces/IBaluniV1Agent.sol';\r\nimport './interfaces/IBaluniV1MarketOracle.sol';\r\n\r\ncontract BaluniV1Router is ERC20Upgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {\r\n  using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n  struct Call {\r\n    address to;\r\n    uint256 value;\r\n    bytes data;\r\n  }\r\n\r\n  uint256 public _MAX_BPS_FEE;\r\n  uint256 public _BPS_FEE;\r\n  uint256 public _BPS_BASE;\r\n\r\n  EnumerableSetUpgradeable.AddressSet private tokens;\r\n  IERC20Upgradeable private USDC;\r\n  IERC20MetadataUpgradeable private WNATIVE;\r\n  IOracle private oracle;\r\n  ISwapRouter private uniswapRouter;\r\n  IUniswapV3Factory private uniswapFactory;\r\n  IBaluniV1AgentFactory public agentFactory;\r\n\r\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\r\n\r\n  event Execute(address user, IBaluniV1Agent.Call[] calls, address[] tokensReturn);\r\n  event Burn(address user, uint256 value);\r\n  event Mint(address user, uint256 value);\r\n  event ChangeBpsFee(uint256 newFee);\r\n  event ChangeRewardPool(address pool);\r\n  event Log(string message, uint256 value);\r\n\r\n  /**\r\n   * @dev Initializes the BaluniV1Router contract.\r\n   * It sets the initial values for various variables and mints 1 ether to the contract's address.\r\n   * It also sets the USDC token address, WNATIVE token address, oracle address, Uniswap router address, and Uniswap factory address.\r\n   * Finally, it adds the USDC token address to the tokens set.\r\n   */\r\n  function initialize(\r\n    address _usdc,\r\n    address _wnative,\r\n    address _oracle,\r\n    address _uniRouter,\r\n    address _uniFactory\r\n  ) public initializer {\r\n    __ERC20_init('Baluni', 'BALUNI');\r\n    __Ownable_init();\r\n    __ReentrancyGuard_init();\r\n    __UUPSUpgradeable_init();\r\n    _mint(address(this), 1 ether);\r\n\r\n    _MAX_BPS_FEE = 500;\r\n    _BPS_FEE = 30; // 0.3%.\r\n    _BPS_BASE = 10000;\r\n    USDC = IERC20Upgradeable(_usdc);\r\n    WNATIVE = IERC20MetadataUpgradeable(_wnative);\r\n    oracle = IOracle(_oracle); // 1inch Spot Aggregator\r\n    uniswapRouter = ISwapRouter(_uniRouter);\r\n    uniswapFactory = IUniswapV3Factory(_uniFactory);\r\n    EnumerableSetUpgradeable.add(tokens, address(USDC));\r\n  }\r\n\r\n  function getTreasury() public view returns (address) {\r\n    return owner();\r\n  }\r\n\r\n  function upgradeTo(address newImplementation) external virtual override {\r\n    _authorizeUpgrade(newImplementation);\r\n    _upgradeToAndCallSecure(newImplementation, bytes(''), false);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to authorize an upgrade to a new implementation contract.\r\n   * @param newImplementation The address of the new implementation contract.\r\n   * @notice This function can only be called by the contract owner.\r\n   */\r\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\r\n\r\n  /**\r\n   * @dev Returns the basis points fee.\r\n   * @return The basis points fee as a uint256 value.\r\n   */\r\n  function getBpsFee() external view returns (uint256) {\r\n    return _BPS_FEE;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the unit price of the token in USDC.\r\n   * @return The unit price of the token in USDC.\r\n   */\r\n  function getUnitPrice() public view returns (uint256) {\r\n    return _calculateBaluniToUSDC(1e18);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an array of all listed tokens.\r\n   * @return An array of all listed tokens.\r\n   */\r\n  function listAllTokens() external view returns (address[] memory) {\r\n    return tokens.values();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the basis points fee for the contract.\r\n   * @param _newFee The new basis points fee to be set.\r\n   */\r\n  function changeBpsFee(uint256 _newFee) external onlyOwner {\r\n    _BPS_FEE = _newFee;\r\n    emit ChangeBpsFee(_newFee);\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the address of the agent factory contract.\r\n   * Can only be called by the contract owner.\r\n   * @param _agentFactory The new address of the agent factory contract.\r\n   */\r\n  function changeAgentFactory(address _agentFactory) external onlyOwner {\r\n    agentFactory = IBaluniV1AgentFactory(_agentFactory);\r\n  }\r\n\r\n  /**\r\n   * @dev Executes a series of calls to a BaluniV1Agent contract and handles token returns.\r\n   * @param calls An array of IBaluniV1Agent.Call structs representing the calls to be executed.\r\n   * @param tokensReturn An array of addresses representing the tokens to be returned.\r\n   * @notice This function requires the agentFactory to be set and creates a new agent if necessary.\r\n   * @notice If a token is new and a Uniswap pool exists for it, the token is added to the tokens set.\r\n   * @notice If no Uniswap pool exists for a token, the token balance is transferred back to the caller.\r\n   */\r\n  function execute(IBaluniV1Agent.Call[] memory calls, address[] memory tokensReturn) external nonReentrant {\r\n    require(address(agentFactory) != address(0), 'Agent factory not set');\r\n    address agent = agentFactory.getOrCreateAgent(msg.sender);\r\n    bool[] memory isTokenNew = new bool[](tokensReturn.length);\r\n    uint256[] memory tokenBalances = new uint256[](tokensReturn.length);\r\n\r\n    for (uint256 i = 0; i < tokensReturn.length; i++) {\r\n      isTokenNew[i] = !EnumerableSetUpgradeable.contains(tokens, tokensReturn[i]);\r\n      tokenBalances[i] = IERC20Upgradeable(tokensReturn[i]).balanceOf(address(this));\r\n    }\r\n\r\n    IBaluniV1Agent(agent).execute(calls, tokensReturn);\r\n\r\n    for (uint256 i = 0; i < tokensReturn.length; i++) {\r\n      address token = tokensReturn[i];\r\n      uint256 balance = IERC20Upgradeable(token).balanceOf(address(this));\r\n      address poolNative3000 = uniswapFactory.getPool(token, address(WNATIVE), 3000);\r\n      address poolNative500 = uniswapFactory.getPool(token, address(WNATIVE), 500);\r\n      bool poolExist = poolNative3000 != address(0) || poolNative500 != address(0);\r\n\r\n      if (isTokenNew[i] && poolExist) {\r\n        EnumerableSetUpgradeable.add(tokens, token);\r\n      }\r\n\r\n      uint256 amountReceived = balance - tokenBalances[i];\r\n\r\n      if (!poolExist) {\r\n        IERC20Upgradeable(token).transfer(msg.sender, amountReceived);\r\n        return;\r\n      }\r\n\r\n      if (balance > tokenBalances[i]) {\r\n        uint256 fee = (amountReceived * _BPS_FEE) / _BPS_BASE;\r\n        IERC20Upgradeable(tokensReturn[i]).transfer(getTreasury(), fee);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Liquidates the specified token by swapping it for USDC.\r\n   * @param token The address of the token to be liquidated.\r\n   * @notice The contract must have sufficient approval to spend the specified token.\r\n   * @notice If a pool exists for the token and USDC on Uniswap, a direct swap is performed.\r\n   * @notice If no pool exists, a multi-hop swap is performed through the WNATIVE token.\r\n   * @notice If the swap fails, the `burn` function should be called to handle the failed swap.\r\n   */\r\n  function liquidate(address token) public {\r\n    uint256 totalERC20Balance = IERC20Upgradeable(token).balanceOf(address(this));\r\n    address pool = uniswapFactory.getPool(token, address(USDC), 3000);\r\n    secureApproval(token, address(uniswapRouter), totalERC20Balance);\r\n    bool haveBalance = totalERC20Balance > 0;\r\n    if (pool != address(0) && haveBalance) {\r\n      uint256 singleSwapResult = _singleSwap(token, address(USDC), totalERC20Balance, address(this));\r\n      require(singleSwapResult > 0, 'Swap Failed, Try Burn()');\r\n    } else if (pool == address(0) && haveBalance) {\r\n      uint256 amountOutHop = _multiHopSwap(token, address(WNATIVE), address(USDC), totalERC20Balance, address(this));\r\n      require(amountOutHop > 0, 'Swap Failed, Try Burn()');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Liquidates all tokens in the contract.\r\n   * This function iterates through all the tokens in the contract and calls the `liquidate` function for each token.\r\n   * Can only be called by the contract owner.\r\n   */\r\n  function liquidateAll() public nonReentrant {\r\n    uint256 length = tokens.length();\r\n    for (uint256 i = 0; i < length; i++) {\r\n      address token = tokens.at(i);\r\n      liquidate(token);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specified amount of BAL tokens from the caller's balance.\r\n   * @param burnAmount The amount of BAL tokens to burn.\r\n   * @notice This function requires the caller to have a balance of at least `burnAmount` BAL tokens.\r\n   * @notice The function also checks the USDC balance before burning the tokens.\r\n   * @notice After burning the tokens, the function transfers a proportional share of each ERC20 token held by the contract to the caller.\r\n   * @notice The share is calculated based on the total supply of BAL tokens, the balance of each ERC20 token, and the decimals of each token.\r\n   * @notice Finally, the function emits a `Burn` event with the caller's address and the amount of tokens burned.\r\n   */\r\n  function burnERC20(uint256 burnAmount) external nonReentrant {\r\n    require(balanceOf(msg.sender) >= burnAmount, 'Insufficient BAL');\r\n    _checkUSDC(burnAmount);\r\n\r\n    for (uint256 i; i < tokens.length(); i++) {\r\n      address token = tokens.at(i);\r\n      uint256 totalBaluni = totalSupply();\r\n      uint256 totalERC20Balance = IERC20Upgradeable(token).balanceOf(address(this));\r\n\r\n      if (totalERC20Balance == 0 || token == address(this)) continue;\r\n\r\n      uint256 decimals = IERC20MetadataUpgradeable(token).decimals();\r\n      uint256 share = _calculateERC20Share(totalBaluni, totalERC20Balance, burnAmount, decimals);\r\n      uint256 amountAfterFee = _calculateNetAmountAfterFee(share);\r\n      IERC20Upgradeable(token).transfer(msg.sender, amountAfterFee);\r\n      IERC20Upgradeable(token).transfer(getTreasury(), share - amountAfterFee);\r\n    }\r\n    _burn(msg.sender, burnAmount);\r\n    emit Burn(msg.sender, burnAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specified amount of BAL tokens and performs token swaps on multiple tokens.\r\n   * @param burnAmount The amount of BAL tokens to burn.\r\n   */\r\n  function burnUSDC(uint256 burnAmount) external nonReentrant {\r\n    require(burnAmount > 0, 'Insufficient BAL');\r\n    _checkUSDC(burnAmount);\r\n\r\n    for (uint256 i; i < tokens.length(); i++) {\r\n      address token = tokens.at(i);\r\n      uint256 totalBaluni = totalSupply();\r\n      uint256 totalERC20Balance = IERC20Upgradeable(token).balanceOf(address(this));\r\n\r\n      if (totalERC20Balance > 0 == false) continue;\r\n\r\n      if (token == address(this)) continue;\r\n\r\n      uint256 decimals = IERC20MetadataUpgradeable(token).decimals();\r\n      uint256 burnAmountToken = _calculateERC20Share(totalBaluni, totalERC20Balance, burnAmount, decimals);\r\n\r\n      if (token == address(USDC)) {\r\n        IERC20Upgradeable(USDC).transfer(msg.sender, burnAmountToken);\r\n        continue;\r\n      }\r\n\r\n      address pool = uniswapFactory.getPool(token, address(USDC), 3000);\r\n      secureApproval(token, address(uniswapRouter), burnAmountToken);\r\n\r\n      if (pool != address(0)) {\r\n        uint256 amountOut = _singleSwap(token, address(USDC), burnAmountToken, address(this));\r\n        uint256 amountAfterFee = _calculateNetAmountAfterFee(amountOut);\r\n        IERC20Upgradeable(address(USDC)).transfer(msg.sender, amountAfterFee);\r\n        IERC20Upgradeable(address(USDC)).transfer(getTreasury(), amountOut - amountAfterFee);\r\n        require(amountOut > 0, 'Swap Failed, Try Burn()');\r\n      } else {\r\n        uint256 amountOutHop = _multiHopSwap(token, address(WNATIVE), address(USDC), burnAmountToken, msg.sender);\r\n        uint256 amountAfterFee = _calculateNetAmountAfterFee(amountOutHop);\r\n        IERC20Upgradeable(address(USDC)).transfer(msg.sender, amountAfterFee);\r\n        IERC20Upgradeable(address(USDC)).transfer(getTreasury(), amountOutHop - amountAfterFee);\r\n        require(amountOutHop > 0, 'Swap Failed, Try Burn()');\r\n      }\r\n    }\r\n    _burn(msg.sender, burnAmount);\r\n    emit Burn(msg.sender, burnAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Retrieves the agent address associated with a user.\r\n   * @param _user The user's address.\r\n   * @return The agent address.\r\n   */\r\n  function getAgentAddress(address _user) external view returns (address) {\r\n    return agentFactory.getAgentAddress(_user);\r\n  }\r\n\r\n  /**\r\n   * @dev Mints a specified amount of BALUNI tokens in exchange for USDC.\r\n   * @param balAmountToMint The amount of BALUNI tokens to mint.\r\n   */\r\n  function mintWithUSDC(uint256 balAmountToMint) public nonReentrant {\r\n    uint256 totalUSDValuation = _totalValuation();\r\n    uint256 totalBalSupply = totalSupply();\r\n    uint256 usdcRequired = (balAmountToMint * totalUSDValuation) / totalBalSupply;\r\n    USDC.safeTransferFrom(msg.sender, address(this), usdcRequired / 1e12);\r\n    uint256 balance = IERC20Upgradeable(USDC).balanceOf(msg.sender);\r\n    uint256 allowed = USDC.allowance(msg.sender, address(this));\r\n    require(totalBalSupply > 0, 'Total BALUNI supply cannot be zero');\r\n    require(balance >= usdcRequired / 1e12, 'USDC balance is insufficient');\r\n    require(allowed >= usdcRequired / 1e12, 'Check the token allowance');\r\n\r\n    _mint(msg.sender, balAmountToMint);\r\n    emit Mint(msg.sender, balAmountToMint);\r\n\r\n    uint256 fee = ((usdcRequired / 1e12) * _BPS_FEE) / _BPS_BASE;\r\n    IERC20Upgradeable(address(USDC)).transfer(getTreasury(), fee);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount of USDC required to mint a given amount of BAL tokens.\r\n   * @param balAmountToMint The amount of BAL tokens to be minted.\r\n   * @return The amount of USDC required to mint the specified amount of BAL tokens.\r\n   */\r\n  function requiredUSDCtoMint(uint256 balAmountToMint) public view returns (uint256) {\r\n    uint256 totalUSDValuation = _totalValuation();\r\n    uint256 totalBalSupply = totalSupply();\r\n    uint256 usdcRequired = (balAmountToMint * totalUSDValuation) / totalBalSupply;\r\n    return usdcRequired / 1e12;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the token share based on the total Baluni supply, total ERC20 balance, Baluni amount, and token decimals.\r\n   * @param totalBaluni The total supply of Baluni tokens.\r\n   * @param totalERC20Balance The total balance of the ERC20 token.\r\n   * @param baluniAmount The amount of Baluni tokens.\r\n   * @param tokenDecimals The number of decimals for the ERC20 token.\r\n   * @return The calculated token share.\r\n   */\r\n  function calculateTokenShare(\r\n    uint256 totalBaluni,\r\n    uint256 totalERC20Balance,\r\n    uint256 baluniAmount,\r\n    uint256 tokenDecimals\r\n  ) external pure returns (uint256) {\r\n    return _calculateERC20Share(totalBaluni, totalERC20Balance, baluniAmount, tokenDecimals);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the valuation of a given amount of a specific ERC20 token.\r\n   * @param amount The amount of the ERC20 token.\r\n   * @param token The address of the ERC20 token.\r\n   * @return The calculated valuation of the ERC20 token.\r\n   */\r\n  function tokenValuation(uint256 amount, address token) external view returns (uint256) {\r\n    return _calculateERC20Valuation(amount, token);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total valuation of the Baluni ecosystem.\r\n   * @return The total valuation of the Baluni ecosystem.\r\n   */\r\n  function totalValuation() external view returns (uint256) {\r\n    return _totalValuation();\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the value of a given amount of Baluni tokens in USDC.\r\n   * @param amount The amount of Baluni tokens.\r\n   * @return The calculated value of the Baluni tokens in USDC.\r\n   */\r\n  function getUSDCShareValue(uint256 amount) external view returns (uint256) {\r\n    return _calculateBaluniToUSDC(amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Performs arbitrage based on the market price and unit price.\r\n   * If the market price is lower than the unit price, it buys BALUNI tokens using USDC.\r\n   * If the market price is higher than the unit price, it sells BALUNI tokens for USDC.\r\n   * The function ensures that the necessary balances and approvals are in place before performing the swaps.\r\n   * @notice This function can only be called by external accounts.\r\n   */\r\n  function arbitrage(uint256 slippage) external nonReentrant {\r\n    IBaluniV1MarketOracle marketOracle = IBaluniV1MarketOracle(address(0x284E255314C8Cc67263C1f02C46B655Ee53df126));\r\n    uint256 unitPrice = marketOracle.unitPriceBALUNI();\r\n    uint256 marketPrice = marketOracle.priceBALUNI() * 1e12;\r\n\r\n    uint256 baluniBalanceB4 = balanceOf(address(this));\r\n    uint256 usdcBalanceB4 = USDC.balanceOf(address(this));\r\n    uint256 usdcBalance = usdcBalanceB4 * 1e12;\r\n\r\n    secureApproval(address(this), address(uniswapRouter), type(uint256).max);\r\n    secureApproval(address(USDC), address(uniswapRouter), type(uint256).max);\r\n\r\n    if (marketPrice < unitPrice) {\r\n      executeBuyArbitrage(usdcBalance, usdcBalanceB4, baluniBalanceB4, slippage, marketPrice, unitPrice);\r\n    } else if (marketPrice > unitPrice) {\r\n      executeSellArbitrage(usdcBalance, usdcBalanceB4, baluniBalanceB4, slippage, marketPrice, unitPrice);\r\n    }\r\n  }\r\n\r\n  function executeBuyArbitrage(\r\n    uint256 usdcBalance,\r\n    uint256 usdcBalanceB4,\r\n    uint256 baluniBalanceB4,\r\n    uint256 slippage,\r\n    uint256 marketPrice,\r\n    uint256 unitPrice\r\n  ) internal {\r\n    uint256 amountToBuy = ((usdcBalance) / (marketPrice)) * 1e18;\r\n    if (amountToBuy > baluniBalanceB4) amountToBuy = baluniBalanceB4;\r\n    require(baluniBalanceB4 >= amountToBuy, 'Arbitrage failed: insufficient BALUNI balance');\r\n\r\n    uint256 amountOutMin = (usdcBalanceB4 * slippage) / 10000;\r\n    emit Log('Amount Out Min for USDC -> BALUNI:', amountOutMin);\r\n\r\n    uint256 amountOutBAL = _singleSwapSlippage(\r\n      address(USDC),\r\n      address(this),\r\n      usdcBalanceB4,\r\n      amountOutMin,\r\n      address(this)\r\n    );\r\n    require(amountOutBAL >= amountToBuy, 'Arbitrage failed: insufficient output amount');\r\n\r\n    amountOutMin = (amountOutBAL * slippage) / 10000;\r\n    emit Log('Amount Out Min for BALUNI -> USDC:', amountOutMin);\r\n\r\n    uint256 amountOutUSDC = _singleSwapSlippage(\r\n      address(this),\r\n      address(USDC),\r\n      amountOutBAL,\r\n      amountOutMin,\r\n      address(this)\r\n    );\r\n    require(amountOutUSDC >= usdcBalanceB4, 'Arbitrage did not profit BUY');\r\n  }\r\n\r\n  function executeSellArbitrage(\r\n    uint256 usdcBalance,\r\n    uint256 usdcBalanceB4,\r\n    uint256 baluniBalanceB4,\r\n    uint256 slippage,\r\n    uint256 marketPrice,\r\n    uint256 unitPrice\r\n  ) internal {\r\n    uint256 amountToSell = baluniBalanceB4;\r\n    require(baluniBalanceB4 >= amountToSell, 'Arbitrage failed: insufficient BALUNI balance');\r\n    require(usdcBalance > 0, 'Arbitrage failed: insufficient USDC balance');\r\n\r\n    uint256 amountOutMin = (amountToSell * slippage) / 10000;\r\n    emit Log('Amount Out Min for BALUNI -> USDC:', amountOutMin);\r\n\r\n    uint256 amountOutUSDC = _singleSwapSlippage(\r\n      address(this),\r\n      address(USDC),\r\n      amountToSell,\r\n      amountOutMin,\r\n      address(this)\r\n    );\r\n    require(amountOutUSDC > usdcBalanceB4, 'Arbitrage failed: insufficient output amount');\r\n\r\n    amountOutMin = (amountOutUSDC * slippage) / 10000;\r\n    emit Log('Amount Out Min for USDC -> BALUNI:', amountOutMin);\r\n\r\n    uint256 amountOutBAL = _singleSwapSlippage(\r\n      address(USDC),\r\n      address(this),\r\n      amountOutUSDC,\r\n      amountOutMin,\r\n      address(this)\r\n    );\r\n    require(amountOutBAL >= baluniBalanceB4, 'Arbitrage did not profit SELL');\r\n  }\r\n\r\n  /**\r\n   * @dev Ensures that the contract has the necessary approval for a token to be spent by a spender.\r\n   * If the current allowance is not equal to the desired amount, it updates the allowance accordingly.\r\n   * @param token The address of the token to be approved.\r\n   * @param spender The address of the spender.\r\n   * @param amount The desired allowance amount.\r\n   * @notice This function is internal and should not be called directly.\r\n   */\r\n  function secureApproval(address token, address spender, uint256 amount) internal {\r\n    IERC20Upgradeable _token = IERC20Upgradeable(token);\r\n    uint256 currentAllowance = _token.allowance(address(this), spender);\r\n\r\n    if (currentAllowance < amount) {\r\n      _token.approve(spender, 0);\r\n      _token.approve(spender, amount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the valuation of an ERC20 token based on the amount and token address.\r\n   * @param amount The amount of the token.\r\n   * @param token The address of the token.\r\n   * @return valuation The valuation of the token.\r\n   */\r\n  function _calculateERC20Valuation(uint256 amount, address token) internal view returns (uint256 valuation) {\r\n    uint256 rate;\r\n    uint8 tokenDecimal = IERC20MetadataUpgradeable(token).decimals();\r\n    uint8 usdcDecimal = IERC20MetadataUpgradeable(address(USDC)).decimals();\r\n\r\n    if (token == address(USDC)) return amount * 1e12;\r\n\r\n    try IOracle(oracle).getRate(IERC20Upgradeable(token), IERC20Upgradeable(USDC), true) returns (uint256 _rate) {\r\n      rate = _rate;\r\n    } catch {\r\n      return 0;\r\n    }\r\n\r\n    if (tokenDecimal == usdcDecimal) return ((amount * 1e12) * (rate)) / 1e18;\r\n\r\n    uint256 factor = (10 ** (tokenDecimal - usdcDecimal));\r\n\r\n    if (tokenDecimal < 18) return ((amount * factor) * (rate * factor)) / 1e18;\r\n\r\n    return ((amount) * (rate * factor)) / 1e18;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the equivalent amount of USDC tokens for a given amount of Baluni tokens.\r\n   * @param amount The amount of Baluni tokens to convert.\r\n   * @return shareUSDC The equivalent amount of USDC tokens.\r\n   *\r\n   * Requirements:\r\n   * - The total supply of Baluni tokens must be greater than zero.\r\n   */\r\n  function _calculateBaluniToUSDC(uint256 amount) internal view returns (uint256 shareUSDC) {\r\n    uint256 totalBaluni = totalSupply();\r\n    require(totalBaluni > 0, 'Total supply cannot be zero');\r\n    uint256 totalUSDC = _totalValuation();\r\n    shareUSDC = (amount * totalUSDC) / totalBaluni;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the ERC20 share based on the total Baluni supply, total ERC20 balance,\r\n   * Baluni amount, and token decimals.\r\n   * @param totalBaluni The total supply of Baluni tokens.\r\n   * @param totalERC20Balance The total balance of the ERC20 token.\r\n   * @param baluniAmount The amount of Baluni tokens.\r\n   * @param tokenDecimals The number of decimals for the ERC20 token.\r\n   * @return The calculated ERC20 share.\r\n   */\r\n  function _calculateERC20Share(\r\n    uint256 totalBaluni,\r\n    uint256 totalERC20Balance,\r\n    uint256 baluniAmount,\r\n    uint256 tokenDecimals\r\n  ) internal pure returns (uint256) {\r\n    require(totalBaluni > 0, 'Total supply cannot be zero');\r\n    require(tokenDecimals <= 18, 'Token decimals should be <= 18');\r\n    uint256 baluniAdjusted;\r\n    uint256 amountAdjusted;\r\n\r\n    if (tokenDecimals < 18) {\r\n      baluniAdjusted = totalBaluni / (10 ** (18 - tokenDecimals));\r\n      amountAdjusted = baluniAmount / (10 ** (18 - tokenDecimals));\r\n    } else {\r\n      baluniAdjusted = totalBaluni;\r\n      amountAdjusted = baluniAmount;\r\n    }\r\n\r\n    uint256 result = (amountAdjusted * totalERC20Balance) / baluniAdjusted;\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @dev Executes a single swap on Uniswap.\r\n   * @param token0 The address of the input token.\r\n   * @param token1 The address of the output token.\r\n   * @param tokenBalance The amount of input token to be swapped.\r\n   * @param receiver The address that will receive the swapped tokens.\r\n   * @return amountOut The amount of output tokens received.\r\n   */\r\n  function _singleSwapSlippage(\r\n    address token0,\r\n    address token1,\r\n    uint256 tokenBalance,\r\n    uint256 adjustedBalance,\r\n    address receiver\r\n  ) private returns (uint256 amountOut) {\r\n    ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\r\n      tokenIn: token0,\r\n      tokenOut: token1,\r\n      fee: 3000,\r\n      recipient: address(receiver),\r\n      deadline: block.timestamp,\r\n      amountIn: tokenBalance,\r\n      amountOutMinimum: adjustedBalance,\r\n      sqrtPriceLimitX96: 0\r\n    });\r\n\r\n    return uniswapRouter.exactInputSingle(params);\r\n  }\r\n\r\n  /**\r\n   * @dev Executes a single swap on Uniswap.\r\n   * @param token0 The address of the input token.\r\n   * @param token1 The address of the output token.\r\n   * @param tokenBalance The amount of input token to be swapped.\r\n   * @param receiver The address that will receive the swapped tokens.\r\n   * @return amountOut The amount of output tokens received.\r\n   */\r\n  function _singleSwap(\r\n    address token0,\r\n    address token1,\r\n    uint256 tokenBalance,\r\n    address receiver\r\n  ) private returns (uint256 amountOut) {\r\n    ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\r\n      tokenIn: token0,\r\n      tokenOut: token1,\r\n      fee: 3000,\r\n      recipient: address(receiver),\r\n      deadline: block.timestamp,\r\n      amountIn: tokenBalance,\r\n      amountOutMinimum: 0,\r\n      sqrtPriceLimitX96: 0\r\n    });\r\n\r\n    return uniswapRouter.exactInputSingle(params);\r\n  }\r\n\r\n  /**\r\n   * @dev Executes a multi-hop swap using the Uniswap router.\r\n   * @param token0 The address of the first token in the swap path.\r\n   * @param token1 The address of the second token in the swap path.\r\n   * @param token2 The address of the third token in the swap path.\r\n   * @param tokenBalance The amount of tokens to be swapped.\r\n   * @param receiver The address that will receive the swapped tokens.\r\n   * @return amountOut The amount of tokens received after the swap.\r\n   */\r\n  function _multiHopSwap(\r\n    address token0,\r\n    address token1,\r\n    address token2,\r\n    uint256 tokenBalance,\r\n    address receiver\r\n  ) private returns (uint256 amountOut) {\r\n    ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\r\n      path: abi.encodePacked(token0, uint24(3000), token1, uint24(3000), token2),\r\n      recipient: address(receiver),\r\n      deadline: block.timestamp,\r\n      amountIn: tokenBalance,\r\n      amountOutMinimum: 0\r\n    });\r\n    return uniswapRouter.exactInput(params);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the total valuation of the contract by summing up the valuation of each token held.\r\n   * @return The total valuation of the contract.\r\n   */\r\n  function _totalValuation() internal view returns (uint256) {\r\n    uint256 _totalV;\r\n\r\n    for (uint256 i; i < tokens.length(); i++) {\r\n      address token = tokens.at(i);\r\n      uint256 balance = IERC20Upgradeable(token).balanceOf(address(this));\r\n      uint256 tokenBalanceValuation = _calculateERC20Valuation(balance, token);\r\n      _totalV += tokenBalanceValuation;\r\n    }\r\n\r\n    return _totalV;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the net amount after deducting the fee.\r\n   * @param _amount The input amount.\r\n   * @return The net amount after deducting the fee.\r\n   */\r\n  function _calculateNetAmountAfterFee(uint256 _amount) internal view returns (uint256) {\r\n    uint256 amountInWithFee = (_amount * (_BPS_BASE - (_BPS_FEE))) / _BPS_BASE;\r\n    return amountInWithFee;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to check the USDC balance and total supply before burning tokens.\r\n   * @param amountToBurn The amount of tokens to be burned.\r\n   */\r\n  function _checkUSDC(uint256 amountToBurn) internal view {\r\n    uint256 balance = IERC20Upgradeable(USDC).balanceOf(address(this));\r\n    if (balance >= 0.001 * 1e6 && totalSupply() >= 1) {\r\n      require(amountToBurn >= 0.01 ether, 'Minimum burn amount is 0.01 BALUNI');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Resizes an array to the specified size.\r\n   * @param arr The array to be resized.\r\n   * @param size The new size of the array.\r\n   * @return The resized array.\r\n   */\r\n  function _resize(uint256[] memory arr, uint256 size) internal pure returns (uint256[] memory) {\r\n    uint256[] memory ret = new uint256[](size);\r\n    for (uint256 i; i < size; i++) {\r\n      ret[i] = arr[i];\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the version of the contract.\r\n   * @return The version string.\r\n   */\r\n  function getVersion() external pure returns (string memory) {\r\n    return 'v1.0.1';\r\n  }\r\n}\r\n"
    },
    "contracts/interfaces/IBaluniV1Agent.sol": {
      "content": "// SPDX-License-Identifier: GNU AGPLv3\r\npragma solidity 0.8.25;\r\n\r\ninterface IBaluniV1Agent {\r\n  struct Call {\r\n    address to;\r\n    uint256 value;\r\n    bytes data;\r\n  }\r\n\r\n  function execute(Call[] memory calls, address[] memory tokensReturn) external;\r\n}\r\n"
    },
    "contracts/interfaces/IBaluniV1AgentFactory.sol": {
      "content": "// SPDX-License-Identifier: GNU AGPLv3\r\npragma solidity 0.8.25;\r\n\r\ninterface IBaluniV1AgentFactory {\r\n  function getAgentAddress(address user) external view returns (address);\r\n\r\n  function getOrCreateAgent(address user) external returns (address);\r\n}\r\n"
    },
    "contracts/interfaces/IBaluniV1MarketOracle.sol": {
      "content": "// SPDX-License-Identifier: GNU AGPLv3\r\npragma solidity 0.8.25;\r\n\r\ninterface IBaluniV1MarketOracle {\r\n  function unitPriceBALUNI() external view returns (uint256);\r\n\r\n  function priceBALUNI() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/IOracle.sol": {
      "content": "pragma solidity 0.8.25;\r\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\r\n\r\ninterface IOracle {\r\n  function getRate(\r\n    IERC20Upgradeable srcToken,\r\n    IERC20Upgradeable dstToken,\r\n    bool useWrappers\r\n  ) external view returns (uint256 weightedRate);\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "cancun",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}