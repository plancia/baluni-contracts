{
  "address": "0x9D35715856fe73D2908BE995137850593FB97a7b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesMinted",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesBurned",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "asset1Amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "asset2Amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesBurned",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "name": "RebalancePerformed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_FEE_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetIndex",
          "type": "uint256"
        }
      ],
      "name": "assetsLiquidityInWNATIVE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRebalancer",
          "type": "address"
        }
      ],
      "name": "changeRebalancer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "exitTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeviation",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "directions",
          "type": "bool[]"
        },
        {
          "internalType": "uint256[]",
          "name": "deviations",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnitPriceWNATIVE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rebalancer",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_trigger",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "performRebalanceIfNeeded",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalancer",
      "outputs": [
        {
          "internalType": "contract IBaluniV1Rebalancer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rebalancer",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_trigger",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_version",
          "type": "uint64"
        }
      ],
      "name": "reinitialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidityInWNATIVE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trigger",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "weights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x26be079f421c4b0ca281a174c31c47ca73464c1baf70975aa739970bb1f28348",
  "receipt": {
    "to": null,
    "from": "0x84F07be28ecd5b29Df340be8b065A6113a8e893e",
    "contractAddress": "0x9D35715856fe73D2908BE995137850593FB97a7b",
    "transactionIndex": 29,
    "gasUsed": "3980196",
    "logsBloom": "0x
    "blockHash": "0x104c8d64f193a743b61c3ae49a8d7e8175df5fffe51ffc2ba8d6af310265118f",
    "transactionHash": "0x26be079f421c4b0ca281a174c31c47ca73464c1baf70975aa739970bb1f28348",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 57410376,
        "transactionHash": "0x26be079f421c4b0ca281a174c31c47ca73464c1baf70975aa739970bb1f28348",
        "address": "0x9D35715856fe73D2908BE995137850593FB97a7b",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 110,
        "blockHash": "0x104c8d64f193a743b61c3ae49a8d7e8175df5fffe51ffc2ba8d6af310265118f"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 57410376,
        "transactionHash": "0x26be079f421c4b0ca281a174c31c47ca73464c1baf70975aa739970bb1f28348",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000084f07be28ecd5b29df340be8b065a6113a8e893e",
          "0x000000000000000000000000794e44d1334a56fea7f4df12633b88820d0c5888"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001d309945d749b740000000000000000000000000000000000000000000000004e77c64d698332650000000000000000000000000000000000000000000001eebb17c96501caadee0000000000000000000000000000000000000000000000004ca4bcb90c0e96f10000000000000000000000000000000000000000000001eebcead2f95f3f4962",
        "logIndex": 111,
        "blockHash": "0x104c8d64f193a743b61c3ae49a8d7e8175df5fffe51ffc2ba8d6af310265118f"
      }
    ],
    "blockNumber": 57410376,
    "cumulativeGasUsed": "7129829",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "4adf63cc3adbc52ac83cbd0a7f1248b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesMinted\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesBurned\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"asset1Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"asset2Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesBurned\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"RebalancePerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_FEE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetIndex\",\"type\":\"uint256\"}],\"name\":\"assetsLiquidityInWNATIVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRebalancer\",\"type\":\"address\"}],\"name\":\"changeRebalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"exitTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeviation\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"directions\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deviations\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnitPriceWNATIVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rebalancer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_trigger\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"performRebalanceIfNeeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancer\",\"outputs\":[{\"internalType\":\"contract IBaluniV1Rebalancer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rebalancer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_trigger\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_version\",\"type\":\"uint64\"}],\"name\":\"reinitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidityInWNATIVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trigger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256[])\":{\"details\":\"Adds liquidity to the pool by transferring specified amounts of assets from the caller's address to the contract. The function calculates the received amount of each asset and mints new LP tokens proporzionalmente.\",\"params\":{\"amounts\":\"An array of amounts for each asset to be added as liquidity.\"},\"returns\":{\"_0\":\"The amount of LP tokens minted and transferred to the caller.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"assetsLiquidityInWNATIVE(uint256)\":{\"details\":\"Returns the valuation of a specific asset in USD.\",\"params\":{\"assetIndex\":\"The index of the asset in the assets array.\"},\"returns\":{\"_0\":\"The valuation of the specified asset in USD.\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"exit(uint256)\":{\"details\":\"Allows a user to exit the pool by redeeming their share of assets.\",\"params\":{\"share\":\"The amount of shares to redeem. Requirements: - The caller must have a balance of shares greater than or equal to the specified amount. - The pool must have sufficient assets to cover the redeemed shares. Effects: - Decreases the caller's share balance by the specified amount. - Transfers the proportional amount of each asset in the pool to the caller. Emits: - LiquidityRemoved event with the caller's address and the redeemed share amount.\"}},\"getAmountOut(address,address,uint256)\":{\"details\":\"Calculates the amount of `toToken` that will be received after swapping `fromToken` for `toToken`.\",\"params\":{\"amount\":\"The amount of `fromToken` being swapped.\",\"fromToken\":\"The address of the token being swapped from.\",\"toToken\":\"The address of the token being swapped to.\"},\"returns\":{\"_0\":\"The amount of `toToken` that will be received after the swap.\"}},\"getDeviation()\":{\"details\":\"Returns the deviation of the current weights of each asset from the target weights.\",\"returns\":{\"deviations\":\"An array of uint256 values representing the deviation of each asset's current weight from the target weight.\",\"directions\":\"An array of booleans indicating whether each current weight is greater than the target weight.\"}},\"getReserves()\":{\"details\":\"Returns the current reserves of all assets held by the contract.\",\"returns\":{\"_0\":\"An array containing the balances of all assets respectively.\"}},\"getUnitPriceWNATIVE()\":{\"details\":\"Returns the unit price of the pool. The unit price is calculated by dividing the total valuation of the pool by the total supply of tokens. If the total supply is 0, the unit price is 0.\",\"returns\":{\"_0\":\"The unit price of the pool in USD.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"performRebalanceIfNeeded(address)\":{\"details\":\"Performs a rebalance if needed. This internal function checks if a rebalance is needed by calling the `checkRebalance` function of the `rebalancer` contract. If a rebalance is required, it calls the `rebalance` function of the `rebalancer` contract to perform the rebalance. Requirements: - The `assets` array must contain the addresses of the assets to rebalance. - The `weights` array must contain the corresponding weights for the assets. - The `rebalanceStatus` must not be `NoRebalance`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"swap(address,address,uint256)\":{\"details\":\"Swaps tokens from one address to another.\",\"params\":{\"amount\":\"The amount of tokens to swap.\",\"fromToken\":\"The address of the token to swap from.\",\"toToken\":\"The address of the token to swap to.\"},\"returns\":{\"_0\":\"The amount of tokens received after the swap.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalLiquidityInWNATIVE()\":{\"details\":\"Returns the total valuation in USD.\",\"returns\":{\"_0\":\"The total valuation in USD.\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAmountOut(address,address,uint256)\":{\"notice\":\"This function is view-only and does not modify the contract state.The `fromToken` and `toToken` must be either `asset1` or `asset2`.The `fromToken` and `toToken` cannot be the same token.The `amount` must be greater than zero.The returned amount does not include any swap fees.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaluniV1Pool.sol\":\"BaluniV1Pool\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/BaluniV1Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\r\\npragma solidity 0.8.25;\\r\\n\\r\\nimport './interfaces/IBaluniV1Rebalancer.sol';\\r\\nimport './interfaces/IBaluniV1Router.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\r\\n\\r\\ncontract BaluniV1Pool is Initializable, ERC20Upgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {\\r\\n  IBaluniV1Rebalancer public rebalancer;\\r\\n  address[] public assets;\\r\\n  uint256[] public weights;\\r\\n  uint256 public trigger;\\r\\n  uint256 public ONE;\\r\\n  address public factory;\\r\\n  uint256 public constant SWAP_FEE_BPS = 30;\\r\\n\\r\\n  event RebalancePerformed(address indexed by, address[] assets);\\r\\n  event LiquidityRemoved(address indexed user, uint256[] amounts, uint256 sharesBurned);\\r\\n\\r\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n  constructor() initializer {}\\r\\n\\r\\n  function initialize(\\r\\n    address _rebalancer,\\r\\n    address[] memory _assets,\\r\\n    uint256[] memory _weights,\\r\\n    uint256 _trigger\\r\\n  ) public initializer {\\r\\n    __ERC20_init('Baluni LP', 'BALUNI-LP');\\r\\n    __ReentrancyGuard_init();\\r\\n    __UUPSUpgradeable_init();\\r\\n\\r\\n    factory = msg.sender;\\r\\n    rebalancer = IBaluniV1Rebalancer(_rebalancer);\\r\\n    assets = _assets;\\r\\n    weights = _weights;\\r\\n    ONE = 1e18;\\r\\n\\r\\n    for (uint i = 0; i < assets.length; i++) {\\r\\n      require(assets[i] != address(0), 'Invalid asset address');\\r\\n      require(_weights[i] > 0, 'Invalid weight');\\r\\n      IERC20 asset = IERC20(assets[i]);\\r\\n      if (asset.allowance(address(this), address(rebalancer)) == 0) {\\r\\n        asset.approve(address(rebalancer), type(uint256).max);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    trigger = _trigger;\\r\\n  }\\r\\n\\r\\n  function reinitialize(\\r\\n    address _rebalancer,\\r\\n    address[] memory _assets,\\r\\n    uint256[] memory _weights,\\r\\n    uint256 _trigger,\\r\\n    uint64 _version\\r\\n  ) public reinitializer(_version) {\\r\\n    factory = msg.sender;\\r\\n    rebalancer = IBaluniV1Rebalancer(_rebalancer);\\r\\n    assets = _assets;\\r\\n    weights = _weights;\\r\\n    ONE = 1e18;\\r\\n\\r\\n    for (uint i = 0; i < assets.length; i++) {\\r\\n      require(assets[i] != address(0), 'Invalid asset address');\\r\\n      require(_weights[i] > 0, 'Invalid weight');\\r\\n      IERC20 asset = IERC20(assets[i]);\\r\\n      if (asset.allowance(address(this), address(rebalancer)) == 0) {\\r\\n        asset.approve(address(rebalancer), type(uint256).max);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    trigger = _trigger;\\r\\n  }\\r\\n\\r\\n  function _authorizeUpgrade(address newImplementation) internal override onlyFactory {}\\r\\n\\r\\n  modifier onlyFactory() {\\r\\n    require(msg.sender == factory, 'Only Factory');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the received amount after applying a fee, based on the conversion rate between two tokens.\\r\\n   * @param fromToken The address of the token being converted from.\\r\\n   * @param amount The amount to be converted after applying a fee.\\r\\n   * @return scaledAmount The received amount after applying the conversion rate and fee.\\r\\n   */\\r\\n  function _convertTokenWithRateScaled(address fromToken, uint256 amount) internal view returns (uint256 scaledAmount) {\\r\\n    uint256 rate;\\r\\n    address WNATIVE = rebalancer.getWNATIVEAddress();\\r\\n    uint8 fromDecimal = IERC20Metadata(fromToken).decimals();\\r\\n    uint8 toDecimal = IERC20Metadata(WNATIVE).decimals();\\r\\n\\r\\n    try rebalancer.getRateToEth(IERC20(fromToken), false) returns (uint256 _rate) {\\r\\n      rate = _rate;\\r\\n    } catch {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 factor;\\r\\n    uint256 numerator = 10 ** fromDecimal;\\r\\n    uint256 demonimator = ONE;\\r\\n\\r\\n    rate = (rate * numerator) / demonimator;\\r\\n\\r\\n    if (fromDecimal > toDecimal) {\\r\\n      factor = 10 ** (fromDecimal - toDecimal);\\r\\n      amount = amount * factor;\\r\\n    } else if (fromDecimal < toDecimal) {\\r\\n      factor = 10 ** (toDecimal - fromDecimal);\\r\\n      amount = amount * factor;\\r\\n    } else {\\r\\n      if (fromDecimal == 18) {\\r\\n        return ((amount) * (rate)) / ONE;\\r\\n      } else {\\r\\n        factor = 10 ** 18 - fromDecimal;\\r\\n        amount = amount * factor;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return ((amount) * (rate)) / ONE;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Swaps tokens from one address to another.\\r\\n   * @param fromToken The address of the token to swap from.\\r\\n   * @param toToken The address of the token to swap to.\\r\\n   * @param amount The amount of tokens to swap.\\r\\n   * @return The amount of tokens received after the swap.\\r\\n   */\\r\\n  function swap(address fromToken, address toToken, uint256 amount) external nonReentrant returns (uint256) {\\r\\n    require(fromToken != toToken, 'Cannot swap the same token');\\r\\n    require(amount > 0, 'Amount must be greater than zero');\\r\\n    IERC20(fromToken).transferFrom(msg.sender, address(this), amount);\\r\\n    uint256 fee = (amount * SWAP_FEE_BPS) / 10000;\\r\\n    uint256 amountAfterFee = amount - fee;\\r\\n    uint256 receivedAmount = getAmountOut(fromToken, toToken, amountAfterFee);\\r\\n    require(IERC20(toToken).balanceOf(address(this)) >= receivedAmount, 'Insufficient Liquidity');\\r\\n    IERC20(toToken).transfer(msg.sender, receivedAmount);\\r\\n    emit Swap(msg.sender, fromToken, toToken, amount, receivedAmount);\\r\\n\\r\\n    return receivedAmount;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the amount of `toToken` that will be received after swapping `fromToken` for `toToken`.\\r\\n   * @param fromToken The address of the token being swapped from.\\r\\n   * @param toToken The address of the token being swapped to.\\r\\n   * @param amount The amount of `fromToken` being swapped.\\r\\n   * @return The amount of `toToken` that will be received after the swap.\\r\\n   * @notice This function is view-only and does not modify the contract state.\\r\\n   * @notice The `fromToken` and `toToken` must be either `asset1` or `asset2`.\\r\\n   * @notice The `fromToken` and `toToken` cannot be the same token.\\r\\n   * @notice The `amount` must be greater than zero.\\r\\n   * @notice The returned amount does not include any swap fees.\\r\\n   */\\r\\n  function getAmountOut(address fromToken, address toToken, uint256 amount) public view returns (uint256) {\\r\\n    require(fromToken != toToken, 'Cannot swap the same token');\\r\\n    require(amount > 0, 'Amount must be greater than zero');\\r\\n\\r\\n    // Calculate the fee and adjust the amount after fee\\r\\n    uint256 fee = (amount * SWAP_FEE_BPS) / 10000;\\r\\n    uint256 amountAfterFee = amount - fee;\\r\\n\\r\\n    // Get decimals for fromToken and toToken\\r\\n    uint8 fromDecimal = IERC20Metadata(fromToken).decimals();\\r\\n    uint8 toDecimal = IERC20Metadata(toToken).decimals();\\r\\n\\r\\n    uint256 rate;\\r\\n    try rebalancer.getRate(IERC20(fromToken), IERC20(toToken), false) returns (uint256 _rate) {\\r\\n      rate = _rate;\\r\\n    } catch {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 adjustedAmount;\\r\\n    if (fromDecimal > toDecimal) {\\r\\n      uint256 factor = 10 ** (fromDecimal - toDecimal);\\r\\n      adjustedAmount = amountAfterFee / factor; // Correct division for scaling down\\r\\n    } else if (fromDecimal < toDecimal) {\\r\\n      uint256 factor = 10 ** (toDecimal - fromDecimal);\\r\\n      adjustedAmount = amountAfterFee * factor;\\r\\n      rate = rate; // Correct multiplication for scaling up\\r\\n    } else {\\r\\n      adjustedAmount = amountAfterFee;\\r\\n      return (adjustedAmount * rate) / (10 ** 18);\\r\\n    }\\r\\n\\r\\n    // Calculate the amount out\\r\\n    uint256 amountOut = (adjustedAmount * rate) / (10 ** toDecimal);\\r\\n\\r\\n    return amountOut;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Adds liquidity to the pool by transferring specified amounts of assets from the caller's address to the contract.\\r\\n   * The function calculates the received amount of each asset and mints new LP tokens proporzionalmente.\\r\\n   * @param amounts An array of amounts for each asset to be added as liquidity.\\r\\n   * @return The amount of LP tokens minted and transferred to the caller.\\r\\n   */\\r\\n  function addLiquidity(uint256[] calldata amounts) external nonReentrant returns (uint256) {\\r\\n    require(amounts.length == assets.length, 'Amounts length mismatch');\\r\\n\\r\\n    uint256 totalSupply = totalSupply();\\r\\n    uint256 totalValueInUSDC = 0;\\r\\n    address USDC = rebalancer.getUSDCAddress();\\r\\n\\r\\n    uint8 decimals = IERC20Metadata(USDC).decimals();\\r\\n    uint256 scalingFactor = 10 ** (18 - decimals);\\r\\n\\r\\n    for (uint256 i = 0; i < assets.length; i++) {\\r\\n      address asset = assets[i];\\r\\n      uint256 amount = amounts[i];\\r\\n      IERC20(asset).transferFrom(msg.sender, address(this), amount);\\r\\n      uint256 valuation = _convertTokenWithRateScaled(asset, amount);\\r\\n      totalValueInUSDC += valuation;\\r\\n    }\\r\\n\\r\\n    uint256 toMint;\\r\\n\\r\\n    if (totalSupply == 0) {\\r\\n      toMint = totalValueInUSDC;\\r\\n    } else {\\r\\n      (uint256 totalLiquidity, ) = _computeTotalValuation();\\r\\n\\r\\n      toMint = ((totalValueInUSDC) * totalSupply) / totalLiquidity;\\r\\n    }\\r\\n    require(toMint != 0, 'Mint qty is 0');\\r\\n    uint256 b4 = balanceOf(msg.sender);\\r\\n\\r\\n    _mint(msg.sender, toMint);\\r\\n\\r\\n    uint256 b = balanceOf(msg.sender) - b4;\\r\\n    require(b == toMint, 'Mint Failed');\\r\\n\\r\\n    emit LiquidityAdded(msg.sender, amounts, toMint);\\r\\n\\r\\n    return toMint;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a rebalance if needed.\\r\\n   *\\r\\n   * This internal function checks if a rebalance is needed by calling the `checkRebalance` function of the `rebalancer` contract.\\r\\n   * If a rebalance is required, it calls the `rebalance` function of the `rebalancer` contract to perform the rebalance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The `assets` array must contain the addresses of the assets to rebalance.\\r\\n   * - The `weights` array must contain the corresponding weights for the assets.\\r\\n   * - The `rebalanceStatus` must not be `NoRebalance`.\\r\\n   */\\r\\n  function performRebalanceIfNeeded(address _sender) external {\\r\\n    uint256 requiredBalance = (totalSupply() * 1000) / 10000;\\r\\n    require(balanceOf(_sender) >= requiredBalance, 'Under 5% LP share');\\r\\n    _performRebalanceIfNeeded();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the deviation of the current weights of each asset from the target weights.\\r\\n   * @return directions An array of booleans indicating whether each current weight is greater than the target weight.\\r\\n   * @return deviations An array of uint256 values representing the deviation of each asset's current weight from the target weight.\\r\\n   */\\r\\n  function getDeviation() external view returns (bool[] memory directions, uint256[] memory deviations) {\\r\\n    (uint256 totalUsdValuation, uint256[] memory usdValuations) = _computeTotalValuation();\\r\\n    uint256 numAssets = assets.length;\\r\\n\\r\\n    directions = new bool[](numAssets);\\r\\n    deviations = new uint256[](numAssets);\\r\\n\\r\\n    for (uint256 i = 0; i < numAssets; i++) {\\r\\n      uint256 currentWeight = (usdValuations[i] * 10000) / totalUsdValuation;\\r\\n      uint256 targetWeight = weights[i];\\r\\n\\r\\n      if (currentWeight > targetWeight) {\\r\\n        deviations[i] = currentWeight - targetWeight;\\r\\n        directions[i] = true;\\r\\n      } else {\\r\\n        deviations[i] = targetWeight - currentWeight;\\r\\n        directions[i] = false;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return (directions, deviations);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the valuation of a specific asset in USD.\\r\\n   * @param assetIndex The index of the asset in the assets array.\\r\\n   * @return The valuation of the specified asset in USD.\\r\\n   */\\r\\n  function assetsLiquidityInWNATIVE(uint256 assetIndex) external view returns (uint256) {\\r\\n    (, uint256[] memory usdValuations) = _computeTotalValuation();\\r\\n    require(assetIndex < usdValuations.length, 'Invalid asset index');\\r\\n    return usdValuations[assetIndex];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the total valuation in USD.\\r\\n   * @return The total valuation in USD.\\r\\n   */\\r\\n  function totalLiquidityInWNATIVE() external view returns (uint256) {\\r\\n    (uint256 totalVal, ) = _computeTotalValuation();\\r\\n    return totalVal;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the unit price of the pool.\\r\\n   * The unit price is calculated by dividing the total valuation of the pool by the total supply of tokens.\\r\\n   * If the total supply is 0, the unit price is 0.\\r\\n   * @return The unit price of the pool in USD.\\r\\n   */\\r\\n  function getUnitPriceWNATIVE() external view returns (uint256) {\\r\\n    (uint256 totalVal, ) = _computeTotalValuation();\\r\\n    uint256 totalSupply = totalSupply();\\r\\n    if (totalSupply == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    return (totalVal * ONE) / totalSupply;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Computes the valuation of the assets in the pool.\\r\\n   * @return totalValuation The total valuation of the assets in USD.\\r\\n   * @return valuations An array of USD valuations for each asset.\\r\\n   */\\r\\n  function _computeTotalValuation() internal view returns (uint256 totalValuation, uint256[] memory valuations) {\\r\\n    uint256 numAssets = assets.length;\\r\\n    valuations = new uint256[](numAssets);\\r\\n    for (uint256 i = 0; i < numAssets; i++) {\\r\\n      IERC20 asset = IERC20(assets[i]);\\r\\n      uint8 decimals = IERC20Metadata(address(asset)).decimals();\\r\\n      uint256 valuation = _convertTokenWithRateScaled(address(asset), asset.balanceOf(address(this)));\\r\\n      valuations[i] = valuation;\\r\\n      totalValuation += valuations[i];\\r\\n    }\\r\\n    return (totalValuation, valuations);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs rebalance if needed based on the deviation of asset weights from the target weights.\\r\\n   * @notice This function checks if the caller has any shares, calculates the current weights of assets,\\r\\n   * and compares them with the target weights. If the deviation exceeds the threshold, a rebalance is performed\\r\\n   * by calling the `rebalance` function of the `rebalancer` contract.\\r\\n   * @notice The rebalance is performed using the assets and weights specified in the `assets` and `weights` arrays.\\r\\n   * @notice Emits a `RebalancePerformed` event if a rebalance is performed.\\r\\n   * @notice Reverts with an error message if no rebalance is needed.\\r\\n   */\\r\\n  function _performRebalanceIfNeeded() internal {\\r\\n    rebalancer.rebalance(assets, weights, address(this), address(this), trigger);\\r\\n    emit RebalancePerformed(msg.sender, assets);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current reserves of all assets held by the contract.\\r\\n   * @return An array containing the balances of all assets respectively.\\r\\n   */\\r\\n  function getReserves() external view returns (uint256[] memory) {\\r\\n    uint256[] memory reserves = new uint256[](assets.length);\\r\\n    for (uint256 i = 0; i < assets.length; i++) {\\r\\n      reserves[i] = IERC20(assets[i]).balanceOf(address(this));\\r\\n    }\\r\\n    return reserves;\\r\\n  }\\r\\n\\r\\n  function changeRebalancer(address _newRebalancer) external onlyFactory {\\r\\n    rebalancer = IBaluniV1Rebalancer(_newRebalancer);\\r\\n  }\\r\\n\\r\\n  function getAssets() external view returns (address[] memory) {\\r\\n    return assets;\\r\\n  }\\r\\n\\r\\n  function getWeights() external view returns (uint256[] memory) {\\r\\n    return weights;\\r\\n  }\\r\\n\\r\\n  event Swap(\\r\\n    address indexed user,\\r\\n    address indexed fromToken,\\r\\n    address indexed toToken,\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOut\\r\\n  );\\r\\n  event LiquidityAdded(address indexed user, uint256[] amounts, uint256 sharesMinted);\\r\\n  event LiquidityRemoved(address indexed user, uint256 asset1Amount, uint256 asset2Amount, uint256 sharesBurned);\\r\\n\\r\\n  /**\\r\\n   * @dev Allows a user to exit the pool by redeeming their share of assets.\\r\\n   * @param share The amount of shares to redeem.\\r\\n   * Requirements:\\r\\n   * - The caller must have a balance of shares greater than or equal to the specified amount.\\r\\n   * - The pool must have sufficient assets to cover the redeemed shares.\\r\\n   * Effects:\\r\\n   * - Decreases the caller's share balance by the specified amount.\\r\\n   * - Transfers the proportional amount of each asset in the pool to the caller.\\r\\n   * Emits:\\r\\n   * - LiquidityRemoved event with the caller's address and the redeemed share amount.\\r\\n   */\\r\\n  function exit(uint256 share) external nonReentrant {\\r\\n    require(balanceOf(msg.sender) >= share, 'Insufficient share');\\r\\n    uint256 totalSupply = totalSupply();\\r\\n    require(totalSupply > 0, 'No liquidity');\\r\\n\\r\\n    uint256[] memory amounts = new uint256[](assets.length);\\r\\n\\r\\n    uint256 fee = (share * SWAP_FEE_BPS) / 10000;\\r\\n    uint256 shareAfterFee = share - fee;\\r\\n\\r\\n    transferFrom(msg.sender, address(this), share);\\r\\n\\r\\n    // Calculate the share of each asset to be transferred\\r\\n    for (uint256 i = 0; i < assets.length; i++) {\\r\\n      uint256 assetBalance = IERC20(assets[i]).balanceOf(address(this));\\r\\n      amounts[i] = (assetBalance * shareAfterFee) / totalSupply;\\r\\n    }\\r\\n\\r\\n    _burn(address(this), shareAfterFee);\\r\\n    IERC20(address(this)).transfer(rebalancer.getTreasury(), fee);\\r\\n\\r\\n    for (uint256 i = 0; i < assets.length; i++) {\\r\\n      IERC20(assets[i]).transfer(msg.sender, amounts[i]);\\r\\n    }\\r\\n\\r\\n    emit LiquidityRemoved(msg.sender, amounts, shareAfterFee);\\r\\n  }\\r\\n\\r\\n  function exitTo(uint256 share, address recipient) external nonReentrant {\\r\\n    require(balanceOf(msg.sender) >= share, 'Insufficient share');\\r\\n    uint256 totalSupply = totalSupply();\\r\\n    require(totalSupply > 0, 'No liquidity');\\r\\n\\r\\n    uint256[] memory amounts = new uint256[](assets.length);\\r\\n\\r\\n    uint256 fee = (share * SWAP_FEE_BPS) / 10000;\\r\\n    uint256 shareAfterFee = share - fee;\\r\\n\\r\\n    transferFrom(msg.sender, address(this), share);\\r\\n\\r\\n    // Calculate the share of each asset to be transferred\\r\\n    for (uint256 i = 0; i < assets.length; i++) {\\r\\n      uint256 assetBalance = IERC20(assets[i]).balanceOf(address(this));\\r\\n      amounts[i] = (assetBalance * shareAfterFee) / totalSupply;\\r\\n    }\\r\\n\\r\\n    _burn(address(this), shareAfterFee);\\r\\n    IERC20(address(this)).transfer(rebalancer.getTreasury(), fee);\\r\\n\\r\\n    for (uint256 i = 0; i < assets.length; i++) {\\r\\n      IERC20(assets[i]).transfer(recipient, amounts[i]);\\r\\n    }\\r\\n\\r\\n    emit LiquidityRemoved(recipient, amounts, shareAfterFee);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x593ce34f43bb7be0ccc32e98965a400adf0ae65659814a01c4c53face36c8f32\",\"license\":\"GNU AGPLv3\"},\"contracts/interfaces/IBaluniV1Rebalancer.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\r\\npragma solidity 0.8.25;\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\r\\n\\r\\ninterface IBaluniV1Rebalancer {\\r\\n  enum RebalanceType {\\r\\n    Overweight,\\r\\n    Underweight,\\r\\n    NoRebalance\\r\\n  }\\r\\n\\r\\n  struct RebalanceVars {\\r\\n    uint256 len;\\r\\n    uint256 totalValue;\\r\\n    uint256 finalUsdBalance;\\r\\n    uint256 overweightVaultsLength;\\r\\n    uint256 underweightVaultsLength;\\r\\n    uint256 totalActiveWeight;\\r\\n    uint256 amountOut;\\r\\n    uint256[] overweightVaults;\\r\\n    uint256[] overweightAmounts;\\r\\n    uint256[] underweightVaults;\\r\\n    uint256[] underweightAmounts;\\r\\n    uint256[] balances;\\r\\n  }\\r\\n\\r\\n  function checkRebalance(\\r\\n    address[] calldata assets,\\r\\n    uint256[] calldata weights,\\r\\n    uint256 limit,\\r\\n    address sender\\r\\n  ) external view returns (RebalanceVars memory);\\r\\n\\r\\n  function rebalance(\\r\\n    address[] calldata assets,\\r\\n    uint256[] calldata weights,\\r\\n    address sender,\\r\\n    address receiver,\\r\\n    uint256 limit\\r\\n  ) external;\\r\\n\\r\\n  function getBaluniRouter() external view returns (address);\\r\\n\\r\\n  function getRate(IERC20 srcToken, IERC20 dstToken, bool useWrappers) external view returns (uint256 weightedRate);\\r\\n\\r\\n  function getTreasury() external view returns (address);\\r\\n\\r\\n  function getUSDCAddress() external view returns (address);\\r\\n\\r\\n  function getWNATIVEAddress() external view returns (address);\\r\\n\\r\\n  function getRateToEth(IERC20 srcToken, bool useWrappers) external view returns (uint256 weightedRate);\\r\\n}\\r\\n\",\"keccak256\":\"0x444b602d568af31b9045d523d998c8f01aa32bed294dc8589006ae3d8ef26e69\",\"license\":\"GNU AGPLv3\"},\"contracts/interfaces/IBaluniV1Router.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\r\\npragma solidity 0.8.25;\\r\\n\\r\\ninterface IBaluniV1Router {\\r\\n  function getAgentAddress(address _user) external view returns (address);\\r\\n\\r\\n  function getBpsFee() external view returns (uint256);\\r\\n\\r\\n  function tokenValuation(uint256 amount, address token) external view returns (uint256);\\r\\n\\r\\n  function getTreasury() external view returns (address);\\r\\n\\r\\n  function getUnitPrice() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf36b22a54937a493f80d2f850b96d6ee735c3d7d54d3be369d76d03b72467096\",\"license\":\"GNU AGPLv3\"}},\"version\":1}",
  "bytecode": "0x60a0806040523461012c57306080527ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0080549091604082901c60ff161591906001600160401b03821680159081610124575b600114908161011a575b159081610111575b5061010257506001600160401b031981166001178355816100e5575b506100a4575b6040516146ef90816101318239608051818181611b1f0152611c220152f35b68ff00000000000000001981541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a15f610085565b6001600160481b031916680100000000000000011782555f61007f565b63f92ee8a960e01b8152600490fd5b9050155f610063565b303b15915061005b565b849150610051565b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c90816301d22ccd146132d05750806306fdde03146131bf5780630902f1ac146130cf5780630918281b14613065578063095ea7b314612f5557806318160ddd14612f1957806322acb86714612e8d57806323b872dd14612e6a578063313ce56714612e4f57806346448548146124aa5780634aa06652146124975780634de59aa314611e8e5780634f1ef28614611b9957806352d1902d14611af85780635568081a1461185357806367a6c4401461183757806367e4ac2c1461175d57806370a08231146116f95780637a419317146116d65780637f8661a1146113105780637fec8d38146112f25780638299cc00146112ce57806389ab35321461112a57806395d89b411461100a578063a9059cbb14610fd8578063ad3cb1cc14610f7e578063b5f163ff14610f45578063c2ee3a0814610f27578063c45a015514610ef3578063ce83b10c14610ad7578063cf35bdd014610a87578063d1f51274146105bc578063dd62ed3e14610528578063df791e501461023c5763ed61d2fe1461019f575f80fd5b34610239576020600319360112610239576004356101bb6142cd565b809150518210156101db576020916101d291613698565b51604051908152f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f496e76616c696420617373657420696e646578000000000000000000000000006044820152fd5b80fd5b50346102395761024b366133c0565b909291610256613fc1565b73ffffffffffffffffffffffffffffffffffffffff918285169282169161027f848414156139eb565b81159561028c8715613a50565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490526020979088816064818b8a5af1801561051d57610500575b50601e840290848204601e1417156104d3579061030261271061030894930485613aec565b91613b37565b936040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201528681602481885afa9081156104c8579086918391610493575b5010610435576040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810186905290868260448184895af190811561042957506103fc575b5060405190815283858201527fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606260403392a460017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055604051908152f35b61041b90863d8811610422575b610413818361341e565b8101906139d3565b505f61039e565b503d610409565b604051903d90823e3d90fd5b606486604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601660248201527f496e73756666696369656e74204c6971756964697479000000000000000000006044820152fd5b809250888092503d83116104c1575b6104ac818361341e565b810103126104bd578590515f61034e565b5f80fd5b503d6104a2565b6040513d84823e3d90fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b61051690893d8b1161042257610413818361341e565b505f6102dd565b6040513d8a823e3d90fd5b50346102395760406003193601126102395761054261337a565b73ffffffffffffffffffffffffffffffffffffffff6105a661056261339d565b9273ffffffffffffffffffffffffffffffffffffffff165f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0160205260405f2090565b91165f52602052602060405f2054604051908152f35b50346102395760a0600319360112610239576105d661337a565b67ffffffffffffffff919060248035848111610a83576105fa903690600401613477565b9160448035868111610a7f576106149036906004016134f4565b9160843593878516809503610a7b577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009384549860ff8a60401c168015610a6f575b610a45577fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000009987680100000000000000009b8c9216171786557fffffffffffffffffffffffff00000000000000000000000000000000000000003381600554161760055573ffffffffffffffffffffffffffffffffffffffff809516908a5416178955875199818b116109e557808b116109e55760019a6106fc818d818154915561388b565b6020809a018c8c528c8c5b838110610a11575050505082519182116109e55781116109b95790816107378b96959493600254816002556138cb565b88820160028b528a5b828110610988575050670de0b6b3a764000060045550929350909187895b6107be575b887fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d28989896064356003557fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff8154169055604051908152a180f35b89548110156109835783806107e66107d58461358e565b929054600393841b1c161515613909565b6107fb6107f38486613698565b51151561396e565b6108048361358e565b90548c546040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015290891673ffffffffffffffffffffffffffffffffffffffff811660248301529290931b1c9290921691908a81604481865afa90811561097857928c928c928f9a99989796958591610941575b5015610897575b505050508501909192939461075e565b88995060409891929394959697985194859384927f095ea7b300000000000000000000000000000000000000000000000000000000845260048401527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a8401525af1801561093657918b9695949392918792610919575b8b91928b91610887565b61092f908b3d8d1161042257610413818361341e565b505f61090f565b6040513d8c823e3d90fd5b93929a5050925081813d8311610971575b61095c818361341e565b810103126104bd578c978c928c92515f610880565b503d610952565b6040513d8e823e3d90fd5b610763565b81517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace820155908a01908701610740565b82897f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b838a7f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b8c89845116930192817fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155018d90610707565b60046040517ff92ee8a9000000000000000000000000000000000000000000000000000000008152fd5b5086818b161015610656565b8680fd5b8580fd5b8380fd5b5034610239576020600319360112610239576004359060015482101561023957602073ffffffffffffffffffffffffffffffffffffffff610ac78461358e565b9190546040519260031b1c168152f35b503461023957604060031936011261023957600435610af461339d565b90610afd613fc1565b3383526020907f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace008252610b368160408620541015613dc8565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254610b63811515613e2d565b600193610b708554613649565b92601e8102818104601e1482151715610ec657612710900492610b9e610b968584613aec565b923033613711565b50865490885b828110610df557505050610bb881306144af565b73ffffffffffffffffffffffffffffffffffffffff92600486858a5416604051928380927f3b19e84a0000000000000000000000000000000000000000000000000000000082525afa908115610dbb57610c6e9288918b93610dc6575b50604051809481927fa9059cbb0000000000000000000000000000000000000000000000000000000095868452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03818c305af1918215610dbb578892610d9e575b509088905b610cf8575b5050917f0f74fe264fb7d04b4800409b8a3562eb271296e19c3ec8835639635b3e858c459391610cca93604051948594604086526040860190613347565b9684015216930390a27f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005580f35b8754811015610d99579081878782878d8a610d21610d18610d5a9a61358e565b95905496613698565b5160405189815273ffffffffffffffffffffffffffffffffffffffff909416600485015260248401529197889485939184906044820190565b039460031b1c165af19081156109365789938492610d7c575b50019091610c87565b610d92908a3d8c1161042257610413818361341e565b505f610d73565b610c8c565b610db490883d8a1161042257610413818361341e565b505f610c82565b6040513d8b823e3d90fd5b610de7919350823d8411610dee575b610ddf818361341e565b810190613d48565b915f610c15565b503d610dd5565b80886024610e1773ffffffffffffffffffffffffffffffffffffffff9461358e565b9190549160405195869384927f70a0823100000000000000000000000000000000000000000000000000000000845230600485015260031b1c165afa918b8315610429578b938592889291610e8c575b50610e7b9291610e7691613862565b613ab5565b610e85828a613698565b5201610ba4565b94505050508882813d8311610ebf575b610ea6818361341e565b810103126104bd57905189919083908690610e7b610e67565b503d610e9c565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5034610239578060031936011261023957602073ffffffffffffffffffffffffffffffffffffffff60055416604051908152f35b50346102395780600319360112610239576020600454604051908152f35b50346102395760206003193601126102395760043590600254821015610239576020610f70836135c3565b90546040519160031b1c8152f35b5034610239578060031936011261023957610fd4604051610f9e81613402565b600581527f352e302e300000000000000000000000000000000000000000000000000000006020820152604051918291826132ff565b0390f35b503461023957604060031936011261023957610fff610ff561337a565b6024359033613e92565b602060405160018152f35b503461023957806003193601126102395760405190807f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace04805461104c816135f8565b808652926020926001928084169081156110dc5750600114611085575b610fd4876110798189038261341e565b604051918291826132ff565b815293507f46a2803e59a4de4e7a4c574b1243f25977ac4c77d5a1a4a609b5394cebb4a2aa5b8385106110c95750505050810160200161107982610fd45f80611069565b80548686018401529382019381016110ab565b9050879650610fd4979450602093506110799592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b82010192935f80611069565b50346102395780600319360112610239576111436142cd565b9190600192600154906111558261345f565b94611163604051968761341e565b82865261116f8361345f565b926020947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06020890195013686376111a682613649565b93875b8381106112015750505050604051958694604086019160408752518092526060860194965b8281106111e9578680610fd488888382036020850152613347565b875115158652968101968896509481019483016111ce565b61121281839b979996989a9b613698565b51612710908181029181830414901517156112a15790611233848993613ab5565b61123c826135c3565b90549060031b1c908181115f1461127c579061125791613aec565b611261828b613698565b528161126d8289613698565b525b01989795939694986111a9565b61128591613aec565b61128f828b613698565b528a61129b8289613698565b5261126f565b60248b7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b503461023957806003193601126102395760206112e96142cd565b50604051908152f35b50346102395780600319360112610239576020600354604051908152f35b5034610239576020806003193601126116d2576004359061132f613fc1565b3383527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0081526113658260408520541015613dc8565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254611392811515613e2d565b60019261139f8454613649565b91601e8202828104601e14831517156104d3576127109004906113cd6113c58385613aec565b933033613711565b50855490875b828110611608575050506113e782306144af565b600473ffffffffffffffffffffffffffffffffffffffff8581895416604051938480927f3b19e84a0000000000000000000000000000000000000000000000000000000082525afa91821561051d5761149c9387918a946115e9575b50604051809581927fa9059cbb0000000000000000000000000000000000000000000000000000000096878452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03818b305af192831561051d5787936115cc575b50879493925b611524575b50507f0f74fe264fb7d04b4800409b8a3562eb271296e19c3ec8835639635b3e858c4592506114f560405192604084526040840190613347565b938201528033930390a27f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005580f35b86548510156115c757848661153d61158795969761358e565b9590549561154b848a613698565b518c86604051998a809681958c835233600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b039460031b1c165af1908115610dbb57889485926115aa575b50019493926114b6565b6115c090893d8b1161042257610413818361341e565b505f6115a0565b6114bb565b6115e290873d891161042257610413818361341e565b505f6114b0565b611601919450823d8411610dee57610ddf818361341e565b925f611443565b8087602461162a73ffffffffffffffffffffffffffffffffffffffff9461358e565b9190549160405195869384927f70a0823100000000000000000000000000000000000000000000000000000000845230600485015260031b1c165afa8015610936578684918b948d91611698575b506116879291610e7691613862565b6116918289613698565b52016113d3565b94505050508782813d83116116cb575b6116b2818361341e565b810103126104bd57905188919083908790611687611678565b503d6116a8565b5080fd5b503461023957806003193601126102395760206116f1613d81565b604051908152f35b503461023957602060031936011261023957604060209173ffffffffffffffffffffffffffffffffffffffff61172d61337a565b1681527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0083522054604051908152f35b503461023957806003193601126102395760405180916001906001549384845260208094018095600184527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690845b81811061180e57505050816117c291038261341e565b6040519380850191818652518092526040850195925b8281106117e55785870386f35b835173ffffffffffffffffffffffffffffffffffffffff168752958101959281019284016117d8565b825473ffffffffffffffffffffffffffffffffffffffff168452928701929186019186016117ac565b50346102395780600319360112610239576020604051601e8152f35b50346104bd57602060031981813601126104bd5761186f61337a565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02546103e890818102918183041490151715611acb576127106118f191049173ffffffffffffffffffffffffffffffffffffffff165f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0060205260405f2090565b5410611a6d5773ffffffffffffffffffffffffffffffffffffffff5f541660035491813b156104bd57916040519283917f84db1dfb00000000000000000000000000000000000000000000000000000000835260a0600484015261195760a4840161443c565b918383030160248401528560025492838152019160025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace905f5b88828210611a5657505050505f838195938193306044840152306064840152608483015203925af18015611a4b57611a01575b507f279b343370f587af7fb675ae7c8578e9c8abcc373236ad02c501a4771fe7a7b8604051828152806119fb3394820161443c565b0390a280f35b90915067ffffffffffffffff8111611a1e576040525f905f6119c6565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040513d5f823e3d90fd5b835486528896509094019360019283019201611993565b606482604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601160248201527f556e646572203525204c502073686172650000000000000000000000000000006044820152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b346104bd575f6003193601126104bd5773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003611b6f5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60046040517fe07c8dba000000000000000000000000000000000000000000000000000000008152fd5b60406003193601126104bd57611bad61337a565b602490813567ffffffffffffffff81116104bd57366023820112156104bd578060040135611bda81613554565b92611be8604051948561341e565b81845260209182850193368783830101116104bd57815f928886930187378601015273ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016803014908115611e60575b50611b6f57611c61816005541633146136ac565b8116936040517f52d1902d0000000000000000000000000000000000000000000000000000000081528381600481895afa5f9181611e31575b50611ccf578686604051907f4c9c8ce30000000000000000000000000000000000000000000000000000000082526004820152fd5b8590877f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91828103611e035750843b15611dd45750817fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2815115611da057505f611d959481925190845af4903d15611d97573d611d7981613554565b90611d87604051928361341e565b81525f81943d92013e614619565b005b60609250614619565b935050505034611dac57005b807fb398979f0000000000000000000000000000000000000000000000000000000060049252fd5b82604051907f4c9c8ce30000000000000000000000000000000000000000000000000000000082526004820152fd5b604051907faa1d49a40000000000000000000000000000000000000000000000000000000082526004820152fd5b9091508481813d8311611e59575b611e49818361341e565b810103126104bd57519088611c9a565b503d611e3f565b9050817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5416141587611c4d565b346104bd5760206003193601126104bd5767ffffffffffffffff80600435116104bd573660236004350112156104bd5760043560040135116104bd573660246004356004013560051b6004350101116104bd57611ee9613fc1565b6001546004356004013503612439577f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02545f906004602073ffffffffffffffffffffffffffffffffffffffff5f5416604051928380927fbc06e81d0000000000000000000000000000000000000000000000000000000082525afa908115611a4b5773ffffffffffffffffffffffffffffffffffffffff916020915f9161241c575b506004604051809481937f313ce567000000000000000000000000000000000000000000000000000000008352165afa8015611a4b5760ff915f916123ed575b501660120360ff8111611acb57611fe190613b26565b505f915b6001548310156120fb5773ffffffffffffffffffffffffffffffffffffffff61200d8461358e565b90549060031b1c1690600435600401358410156120ce576040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600480830191909152306024808401919091529035600587901b0101356044820152906020826064815f875af18015611a4b576001936120a7936120a1926120af575b5060248760051b6004350101359061401b565b90613d74565b920191611fe5565b6120c79060203d60201161042257610413818361341e565b508761208e565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b90806123d157505b801561237357335f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace006020526040902054331561234357612220829161216d837f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254613d74565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0255335f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0060205260405f208381540190556040518381525f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a3335f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace006020526040902054613aec565b036122e55760405190604082526004356004013560408301527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60043560040135116104bd576020916004356004013560051b602460043501606083013781838201527fb60e972ce1258a7280a8e34204b1df88fcabbe8aea805e46bc1566cdc6e6e14833916060816004356004013560051b8101030190a260017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055604051908152f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4d696e74204661696c65640000000000000000000000000000000000000000006044820152fd5b60246040517fec442f050000000000000000000000000000000000000000000000000000000081525f6004820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4d696e74207174792069732030000000000000000000000000000000000000006044820152fd5b90610e766123e8926123e16142cd565b5092613862565b612103565b61240f915060203d602011612415575b612407818361341e565b810190613af9565b84611fcb565b503d6123fd565b6124339150823d8411610dee57610ddf818361341e565b85611f8b565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f416d6f756e7473206c656e677468206d69736d617463680000000000000000006044820152fd5b346104bd5760206116f1610302366133c0565b346104bd5760806003193601126104bd576124c361337a565b60243567ffffffffffffffff81116104bd576124e3903690600401613477565b60443567ffffffffffffffff81116104bd576125039036906004016134f4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0080549267ffffffffffffffff841680159081612e3f575b6001149081612e35575b159081612e2c575b50610a455760017fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000851617825560ff8460401c1615612df7575b60405161259381613402565b600981527f42616c756e69204c5000000000000000000000000000000000000000000000006020820152604051906125ca82613402565b600982527f42414c554e492d4c50000000000000000000000000000000000000000000000060208301526125fc6145c0565b6126046145c0565b80519067ffffffffffffffff8211611a1e5781906126427f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03546135f8565b601f8111612d8a575b50602090601f8311600114612c6a575f92612c5f575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c1916177f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03555b80519067ffffffffffffffff8211611a1e5781906126f17f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace04546135f8565b601f8111612be7575b50602090601f8311600114612ac7575f92612abc575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c1916177f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace04555b61276a6145c0565b6127726145c0565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005561279e6145c0565b7fffffffffffffffffffffffff00000000000000000000000000000000000000003381600554161760055573ffffffffffffffffffffffffffffffffffffffff809616905f5416175f55805167ffffffffffffffff8111611a1e576801000000000000000091828211611a1e5760209061281e836001548160015561388b565b0160015f525f5b828110612a865750505082519067ffffffffffffffff8211611a1e578111611a1e5761285781600254816002556138cb565b6020830160025f525f5b828110612a5257505050670de0b6b3a76400006004555f5b6001548110156129ea5784806128916107d58461358e565b61289e6107f38487613698565b6128a78361358e565b90545f546040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152908a1673ffffffffffffffffffffffffffffffffffffffff811660248301529290931b1c92909216929190602081604481875afa908115611a4b575f916129b8575b501561292b575b506001915001612879565b5f92604460209260405195869384927f095ea7b300000000000000000000000000000000000000000000000000000000845260048401527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248401525af1918215611a4b5760019215612920576129b19060203d60201161042257610413818361341e565b5086612920565b90506020813d6020116129e2575b816129d36020938361341e565b810103126104bd575188612919565b3d91506129c6565b5060ff8360643560035560401c16156129ff57005b7fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff81541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b60019060208351930192817f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace015501612861565b600190602089845116930192817fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015501612825565b015190508780612710565b92507f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace045f527f46a2803e59a4de4e7a4c574b1243f25977ac4c77d5a1a4a609b5394cebb4a2aa905f935b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084168510612bcc5760019450837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0811610612b95575b505050811b017f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0455612762565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055878080612b68565b81810151835560209485019460019093019290910190612b11565b612c4f907f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace045f527f46a2803e59a4de4e7a4c574b1243f25977ac4c77d5a1a4a609b5394cebb4a2aa601f850160051c81019160208610612c55575b601f0160051c0190613875565b886126fa565b9091508190612c42565b015190508880612661565b92507f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace035f527f2ae08a8e29253f69ac5d979a101956ab8f8d9d7ded63fa7a83b16fc47648eab0905f935b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084168510612d6f5760019450837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0811610612d38575b505050811b017f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03556126b3565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055888080612d0b565b81810151835560209485019460019093019290910190612cb4565b612df1907f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace035f527f2ae08a8e29253f69ac5d979a101956ab8f8d9d7ded63fa7a83b16fc47648eab0601f850160051c81019160208610612c5557601f0160051c0190613875565b8961264b565b680100000000000000017fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000008516178255612587565b9050158661254d565b303b159150612545565b604086901c60ff1615915061253b565b346104bd575f6003193601126104bd57602060405160128152f35b346104bd576020612e83612e7d366133c0565b91613711565b6040519015158152f35b346104bd575f6003193601126104bd57604051806002549182815260208091019260025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace915f905b828210612f0257610fd485612eee8189038261341e565b604051918291602083526020830190613347565b835486529485019460019384019390910190612ed7565b346104bd575f6003193601126104bd5760207f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254604051908152f35b346104bd5760406003193601126104bd57612f6e61337a565b6024359033156130355773ffffffffffffffffffffffffffffffffffffffff1690811561300557335f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0160205260409020825f526020528060405f20556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b60246040517f94280d620000000000000000000000000000000000000000000000000000000081525f6004820152fd5b60246040517fe602df050000000000000000000000000000000000000000000000000000000081525f6004820152fd5b346104bd5760206003193601126104bd5761307e61337a565b73ffffffffffffffffffffffffffffffffffffffff906130a3826005541633146136ac565b167fffffffffffffffffffffffff00000000000000000000000000000000000000005f5416175f555f80f35b346104bd575f6003193601126104bd57600180546130ec81613649565b905f5b81811061310c5760405160208082528190610fd490820186613347565b6131158161358e565b91905491604051907f70a082310000000000000000000000000000000000000000000000000000000082523060048301528160248173ffffffffffffffffffffffffffffffffffffffff602097889560031b1c165afa908115611a4b5786935f9261318e575b50506131878286613698565b52016130ef565b8194508092503d83116131b8575b6131a6818361341e565b810103126104bd57849151868061317b565b503d61319c565b346104bd575f6003193601126104bd576040515f7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03805490613200826135f8565b80855291602091600191828116908115613285575060011461322d575b610fd4866110798188038261341e565b5f90815293507f2ae08a8e29253f69ac5d979a101956ab8f8d9d7ded63fa7a83b16fc47648eab05b8385106132725750505050810160200161107982610fd48561321d565b8054868601840152938201938101613255565b879650610fd4979450602093506110799592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b82010192938561321d565b346104bd575f6003193601126104bd5760209073ffffffffffffffffffffffffffffffffffffffff5f54168152f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b9081518082526020808093019301915f5b828110613366575050505090565b835185529381019392810192600101613358565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036104bd57565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036104bd57565b60031960609101126104bd5773ffffffffffffffffffffffffffffffffffffffff9060043582811681036104bd579160243590811681036104bd579060443590565b6040810190811067ffffffffffffffff821117611a1e57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117611a1e57604052565b67ffffffffffffffff8111611a1e5760051b60200190565b9080601f830112156104bd5760209082356134918161345f565b9361349f604051958661341e565b81855260208086019260051b8201019283116104bd57602001905b8282106134c8575050505090565b813573ffffffffffffffffffffffffffffffffffffffff811681036104bd5781529083019083016134ba565b9080601f830112156104bd57602090823561350e8161345f565b9361351c604051958661341e565b81855260208086019260051b8201019283116104bd57602001905b828210613545575050505090565b81358152908301908301613537565b67ffffffffffffffff8111611a1e57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6001548110156120ce5760015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601905f90565b6002548110156120ce5760025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01905f90565b90600182811c9216801561363f575b602083101461361257565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b91607f1691613607565b906136538261345f565b613660604051918261341e565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061368e829461345f565b0190602036910137565b80518210156120ce5760209160051b010190565b156136b357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f6e6c7920466163746f727900000000000000000000000000000000000000006044820152fd5b919061375a8373ffffffffffffffffffffffffffffffffffffffff165f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0160205260405f2090565b335f5260205260405f2054927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff840361379d575b6137989350613e92565b600190565b8284106138235773ffffffffffffffffffffffffffffffffffffffff8116156130355733156130055782613798946138128373ffffffffffffffffffffffffffffffffffffffff165f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0160205260405f2090565b335f526020520360405f205561378e565b6040517ffb8f41b20000000000000000000000000000000000000000000000000000000081523360048201526024810185905260448101849052606490fd5b81810292918115918404141715611acb57565b818110613880575050565b5f8155600101613875565b808210613896575050565b6138c99160015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69182019101613875565b565b8082106138d6575050565b6138c99160025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9182019101613875565b1561391057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c6964206173736574206164647265737300000000000000000000006044820152fd5b1561397557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964207765696768740000000000000000000000000000000000006044820152fd5b908160209103126104bd575180151581036104bd5790565b156139f257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e6e6f742073776170207468652073616d6520746f6b656e0000000000006044820152fd5b15613a5757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152fd5b8115613abf570490565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b91908203918211611acb57565b908160209103126104bd575160ff811681036104bd5790565b9060ff8091169116039060ff8211611acb57565b60ff16604d8111611acb57600a0a90565b9073ffffffffffffffffffffffffffffffffffffffff80809216921692613b60838514156139eb565b801590613b6d8215613a50565b601e810291818304601e141715611acb57612710613b8c920490613aec565b92604051917f313ce56700000000000000000000000000000000000000000000000000000000938484526020918285600481875afa948515611a4b575f95613d29575b506040519586528286600481855afa958615611a4b575f96613d03575b5090606483925f54169460405195869384927f802431fb000000000000000000000000000000000000000000000000000000008452600484015260248301525f60448301525afa9182915f93613cd3575b5050613c4b57505050505f90565b9060ff831660ff82168181115f14613c93575050613c7f91613c85613c9095613c7f613c7a87613c8a96613b12565b613b26565b90613ab5565b613862565b91613b26565b90565b1015613cba57613c7f91613c85613c9095613cb4613c7a613c8a9588613b12565b90613862565b50613ccf9150670de0b6b3a764000092613862565b0490565b9080929350813d8311613cfc575b613ceb818361341e565b810103126104bd5751905f80613c3d565b503d613ce1565b8392919650613d20606491843d861161241557612407818361341e565b96919250613bec565b613d41919550833d851161241557612407818361341e565b935f613bcf565b908160209103126104bd575173ffffffffffffffffffffffffffffffffffffffff811681036104bd5790565b91908201809211611acb57565b613d896142cd565b507f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02548015613dc257610e76613c909260045490613862565b50505f90565b15613dcf57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e7420736861726500000000000000000000000000006044820152fd5b15613e3457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f206c697175696469747900000000000000000000000000000000000000006044820152fd5b9173ffffffffffffffffffffffffffffffffffffffff808416928315613f91571692831561234357825f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace008060205260405f205491838310613f38575091806020927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef94865f5284520360405f2055845f5260405f20818154019055604051908152a3565b6040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015260248101929092525060448101829052606490fd5b60246040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081525f6004820152fd5b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f006002815414613ff15760029055565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b73ffffffffffffffffffffffffffffffffffffffff91825f5416926040938451947f956fb51000000000000000000000000000000000000000000000000000000000865260209060049582888881875afa9788156142c3575f986142a2575b508416908051977f313ce56700000000000000000000000000000000000000000000000000000000808a52848a8a81875afa998a15614298575f9a614273575b5090888592845198899384928352165afa948515614269575f95614243575b50906044839251809581937f7de4fd100000000000000000000000000000000000000000000000000000000083528a8301525f60248301525afa9182915f93614213575b505061412c5750505050505f90565b9361414761413982613b26565b95610e768654978892613862565b9360ff8281169084168082111561417457505050610e7692613cb4613c7a613c90979694613c8594613b12565b929392811015614199575050610e7692613cb4613c7a613c90979694613c8594613b12565b9092509050601281036141b6575050613c909291610e7691613862565b670de0b6b3a76400000367ffffffffffffffff918282116141e75750610e7692613c90959492613c85921690613862565b6011907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b9080929350813d831161423c575b61422b818361341e565b810103126104bd5751905f8061411d565b503d614221565b8392919550614260604491843d861161241557612407818361341e565b959192506140d9565b50513d5f823e3d90fd5b8592919a5061428f8a91843d861161241557612407818361341e565b9a9192506140ba565b83513d5f823e3d90fd5b859198506142bc90843d8611610dee57610ddf818361341e565b979061407a565b82513d5f823e3d90fd5b5f906001916001546142de81613649565b935f915b8083106142f0575050509190565b90919273ffffffffffffffffffffffffffffffffffffffff6143118561358e565b90549060031b1c169060409182517f313ce567000000000000000000000000000000000000000000000000000000008152602060049181818481875afa801561443257614415575b508451917f70a0823100000000000000000000000000000000000000000000000000000000835230908301528082602481865afa94851561440c575090869392915f956143d6575b50506143cd92936143b19161401b565b6143bb878a613698565b526143c68689613698565b5190613d74565b930191906142e2565b819550809294503d8311614405575b6143ef818361341e565b810103126104bd579151918491806143cd6143a1565b503d6143e5565b513d5f823e3d90fd5b61442b90823d841161241557612407818361341e565b505f614359565b86513d5f823e3d90fd5b6001906001549182825260208092019260015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6925f905b82821061448457505050505090565b845473ffffffffffffffffffffffffffffffffffffffff168652948501949383019390830190614475565b919073ffffffffffffffffffffffffffffffffffffffff8316908115613f9157815f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace008060205260405f2054948286106145695750817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef925f959660209386885284520360408620557f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02818154039055604051908152a3565b6040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9190911660048201526024810186905260448101839052606490fd5b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c16156145ef57565b60046040517fd7e6bcf8000000000000000000000000000000000000000000000000000000008152fd5b90614658575080511561462e57805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b815115806146b0575b614669575090565b60249073ffffffffffffffffffffffffffffffffffffffff604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b1561466156fea26469706673582212201184595f8c7c7c99a67ab69e50b78d49d39dc26c0d8e5514df7f8017227a08b164736f6c63430008190033",
  "deployedBytecode": "0x6080806040526004361015610012575f80fd5b5f905f3560e01c90816301d22ccd146132d05750806306fdde03146131bf5780630902f1ac146130cf5780630918281b14613065578063095ea7b314612f5557806318160ddd14612f1957806322acb86714612e8d57806323b872dd14612e6a578063313ce56714612e4f57806346448548146124aa5780634aa06652146124975780634de59aa314611e8e5780634f1ef28614611b9957806352d1902d14611af85780635568081a1461185357806367a6c4401461183757806367e4ac2c1461175d57806370a08231146116f95780637a419317146116d65780637f8661a1146113105780637fec8d38146112f25780638299cc00146112ce57806389ab35321461112a57806395d89b411461100a578063a9059cbb14610fd8578063ad3cb1cc14610f7e578063b5f163ff14610f45578063c2ee3a0814610f27578063c45a015514610ef3578063ce83b10c14610ad7578063cf35bdd014610a87578063d1f51274146105bc578063dd62ed3e14610528578063df791e501461023c5763ed61d2fe1461019f575f80fd5b34610239576020600319360112610239576004356101bb6142cd565b809150518210156101db576020916101d291613698565b51604051908152f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f496e76616c696420617373657420696e646578000000000000000000000000006044820152fd5b80fd5b50346102395761024b366133c0565b909291610256613fc1565b73ffffffffffffffffffffffffffffffffffffffff918285169282169161027f848414156139eb565b81159561028c8715613a50565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490526020979088816064818b8a5af1801561051d57610500575b50601e840290848204601e1417156104d3579061030261271061030894930485613aec565b91613b37565b936040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201528681602481885afa9081156104c8579086918391610493575b5010610435576040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810186905290868260448184895af190811561042957506103fc575b5060405190815283858201527fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606260403392a460017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055604051908152f35b61041b90863d8811610422575b610413818361341e565b8101906139d3565b505f61039e565b503d610409565b604051903d90823e3d90fd5b606486604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601660248201527f496e73756666696369656e74204c6971756964697479000000000000000000006044820152fd5b809250888092503d83116104c1575b6104ac818361341e565b810103126104bd578590515f61034e565b5f80fd5b503d6104a2565b6040513d84823e3d90fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b61051690893d8b1161042257610413818361341e565b505f6102dd565b6040513d8a823e3d90fd5b50346102395760406003193601126102395761054261337a565b73ffffffffffffffffffffffffffffffffffffffff6105a661056261339d565b9273ffffffffffffffffffffffffffffffffffffffff165f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0160205260405f2090565b91165f52602052602060405f2054604051908152f35b50346102395760a0600319360112610239576105d661337a565b67ffffffffffffffff919060248035848111610a83576105fa903690600401613477565b9160448035868111610a7f576106149036906004016134f4565b9160843593878516809503610a7b577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009384549860ff8a60401c168015610a6f575b610a45577fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000009987680100000000000000009b8c9216171786557fffffffffffffffffffffffff00000000000000000000000000000000000000003381600554161760055573ffffffffffffffffffffffffffffffffffffffff809516908a5416178955875199818b116109e557808b116109e55760019a6106fc818d818154915561388b565b6020809a018c8c528c8c5b838110610a11575050505082519182116109e55781116109b95790816107378b96959493600254816002556138cb565b88820160028b528a5b828110610988575050670de0b6b3a764000060045550929350909187895b6107be575b887fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d28989896064356003557fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff8154169055604051908152a180f35b89548110156109835783806107e66107d58461358e565b929054600393841b1c161515613909565b6107fb6107f38486613698565b51151561396e565b6108048361358e565b90548c546040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015290891673ffffffffffffffffffffffffffffffffffffffff811660248301529290931b1c9290921691908a81604481865afa90811561097857928c928c928f9a99989796958591610941575b5015610897575b505050508501909192939461075e565b88995060409891929394959697985194859384927f095ea7b300000000000000000000000000000000000000000000000000000000845260048401527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a8401525af1801561093657918b9695949392918792610919575b8b91928b91610887565b61092f908b3d8d1161042257610413818361341e565b505f61090f565b6040513d8c823e3d90fd5b93929a5050925081813d8311610971575b61095c818361341e565b810103126104bd578c978c928c92515f610880565b503d610952565b6040513d8e823e3d90fd5b610763565b81517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace820155908a01908701610740565b82897f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b838a7f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b8c89845116930192817fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155018d90610707565b60046040517ff92ee8a9000000000000000000000000000000000000000000000000000000008152fd5b5086818b161015610656565b8680fd5b8580fd5b8380fd5b5034610239576020600319360112610239576004359060015482101561023957602073ffffffffffffffffffffffffffffffffffffffff610ac78461358e565b9190546040519260031b1c168152f35b503461023957604060031936011261023957600435610af461339d565b90610afd613fc1565b3383526020907f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace008252610b368160408620541015613dc8565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254610b63811515613e2d565b600193610b708554613649565b92601e8102818104601e1482151715610ec657612710900492610b9e610b968584613aec565b923033613711565b50865490885b828110610df557505050610bb881306144af565b73ffffffffffffffffffffffffffffffffffffffff92600486858a5416604051928380927f3b19e84a0000000000000000000000000000000000000000000000000000000082525afa908115610dbb57610c6e9288918b93610dc6575b50604051809481927fa9059cbb0000000000000000000000000000000000000000000000000000000095868452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03818c305af1918215610dbb578892610d9e575b509088905b610cf8575b5050917f0f74fe264fb7d04b4800409b8a3562eb271296e19c3ec8835639635b3e858c459391610cca93604051948594604086526040860190613347565b9684015216930390a27f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005580f35b8754811015610d99579081878782878d8a610d21610d18610d5a9a61358e565b95905496613698565b5160405189815273ffffffffffffffffffffffffffffffffffffffff909416600485015260248401529197889485939184906044820190565b039460031b1c165af19081156109365789938492610d7c575b50019091610c87565b610d92908a3d8c1161042257610413818361341e565b505f610d73565b610c8c565b610db490883d8a1161042257610413818361341e565b505f610c82565b6040513d8b823e3d90fd5b610de7919350823d8411610dee575b610ddf818361341e565b810190613d48565b915f610c15565b503d610dd5565b80886024610e1773ffffffffffffffffffffffffffffffffffffffff9461358e565b9190549160405195869384927f70a0823100000000000000000000000000000000000000000000000000000000845230600485015260031b1c165afa918b8315610429578b938592889291610e8c575b50610e7b9291610e7691613862565b613ab5565b610e85828a613698565b5201610ba4565b94505050508882813d8311610ebf575b610ea6818361341e565b810103126104bd57905189919083908690610e7b610e67565b503d610e9c565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5034610239578060031936011261023957602073ffffffffffffffffffffffffffffffffffffffff60055416604051908152f35b50346102395780600319360112610239576020600454604051908152f35b50346102395760206003193601126102395760043590600254821015610239576020610f70836135c3565b90546040519160031b1c8152f35b5034610239578060031936011261023957610fd4604051610f9e81613402565b600581527f352e302e300000000000000000000000000000000000000000000000000000006020820152604051918291826132ff565b0390f35b503461023957604060031936011261023957610fff610ff561337a565b6024359033613e92565b602060405160018152f35b503461023957806003193601126102395760405190807f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace04805461104c816135f8565b808652926020926001928084169081156110dc5750600114611085575b610fd4876110798189038261341e565b604051918291826132ff565b815293507f46a2803e59a4de4e7a4c574b1243f25977ac4c77d5a1a4a609b5394cebb4a2aa5b8385106110c95750505050810160200161107982610fd45f80611069565b80548686018401529382019381016110ab565b9050879650610fd4979450602093506110799592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b82010192935f80611069565b50346102395780600319360112610239576111436142cd565b9190600192600154906111558261345f565b94611163604051968761341e565b82865261116f8361345f565b926020947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06020890195013686376111a682613649565b93875b8381106112015750505050604051958694604086019160408752518092526060860194965b8281106111e9578680610fd488888382036020850152613347565b875115158652968101968896509481019483016111ce565b61121281839b979996989a9b613698565b51612710908181029181830414901517156112a15790611233848993613ab5565b61123c826135c3565b90549060031b1c908181115f1461127c579061125791613aec565b611261828b613698565b528161126d8289613698565b525b01989795939694986111a9565b61128591613aec565b61128f828b613698565b528a61129b8289613698565b5261126f565b60248b7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b503461023957806003193601126102395760206112e96142cd565b50604051908152f35b50346102395780600319360112610239576020600354604051908152f35b5034610239576020806003193601126116d2576004359061132f613fc1565b3383527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0081526113658260408520541015613dc8565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254611392811515613e2d565b60019261139f8454613649565b91601e8202828104601e14831517156104d3576127109004906113cd6113c58385613aec565b933033613711565b50855490875b828110611608575050506113e782306144af565b600473ffffffffffffffffffffffffffffffffffffffff8581895416604051938480927f3b19e84a0000000000000000000000000000000000000000000000000000000082525afa91821561051d5761149c9387918a946115e9575b50604051809581927fa9059cbb0000000000000000000000000000000000000000000000000000000096878452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03818b305af192831561051d5787936115cc575b50879493925b611524575b50507f0f74fe264fb7d04b4800409b8a3562eb271296e19c3ec8835639635b3e858c4592506114f560405192604084526040840190613347565b938201528033930390a27f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005580f35b86548510156115c757848661153d61158795969761358e565b9590549561154b848a613698565b518c86604051998a809681958c835233600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b039460031b1c165af1908115610dbb57889485926115aa575b50019493926114b6565b6115c090893d8b1161042257610413818361341e565b505f6115a0565b6114bb565b6115e290873d891161042257610413818361341e565b505f6114b0565b611601919450823d8411610dee57610ddf818361341e565b925f611443565b8087602461162a73ffffffffffffffffffffffffffffffffffffffff9461358e565b9190549160405195869384927f70a0823100000000000000000000000000000000000000000000000000000000845230600485015260031b1c165afa8015610936578684918b948d91611698575b506116879291610e7691613862565b6116918289613698565b52016113d3565b94505050508782813d83116116cb575b6116b2818361341e565b810103126104bd57905188919083908790611687611678565b503d6116a8565b5080fd5b503461023957806003193601126102395760206116f1613d81565b604051908152f35b503461023957602060031936011261023957604060209173ffffffffffffffffffffffffffffffffffffffff61172d61337a565b1681527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0083522054604051908152f35b503461023957806003193601126102395760405180916001906001549384845260208094018095600184527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690845b81811061180e57505050816117c291038261341e565b6040519380850191818652518092526040850195925b8281106117e55785870386f35b835173ffffffffffffffffffffffffffffffffffffffff168752958101959281019284016117d8565b825473ffffffffffffffffffffffffffffffffffffffff168452928701929186019186016117ac565b50346102395780600319360112610239576020604051601e8152f35b50346104bd57602060031981813601126104bd5761186f61337a565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02546103e890818102918183041490151715611acb576127106118f191049173ffffffffffffffffffffffffffffffffffffffff165f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0060205260405f2090565b5410611a6d5773ffffffffffffffffffffffffffffffffffffffff5f541660035491813b156104bd57916040519283917f84db1dfb00000000000000000000000000000000000000000000000000000000835260a0600484015261195760a4840161443c565b918383030160248401528560025492838152019160025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace905f5b88828210611a5657505050505f838195938193306044840152306064840152608483015203925af18015611a4b57611a01575b507f279b343370f587af7fb675ae7c8578e9c8abcc373236ad02c501a4771fe7a7b8604051828152806119fb3394820161443c565b0390a280f35b90915067ffffffffffffffff8111611a1e576040525f905f6119c6565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040513d5f823e3d90fd5b835486528896509094019360019283019201611993565b606482604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601160248201527f556e646572203525204c502073686172650000000000000000000000000000006044820152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b346104bd575f6003193601126104bd5773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003611b6f5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60046040517fe07c8dba000000000000000000000000000000000000000000000000000000008152fd5b60406003193601126104bd57611bad61337a565b602490813567ffffffffffffffff81116104bd57366023820112156104bd578060040135611bda81613554565b92611be8604051948561341e565b81845260209182850193368783830101116104bd57815f928886930187378601015273ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016803014908115611e60575b50611b6f57611c61816005541633146136ac565b8116936040517f52d1902d0000000000000000000000000000000000000000000000000000000081528381600481895afa5f9181611e31575b50611ccf578686604051907f4c9c8ce30000000000000000000000000000000000000000000000000000000082526004820152fd5b8590877f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91828103611e035750843b15611dd45750817fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2815115611da057505f611d959481925190845af4903d15611d97573d611d7981613554565b90611d87604051928361341e565b81525f81943d92013e614619565b005b60609250614619565b935050505034611dac57005b807fb398979f0000000000000000000000000000000000000000000000000000000060049252fd5b82604051907f4c9c8ce30000000000000000000000000000000000000000000000000000000082526004820152fd5b604051907faa1d49a40000000000000000000000000000000000000000000000000000000082526004820152fd5b9091508481813d8311611e59575b611e49818361341e565b810103126104bd57519088611c9a565b503d611e3f565b9050817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5416141587611c4d565b346104bd5760206003193601126104bd5767ffffffffffffffff80600435116104bd573660236004350112156104bd5760043560040135116104bd573660246004356004013560051b6004350101116104bd57611ee9613fc1565b6001546004356004013503612439577f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02545f906004602073ffffffffffffffffffffffffffffffffffffffff5f5416604051928380927fbc06e81d0000000000000000000000000000000000000000000000000000000082525afa908115611a4b5773ffffffffffffffffffffffffffffffffffffffff916020915f9161241c575b506004604051809481937f313ce567000000000000000000000000000000000000000000000000000000008352165afa8015611a4b5760ff915f916123ed575b501660120360ff8111611acb57611fe190613b26565b505f915b6001548310156120fb5773ffffffffffffffffffffffffffffffffffffffff61200d8461358e565b90549060031b1c1690600435600401358410156120ce576040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600480830191909152306024808401919091529035600587901b0101356044820152906020826064815f875af18015611a4b576001936120a7936120a1926120af575b5060248760051b6004350101359061401b565b90613d74565b920191611fe5565b6120c79060203d60201161042257610413818361341e565b508761208e565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b90806123d157505b801561237357335f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace006020526040902054331561234357612220829161216d837f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254613d74565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0255335f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0060205260405f208381540190556040518381525f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a3335f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace006020526040902054613aec565b036122e55760405190604082526004356004013560408301527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60043560040135116104bd576020916004356004013560051b602460043501606083013781838201527fb60e972ce1258a7280a8e34204b1df88fcabbe8aea805e46bc1566cdc6e6e14833916060816004356004013560051b8101030190a260017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055604051908152f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4d696e74204661696c65640000000000000000000000000000000000000000006044820152fd5b60246040517fec442f050000000000000000000000000000000000000000000000000000000081525f6004820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4d696e74207174792069732030000000000000000000000000000000000000006044820152fd5b90610e766123e8926123e16142cd565b5092613862565b612103565b61240f915060203d602011612415575b612407818361341e565b810190613af9565b84611fcb565b503d6123fd565b6124339150823d8411610dee57610ddf818361341e565b85611f8b565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f416d6f756e7473206c656e677468206d69736d617463680000000000000000006044820152fd5b346104bd5760206116f1610302366133c0565b346104bd5760806003193601126104bd576124c361337a565b60243567ffffffffffffffff81116104bd576124e3903690600401613477565b60443567ffffffffffffffff81116104bd576125039036906004016134f4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0080549267ffffffffffffffff841680159081612e3f575b6001149081612e35575b159081612e2c575b50610a455760017fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000851617825560ff8460401c1615612df7575b60405161259381613402565b600981527f42616c756e69204c5000000000000000000000000000000000000000000000006020820152604051906125ca82613402565b600982527f42414c554e492d4c50000000000000000000000000000000000000000000000060208301526125fc6145c0565b6126046145c0565b80519067ffffffffffffffff8211611a1e5781906126427f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03546135f8565b601f8111612d8a575b50602090601f8311600114612c6a575f92612c5f575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c1916177f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03555b80519067ffffffffffffffff8211611a1e5781906126f17f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace04546135f8565b601f8111612be7575b50602090601f8311600114612ac7575f92612abc575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c1916177f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace04555b61276a6145c0565b6127726145c0565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005561279e6145c0565b7fffffffffffffffffffffffff00000000000000000000000000000000000000003381600554161760055573ffffffffffffffffffffffffffffffffffffffff809616905f5416175f55805167ffffffffffffffff8111611a1e576801000000000000000091828211611a1e5760209061281e836001548160015561388b565b0160015f525f5b828110612a865750505082519067ffffffffffffffff8211611a1e578111611a1e5761285781600254816002556138cb565b6020830160025f525f5b828110612a5257505050670de0b6b3a76400006004555f5b6001548110156129ea5784806128916107d58461358e565b61289e6107f38487613698565b6128a78361358e565b90545f546040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152306004820152908a1673ffffffffffffffffffffffffffffffffffffffff811660248301529290931b1c92909216929190602081604481875afa908115611a4b575f916129b8575b501561292b575b506001915001612879565b5f92604460209260405195869384927f095ea7b300000000000000000000000000000000000000000000000000000000845260048401527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248401525af1918215611a4b5760019215612920576129b19060203d60201161042257610413818361341e565b5086612920565b90506020813d6020116129e2575b816129d36020938361341e565b810103126104bd575188612919565b3d91506129c6565b5060ff8360643560035560401c16156129ff57005b7fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff81541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b60019060208351930192817f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace015501612861565b600190602089845116930192817fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015501612825565b015190508780612710565b92507f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace045f527f46a2803e59a4de4e7a4c574b1243f25977ac4c77d5a1a4a609b5394cebb4a2aa905f935b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084168510612bcc5760019450837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0811610612b95575b505050811b017f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0455612762565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055878080612b68565b81810151835560209485019460019093019290910190612b11565b612c4f907f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace045f527f46a2803e59a4de4e7a4c574b1243f25977ac4c77d5a1a4a609b5394cebb4a2aa601f850160051c81019160208610612c55575b601f0160051c0190613875565b886126fa565b9091508190612c42565b015190508880612661565b92507f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace035f527f2ae08a8e29253f69ac5d979a101956ab8f8d9d7ded63fa7a83b16fc47648eab0905f935b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084168510612d6f5760019450837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0811610612d38575b505050811b017f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03556126b3565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055888080612d0b565b81810151835560209485019460019093019290910190612cb4565b612df1907f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace035f527f2ae08a8e29253f69ac5d979a101956ab8f8d9d7ded63fa7a83b16fc47648eab0601f850160051c81019160208610612c5557601f0160051c0190613875565b8961264b565b680100000000000000017fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000008516178255612587565b9050158661254d565b303b159150612545565b604086901c60ff1615915061253b565b346104bd575f6003193601126104bd57602060405160128152f35b346104bd576020612e83612e7d366133c0565b91613711565b6040519015158152f35b346104bd575f6003193601126104bd57604051806002549182815260208091019260025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace915f905b828210612f0257610fd485612eee8189038261341e565b604051918291602083526020830190613347565b835486529485019460019384019390910190612ed7565b346104bd575f6003193601126104bd5760207f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254604051908152f35b346104bd5760406003193601126104bd57612f6e61337a565b6024359033156130355773ffffffffffffffffffffffffffffffffffffffff1690811561300557335f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0160205260409020825f526020528060405f20556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b60246040517f94280d620000000000000000000000000000000000000000000000000000000081525f6004820152fd5b60246040517fe602df050000000000000000000000000000000000000000000000000000000081525f6004820152fd5b346104bd5760206003193601126104bd5761307e61337a565b73ffffffffffffffffffffffffffffffffffffffff906130a3826005541633146136ac565b167fffffffffffffffffffffffff00000000000000000000000000000000000000005f5416175f555f80f35b346104bd575f6003193601126104bd57600180546130ec81613649565b905f5b81811061310c5760405160208082528190610fd490820186613347565b6131158161358e565b91905491604051907f70a082310000000000000000000000000000000000000000000000000000000082523060048301528160248173ffffffffffffffffffffffffffffffffffffffff602097889560031b1c165afa908115611a4b5786935f9261318e575b50506131878286613698565b52016130ef565b8194508092503d83116131b8575b6131a6818361341e565b810103126104bd57849151868061317b565b503d61319c565b346104bd575f6003193601126104bd576040515f7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03805490613200826135f8565b80855291602091600191828116908115613285575060011461322d575b610fd4866110798188038261341e565b5f90815293507f2ae08a8e29253f69ac5d979a101956ab8f8d9d7ded63fa7a83b16fc47648eab05b8385106132725750505050810160200161107982610fd48561321d565b8054868601840152938201938101613255565b879650610fd4979450602093506110799592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b82010192938561321d565b346104bd575f6003193601126104bd5760209073ffffffffffffffffffffffffffffffffffffffff5f54168152f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b9081518082526020808093019301915f5b828110613366575050505090565b835185529381019392810192600101613358565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036104bd57565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036104bd57565b60031960609101126104bd5773ffffffffffffffffffffffffffffffffffffffff9060043582811681036104bd579160243590811681036104bd579060443590565b6040810190811067ffffffffffffffff821117611a1e57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117611a1e57604052565b67ffffffffffffffff8111611a1e5760051b60200190565b9080601f830112156104bd5760209082356134918161345f565b9361349f604051958661341e565b81855260208086019260051b8201019283116104bd57602001905b8282106134c8575050505090565b813573ffffffffffffffffffffffffffffffffffffffff811681036104bd5781529083019083016134ba565b9080601f830112156104bd57602090823561350e8161345f565b9361351c604051958661341e565b81855260208086019260051b8201019283116104bd57602001905b828210613545575050505090565b81358152908301908301613537565b67ffffffffffffffff8111611a1e57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6001548110156120ce5760015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601905f90565b6002548110156120ce5760025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01905f90565b90600182811c9216801561363f575b602083101461361257565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b91607f1691613607565b906136538261345f565b613660604051918261341e565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061368e829461345f565b0190602036910137565b80518210156120ce5760209160051b010190565b156136b357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f6e6c7920466163746f727900000000000000000000000000000000000000006044820152fd5b919061375a8373ffffffffffffffffffffffffffffffffffffffff165f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0160205260405f2090565b335f5260205260405f2054927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff840361379d575b6137989350613e92565b600190565b8284106138235773ffffffffffffffffffffffffffffffffffffffff8116156130355733156130055782613798946138128373ffffffffffffffffffffffffffffffffffffffff165f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0160205260405f2090565b335f526020520360405f205561378e565b6040517ffb8f41b20000000000000000000000000000000000000000000000000000000081523360048201526024810185905260448101849052606490fd5b81810292918115918404141715611acb57565b818110613880575050565b5f8155600101613875565b808210613896575050565b6138c99160015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69182019101613875565b565b8082106138d6575050565b6138c99160025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9182019101613875565b1561391057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c6964206173736574206164647265737300000000000000000000006044820152fd5b1561397557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964207765696768740000000000000000000000000000000000006044820152fd5b908160209103126104bd575180151581036104bd5790565b156139f257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e6e6f742073776170207468652073616d6520746f6b656e0000000000006044820152fd5b15613a5757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152fd5b8115613abf570490565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b91908203918211611acb57565b908160209103126104bd575160ff811681036104bd5790565b9060ff8091169116039060ff8211611acb57565b60ff16604d8111611acb57600a0a90565b9073ffffffffffffffffffffffffffffffffffffffff80809216921692613b60838514156139eb565b801590613b6d8215613a50565b601e810291818304601e141715611acb57612710613b8c920490613aec565b92604051917f313ce56700000000000000000000000000000000000000000000000000000000938484526020918285600481875afa948515611a4b575f95613d29575b506040519586528286600481855afa958615611a4b575f96613d03575b5090606483925f54169460405195869384927f802431fb000000000000000000000000000000000000000000000000000000008452600484015260248301525f60448301525afa9182915f93613cd3575b5050613c4b57505050505f90565b9060ff831660ff82168181115f14613c93575050613c7f91613c85613c9095613c7f613c7a87613c8a96613b12565b613b26565b90613ab5565b613862565b91613b26565b90565b1015613cba57613c7f91613c85613c9095613cb4613c7a613c8a9588613b12565b90613862565b50613ccf9150670de0b6b3a764000092613862565b0490565b9080929350813d8311613cfc575b613ceb818361341e565b810103126104bd5751905f80613c3d565b503d613ce1565b8392919650613d20606491843d861161241557612407818361341e565b96919250613bec565b613d41919550833d851161241557612407818361341e565b935f613bcf565b908160209103126104bd575173ffffffffffffffffffffffffffffffffffffffff811681036104bd5790565b91908201809211611acb57565b613d896142cd565b507f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02548015613dc257610e76613c909260045490613862565b50505f90565b15613dcf57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e7420736861726500000000000000000000000000006044820152fd5b15613e3457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f206c697175696469747900000000000000000000000000000000000000006044820152fd5b9173ffffffffffffffffffffffffffffffffffffffff808416928315613f91571692831561234357825f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace008060205260405f205491838310613f38575091806020927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef94865f5284520360405f2055845f5260405f20818154019055604051908152a3565b6040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015260248101929092525060448101829052606490fd5b60246040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081525f6004820152fd5b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f006002815414613ff15760029055565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b73ffffffffffffffffffffffffffffffffffffffff91825f5416926040938451947f956fb51000000000000000000000000000000000000000000000000000000000865260209060049582888881875afa9788156142c3575f986142a2575b508416908051977f313ce56700000000000000000000000000000000000000000000000000000000808a52848a8a81875afa998a15614298575f9a614273575b5090888592845198899384928352165afa948515614269575f95614243575b50906044839251809581937f7de4fd100000000000000000000000000000000000000000000000000000000083528a8301525f60248301525afa9182915f93614213575b505061412c5750505050505f90565b9361414761413982613b26565b95610e768654978892613862565b9360ff8281169084168082111561417457505050610e7692613cb4613c7a613c90979694613c8594613b12565b929392811015614199575050610e7692613cb4613c7a613c90979694613c8594613b12565b9092509050601281036141b6575050613c909291610e7691613862565b670de0b6b3a76400000367ffffffffffffffff918282116141e75750610e7692613c90959492613c85921690613862565b6011907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b9080929350813d831161423c575b61422b818361341e565b810103126104bd5751905f8061411d565b503d614221565b8392919550614260604491843d861161241557612407818361341e565b959192506140d9565b50513d5f823e3d90fd5b8592919a5061428f8a91843d861161241557612407818361341e565b9a9192506140ba565b83513d5f823e3d90fd5b859198506142bc90843d8611610dee57610ddf818361341e565b979061407a565b82513d5f823e3d90fd5b5f906001916001546142de81613649565b935f915b8083106142f0575050509190565b90919273ffffffffffffffffffffffffffffffffffffffff6143118561358e565b90549060031b1c169060409182517f313ce567000000000000000000000000000000000000000000000000000000008152602060049181818481875afa801561443257614415575b508451917f70a0823100000000000000000000000000000000000000000000000000000000835230908301528082602481865afa94851561440c575090869392915f956143d6575b50506143cd92936143b19161401b565b6143bb878a613698565b526143c68689613698565b5190613d74565b930191906142e2565b819550809294503d8311614405575b6143ef818361341e565b810103126104bd579151918491806143cd6143a1565b503d6143e5565b513d5f823e3d90fd5b61442b90823d841161241557612407818361341e565b505f614359565b86513d5f823e3d90fd5b6001906001549182825260208092019260015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6925f905b82821061448457505050505090565b845473ffffffffffffffffffffffffffffffffffffffff168652948501949383019390830190614475565b919073ffffffffffffffffffffffffffffffffffffffff8316908115613f9157815f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace008060205260405f2054948286106145695750817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef925f959660209386885284520360408620557f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02818154039055604051908152a3565b6040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9190911660048201526024810186905260448101839052606490fd5b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c16156145ef57565b60046040517fd7e6bcf8000000000000000000000000000000000000000000000000000000008152fd5b90614658575080511561462e57805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b815115806146b0575b614669575090565b60249073ffffffffffffffffffffffffffffffffffffffff604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b1561466156fea26469706673582212201184595f8c7c7c99a67ab69e50b78d49d39dc26c0d8e5514df7f8017227a08b164736f6c63430008190033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256[])": {
        "details": "Adds liquidity to the pool by transferring specified amounts of assets from the caller's address to the contract. The function calculates the received amount of each asset and mints new LP tokens proporzionalmente.",
        "params": {
          "amounts": "An array of amounts for each asset to be added as liquidity."
        },
        "returns": {
          "_0": "The amount of LP tokens minted and transferred to the caller."
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "assetsLiquidityInWNATIVE(uint256)": {
        "details": "Returns the valuation of a specific asset in USD.",
        "params": {
          "assetIndex": "The index of the asset in the assets array."
        },
        "returns": {
          "_0": "The valuation of the specified asset in USD."
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "exit(uint256)": {
        "details": "Allows a user to exit the pool by redeeming their share of assets.",
        "params": {
          "share": "The amount of shares to redeem. Requirements: - The caller must have a balance of shares greater than or equal to the specified amount. - The pool must have sufficient assets to cover the redeemed shares. Effects: - Decreases the caller's share balance by the specified amount. - Transfers the proportional amount of each asset in the pool to the caller. Emits: - LiquidityRemoved event with the caller's address and the redeemed share amount."
        }
      },
      "getAmountOut(address,address,uint256)": {
        "details": "Calculates the amount of `toToken` that will be received after swapping `fromToken` for `toToken`.",
        "params": {
          "amount": "The amount of `fromToken` being swapped.",
          "fromToken": "The address of the token being swapped from.",
          "toToken": "The address of the token being swapped to."
        },
        "returns": {
          "_0": "The amount of `toToken` that will be received after the swap."
        }
      },
      "getDeviation()": {
        "details": "Returns the deviation of the current weights of each asset from the target weights.",
        "returns": {
          "deviations": "An array of uint256 values representing the deviation of each asset's current weight from the target weight.",
          "directions": "An array of booleans indicating whether each current weight is greater than the target weight."
        }
      },
      "getReserves()": {
        "details": "Returns the current reserves of all assets held by the contract.",
        "returns": {
          "_0": "An array containing the balances of all assets respectively."
        }
      },
      "getUnitPriceWNATIVE()": {
        "details": "Returns the unit price of the pool. The unit price is calculated by dividing the total valuation of the pool by the total supply of tokens. If the total supply is 0, the unit price is 0.",
        "returns": {
          "_0": "The unit price of the pool in USD."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "performRebalanceIfNeeded(address)": {
        "details": "Performs a rebalance if needed. This internal function checks if a rebalance is needed by calling the `checkRebalance` function of the `rebalancer` contract. If a rebalance is required, it calls the `rebalance` function of the `rebalancer` contract to perform the rebalance. Requirements: - The `assets` array must contain the addresses of the assets to rebalance. - The `weights` array must contain the corresponding weights for the assets. - The `rebalanceStatus` must not be `NoRebalance`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "swap(address,address,uint256)": {
        "details": "Swaps tokens from one address to another.",
        "params": {
          "amount": "The amount of tokens to swap.",
          "fromToken": "The address of the token to swap from.",
          "toToken": "The address of the token to swap to."
        },
        "returns": {
          "_0": "The amount of tokens received after the swap."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalLiquidityInWNATIVE()": {
        "details": "Returns the total valuation in USD.",
        "returns": {
          "_0": "The total valuation in USD."
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAmountOut(address,address,uint256)": {
        "notice": "This function is view-only and does not modify the contract state.The `fromToken` and `toToken` must be either `asset1` or `asset2`.The `fromToken` and `toToken` cannot be the same token.The `amount` must be greater than zero.The returned amount does not include any swap fees."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2824,
        "contract": "contracts/BaluniV1Pool.sol:BaluniV1Pool",
        "label": "rebalancer",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IBaluniV1Rebalancer)5116"
      },
      {
        "astId": 2827,
        "contract": "contracts/BaluniV1Pool.sol:BaluniV1Pool",
        "label": "assets",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2830,
        "contract": "contracts/BaluniV1Pool.sol:BaluniV1Pool",
        "label": "weights",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2832,
        "contract": "contracts/BaluniV1Pool.sol:BaluniV1Pool",
        "label": "trigger",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2834,
        "contract": "contracts/BaluniV1Pool.sol:BaluniV1Pool",
        "label": "ONE",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2836,
        "contract": "contracts/BaluniV1Pool.sol:BaluniV1Pool",
        "label": "factory",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IBaluniV1Rebalancer)5116": {
        "encoding": "inplace",
        "label": "contract IBaluniV1Rebalancer",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}