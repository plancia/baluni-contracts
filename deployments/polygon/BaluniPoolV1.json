{
  "address": "0x26EcB9aCa9d7d44EAbbE3f4f6905DEbb115843Dc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wnative",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yearnVault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "predictor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum BaluniPoolV1.Coin",
          "name": "token",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "predictedPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "PredictionRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "predictor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardWithdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "calculateReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "distributionCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exitLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPrediction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "predictor",
              "type": "address"
            },
            {
              "internalType": "enum BaluniPoolV1.Coin",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "predictedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "actualPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resolvedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "difference",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "resolved",
              "type": "bool"
            }
          ],
          "internalType": "struct BaluniPoolV1.Prediction",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPredictionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "getPredictionFromTo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "predictor",
              "type": "address"
            },
            {
              "internalType": "enum BaluniPoolV1.Coin",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "predictedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "actualPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resolvedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "difference",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "resolved",
              "type": "bool"
            }
          ],
          "internalType": "struct BaluniPoolV1.Prediction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubmissionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPredictions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasAnyUnresolvedPastEndTime",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasUnresolvedPredictions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "last10Predictions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "predictor",
              "type": "address"
            },
            {
              "internalType": "enum BaluniPoolV1.Coin",
              "name": "token",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "predictedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "actualPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resolvedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "difference",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "resolved",
              "type": "bool"
            }
          ],
          "internalType": "struct BaluniPoolV1.Prediction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract Oracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "predictionDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "predictions",
      "outputs": [
        {
          "internalType": "address",
          "name": "predictor",
          "type": "address"
        },
        {
          "internalType": "enum BaluniPoolV1.Coin",
          "name": "token",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "predictedPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actualPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "resolvedPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "difference",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "resolved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolutionLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "submissionBaseFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "submissionStepFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum BaluniPoolV1.Coin",
          "name": "_token",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_predictedPrice",
          "type": "uint256"
        }
      ],
      "name": "submit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPredictions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userSubmissionFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wnative",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yearnVault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x04ac4d2e4a483260ac631fa63871560883bf8c510d8f865018c70aa2dbcc455b",
  "receipt": {
    "to": null,
    "from": "0x84F07be28ecd5b29Df340be8b065A6113a8e893e",
    "contractAddress": "0x26EcB9aCa9d7d44EAbbE3f4f6905DEbb115843Dc",
    "transactionIndex": 38,
    "gasUsed": "1810449",
    "logsBloom": "0x
    "blockHash": "0x352bbd121522583f11a632c53de8bd0930c2a85ebd3bd9d4481d1b088273714e",
    "transactionHash": "0x04ac4d2e4a483260ac631fa63871560883bf8c510d8f865018c70aa2dbcc455b",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 53767559,
        "transactionHash": "0x04ac4d2e4a483260ac631fa63871560883bf8c510d8f865018c70aa2dbcc455b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000084f07be28ecd5b29df340be8b065a6113a8e893e",
          "0x000000000000000000000000a8b52f02108aa5f4b675bdcc973760022d7c6020"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000ffaca49822b9d3000000000000000000000000000000000000000000000000242d1703c902fa890000000000000000000000000000000000000000000004767580ca6ff8f0bc70000000000000000000000000000000000000000000000000232d6a5f30e040b60000000000000000000000000000000000000000000004767680771491137643",
        "logIndex": 117,
        "blockHash": "0x352bbd121522583f11a632c53de8bd0930c2a85ebd3bd9d4481d1b088273714e"
      }
    ],
    "blockNumber": 53767559,
    "cumulativeGasUsed": "5847721",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaC81354605019e00FfCfb36df3031419E62540B3",
    "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
    "0x28F53bA70E5c8ce8D03b1FaD41E9dF11Bb646c36"
  ],
  "numDeployments": 8,
  "solcInputHash": "b39c140c15f6fda98a4ff1c12b7ed84b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wnative\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yearnVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"predictor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum BaluniPoolV1.Coin\",\"name\":\"token\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"predictedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PredictionRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"predictor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributionCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPrediction\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"predictor\",\"type\":\"address\"},{\"internalType\":\"enum BaluniPoolV1.Coin\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"predictedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resolvedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"difference\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"internalType\":\"struct BaluniPoolV1.Prediction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPredictionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getPredictionFromTo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"predictor\",\"type\":\"address\"},{\"internalType\":\"enum BaluniPoolV1.Coin\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"predictedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resolvedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"difference\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"internalType\":\"struct BaluniPoolV1.Prediction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubmissionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPredictions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasAnyUnresolvedPastEndTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasUnresolvedPredictions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last10Predictions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"predictor\",\"type\":\"address\"},{\"internalType\":\"enum BaluniPoolV1.Coin\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"predictedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resolvedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"difference\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"internalType\":\"struct BaluniPoolV1.Prediction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract Oracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predictionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"predictions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"predictor\",\"type\":\"address\"},{\"internalType\":\"enum BaluniPoolV1.Coin\",\"name\":\"token\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"predictedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resolvedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"difference\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolutionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submissionBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submissionStepFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BaluniPoolV1.Coin\",\"name\":\"_token\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_predictedPrice\",\"type\":\"uint256\"}],\"name\":\"submit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPredictions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userSubmissionFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wnative\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearnVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaluniPool_v1.sol\":\"BaluniPoolV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/BaluniPool_v1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./Oracle.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"./interfaces/IWETH.sol\\\";\\r\\nimport \\\"./interfaces/IVault.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract BaluniPoolV1 is ReentrancyGuard {\\r\\n\\tOracle public oracle;\\r\\n\\r\\n\\tenum Coin {\\r\\n\\t\\tMATIC\\r\\n\\t}\\r\\n\\r\\n\\tstruct Prediction {\\r\\n\\t\\taddress predictor;\\r\\n\\t\\tCoin token;\\r\\n\\t\\tuint256 predictedPrice;\\r\\n\\t\\tuint256 actualPrice;\\r\\n\\t\\tuint256 resolvedPrice;\\r\\n\\t\\tuint256 difference;\\r\\n\\t\\tuint256 timestamp;\\r\\n\\t\\tuint256 endTime;\\r\\n\\t\\tbool resolved;\\r\\n\\t}\\r\\n\\r\\n\\tPrediction[] public predictions;\\r\\n\\r\\n\\tIWETH public wnative;\\r\\n\\tIVault public yearnVault;\\r\\n\\r\\n\\tuint256 public submissionBaseFee = 0.01 ether;\\r\\n\\tuint256 public submissionStepFee = 0.001 ether;\\r\\n\\tuint256 public predictionDuration = 1 days;\\r\\n\\tuint256 public resolutionLimit = 10 minutes;\\r\\n\\tuint256 public exitLimit = 7 days;\\r\\n\\tuint256 public totalPredictions = 0;\\r\\n\\tuint256 public totalDistribution = 0;\\r\\n\\r\\n\\tmapping(address => uint256) public distributionCounter;\\r\\n\\tmapping(address => uint256) public lastWithdraw;\\r\\n\\tmapping(address => uint256) public userSubmissionFees;\\r\\n\\r\\n\\tevent PredictionRegistered(\\r\\n\\t\\taddress indexed predictor,\\r\\n\\t\\tCoin token,\\r\\n\\t\\tuint256 predictedPrice,\\r\\n\\t\\tuint256 actualPrice,\\r\\n\\t\\tuint256 timestamp,\\r\\n\\t\\tuint256 endTime\\r\\n\\t);\\r\\n\\tevent RewardWithdrawn(address indexed predictor, uint256 amount);\\r\\n\\r\\n\\tconstructor(\\r\\n\\t\\taddress _oracleAddress,\\r\\n\\t\\taddress _wnative,\\r\\n\\t\\taddress _yearnVault\\r\\n\\t) ReentrancyGuard() {\\r\\n\\t\\toracle = Oracle(_oracleAddress);\\r\\n\\t\\twnative = IWETH(_wnative);\\r\\n\\t\\tyearnVault = IVault(_yearnVault);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getSubmissionFee() public view returns (uint256) {\\r\\n\\t\\treturn userSubmissionFees[msg.sender];\\r\\n\\t}\\r\\n\\r\\n\\tfunction submit(Coin _token, uint256 _predictedPrice) public payable {\\r\\n\\t\\trequire(msg.value >= submissionBaseFee, \\\"Invalid fee amount\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tmsg.value >= userSubmissionFees[msg.sender],\\r\\n\\t\\t\\t\\\"Invalid fee amount\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuserSubmissionFees[msg.sender] = msg.value;\\r\\n\\t\\tuserSubmissionFees[msg.sender] += submissionStepFee;\\r\\n\\r\\n\\t\\tuint256 price = oracle.getLatestPrice() * 1e10;\\r\\n\\r\\n\\t\\tpredictions.push(\\r\\n\\t\\t\\tPrediction(\\r\\n\\t\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t\\t_token,\\r\\n\\t\\t\\t\\t_predictedPrice,\\r\\n\\t\\t\\t\\tprice,\\r\\n\\t\\t\\t\\t0,\\r\\n\\t\\t\\t\\t0,\\r\\n\\t\\t\\t\\tblock.timestamp,\\r\\n\\t\\t\\t\\tblock.timestamp + predictionDuration,\\r\\n\\t\\t\\t\\tfalse\\r\\n\\t\\t\\t)\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\ttotalPredictions++;\\r\\n\\t\\twnative.deposit{ value: msg.value }();\\r\\n\\t\\tIERC20(address(wnative)).approve(address(yearnVault), msg.value);\\r\\n\\t\\tyearnVault.deposit(msg.value, address(this));\\r\\n\\r\\n\\t\\temit PredictionRegistered(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t_token,\\r\\n\\t\\t\\t_predictedPrice,\\r\\n\\t\\t\\tprice,\\r\\n\\t\\t\\tblock.timestamp,\\r\\n\\t\\t\\tblock.timestamp + predictionDuration\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction exit() public {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tblock.timestamp - lastWithdraw[msg.sender] >= exitLimit,\\r\\n\\t\\t\\t\\\"Wait for exitLimit before next withdraw\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuint256 reward = calculateReward(msg.sender);\\r\\n\\r\\n\\t\\trequire(reward > 0, \\\"No reward available\\\");\\r\\n\\r\\n\\t\\tIERC20(address(yearnVault)).approve(address(yearnVault), reward);\\r\\n\\r\\n\\t\\tuint256 ctxBalanceB4 = address(this).balance;\\r\\n\\t\\tyearnVault.withdraw(reward, address(this), address(this), 200);\\r\\n\\t\\tuint256 ctxBalanceAfter = address(this).balance;\\r\\n\\t\\tuint256 rewardToTransfer = ctxBalanceAfter - ctxBalanceB4;\\r\\n\\r\\n\\t\\twnative.withdraw(rewardToTransfer);\\r\\n\\r\\n\\t\\t// Aggiornamento dello stato prima della trasferimento per prevenire reentrancy\\r\\n\\t\\ttotalPredictions -= distributionCounter[msg.sender];\\r\\n\\t\\tdistributionCounter[msg.sender] = 0;\\r\\n\\t\\tlastWithdraw[msg.sender] = block.timestamp;\\r\\n\\r\\n\\t\\tuserSubmissionFees[msg.sender] = submissionBaseFee;\\r\\n\\r\\n\\t\\tAddress.sendValue(payable(msg.sender), rewardToTransfer);\\r\\n\\r\\n\\t\\temit RewardWithdrawn(msg.sender, rewardToTransfer);\\r\\n\\t}\\r\\n\\r\\n\\tfunction calculateReward(address user) public view returns (uint256) {\\r\\n\\t\\trequire(distributionCounter[user] > 0, \\\"No predictions made\\\");\\r\\n\\t\\trequire(totalDistribution > 0, \\\"No rewards available\\\");\\r\\n\\t\\tuint256 userShare = (distributionCounter[user] * 1e18) /\\r\\n\\t\\t\\ttotalDistribution;\\r\\n\\t\\tuint256 yeanBalance = IERC20(address(yearnVault)).balanceOf(\\r\\n\\t\\t\\taddress(this)\\r\\n\\t\\t);\\r\\n\\t\\tuint256 userBalance = (yeanBalance * userShare) / 1e18;\\r\\n\\t\\tuint256 userReward = userBalance - userBalance / 2;\\r\\n\\t\\treturn userReward;\\r\\n\\t}\\r\\n\\r\\n\\tfunction last10Predictions() public view returns (Prediction[] memory) {\\r\\n\\t\\tuint256 length = predictions.length;\\r\\n\\t\\tuint256 start = length > 10 ? length - 10 : 0;\\r\\n\\t\\tPrediction[] memory result = new Prediction[](length - start);\\r\\n\\t\\tfor (uint256 i = start; i < length; i++) {\\r\\n\\t\\t\\tresult[i - start] = predictions[i];\\r\\n\\t\\t}\\r\\n\\t\\treturn result;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPrediction(\\r\\n\\t\\tuint256 index\\r\\n\\t) public view returns (Prediction memory) {\\r\\n\\t\\trequire(index < predictions.length, \\\"Invalid index\\\");\\r\\n\\t\\treturn predictions[index];\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPredictionFromTo(\\r\\n\\t\\tuint256 from,\\r\\n\\t\\tuint256 to\\r\\n\\t) public view returns (Prediction[] memory) {\\r\\n\\t\\trequire(from < to, \\\"Invalid range\\\");\\r\\n\\t\\trequire(to <= predictions.length, \\\"Invalid range\\\");\\r\\n\\t\\tPrediction[] memory result = new Prediction[](to - from);\\r\\n\\t\\tfor (uint256 i = from; i < to; i++) {\\r\\n\\t\\t\\tresult[i - from] = predictions[i];\\r\\n\\t\\t}\\r\\n\\t\\treturn result;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPredictionCount() public view returns (uint256) {\\r\\n\\t\\treturn predictions.length;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTotalPredictions() public view returns (uint256) {\\r\\n\\t\\treturn totalPredictions;\\r\\n\\t}\\r\\n\\r\\n\\tfunction hasAnyUnresolvedPastEndTime() public view returns (bool) {\\r\\n\\t\\tfor (uint256 i = 0; i < predictions.length; i++) {\\r\\n\\t\\t\\tif (\\r\\n\\t\\t\\t\\t!predictions[i].resolved &&\\r\\n\\t\\t\\t\\tblock.timestamp > predictions[i].endTime\\r\\n\\t\\t\\t) {\\r\\n\\t\\t\\t\\treturn true; // Restituisce true alla prima occorrenza di una previsione non risolta superata da endTime\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn false; // Se nessuna previsione non risolta ha superato endTime, restituisce false\\r\\n\\t}\\r\\n\\r\\n\\tfunction resolve() public {\\r\\n\\t\\tuint256 latestPrice = oracle.getLatestPrice() * 1e10;\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < predictions.length; i++) {\\r\\n\\t\\t\\tif (\\r\\n\\t\\t\\t\\t!predictions[i].resolved &&\\r\\n\\t\\t\\t\\tblock.timestamp >= predictions[i].endTime\\r\\n\\t\\t\\t) {\\r\\n\\t\\t\\t\\tuint256 predictedPrice = predictions[i].predictedPrice;\\r\\n\\t\\t\\t\\tuint256 priceDifference = predictedPrice > latestPrice\\r\\n\\t\\t\\t\\t\\t? predictedPrice - latestPrice\\r\\n\\t\\t\\t\\t\\t: latestPrice - predictedPrice;\\r\\n\\t\\t\\t\\tuint256 score = calculateScore(predictedPrice, latestPrice);\\r\\n\\r\\n\\t\\t\\t\\tif (\\r\\n\\t\\t\\t\\t\\tblock.timestamp <= predictions[i].endTime + resolutionLimit\\r\\n\\t\\t\\t\\t) {\\r\\n\\t\\t\\t\\t\\tdistributionCounter[predictions[i].predictor] += 0; // Assumi che esista questo campo\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tdistributionCounter[predictions[i].predictor] += score; // Assumi che esista questo campo\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tpredictions[i].difference = priceDifference;\\r\\n\\t\\t\\t\\tpredictions[i].resolved = true;\\r\\n\\t\\t\\t\\tpredictions[i].resolvedPrice = latestPrice;\\r\\n\\t\\t\\t\\ttotalDistribution += score;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tdistributionCounter[msg.sender]++;\\r\\n\\t\\ttotalDistribution++;\\r\\n\\t}\\r\\n\\r\\n\\tfunction calculateScore(\\r\\n\\t\\tuint256 predictedPrice,\\r\\n\\t\\tuint256 resolvedPrice\\r\\n\\t) private pure returns (uint256) {\\r\\n\\t\\tif (resolvedPrice == 0) return 1; // Evita divisione per zero\\r\\n\\t\\tuint256 priceDifference = predictedPrice > resolvedPrice\\r\\n\\t\\t\\t? predictedPrice - resolvedPrice\\r\\n\\t\\t\\t: resolvedPrice - predictedPrice;\\r\\n\\t\\tuint256 differencePercentage = (priceDifference * 100) / resolvedPrice;\\r\\n\\r\\n\\t\\t// Il punteggio diminuisce all'aumentare della differenza percentuale\\r\\n\\t\\tif (differencePercentage == 0) {\\r\\n\\t\\t\\treturn 10; // Puntaeggio massimo per previsione perfetta\\r\\n\\t\\t} else if (differencePercentage <= 5) {\\r\\n\\t\\t\\treturn 9;\\r\\n\\t\\t} else if (differencePercentage <= 10) {\\r\\n\\t\\t\\treturn 8;\\r\\n\\t\\t} else if (differencePercentage <= 15) {\\r\\n\\t\\t\\treturn 7;\\r\\n\\t\\t} else if (differencePercentage <= 20) {\\r\\n\\t\\t\\treturn 6;\\r\\n\\t\\t} else if (differencePercentage <= 25) {\\r\\n\\t\\t\\treturn 5;\\r\\n\\t\\t} else if (differencePercentage <= 30) {\\r\\n\\t\\t\\treturn 4;\\r\\n\\t\\t} else if (differencePercentage <= 35) {\\r\\n\\t\\t\\treturn 3;\\r\\n\\t\\t} else if (differencePercentage <= 40) {\\r\\n\\t\\t\\treturn 2;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn 1; // Punteggio minimo per grande differenza\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction hasUnresolvedPredictions() public view returns (bool) {\\r\\n\\t\\tfor (uint256 i = 0; i < predictions.length; i++) {\\r\\n\\t\\t\\tif (!predictions[i].resolved) {\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\r\\n\\t// Permetti al contratto di ricevere ETH\\r\\n\\treceive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x5bb68f3facd6cdad75b69ca7e823fb4fb6c0429bf31a3949bf0818ab14c69ae7\",\"license\":\"MIT\"},\"contracts/Oracle.sol\":{\"content\":\"import \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract Oracle {\\r\\n\\tAggregatorV3Interface internal priceFeed;\\r\\n\\r\\n\\tconstructor(address _priceFeedAddress) {\\r\\n\\t\\tpriceFeed = AggregatorV3Interface(_priceFeedAddress);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getLatestPrice() public view returns (uint256) {\\r\\n\\t\\t(, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n\\t\\t// Assumiamo che il prezzo sia sempre positivo\\r\\n\\t\\treturn uint256(price); // Adatta questa moltiplicazione in base alla tua necessit\\u00e0\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x3d71c8afb17be59e107fc8f69d49dc6bffef1ad3570441adebc01f187337135b\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IVault {\\r\\n\\tfunction token() external view returns (address);\\r\\n\\r\\n\\tfunction underlying() external view returns (address);\\r\\n\\r\\n\\tfunction name() external view returns (string memory);\\r\\n\\r\\n\\tfunction symbol() external view returns (string memory);\\r\\n\\r\\n\\tfunction decimals() external view returns (uint8);\\r\\n\\r\\n\\tfunction controller() external view returns (address);\\r\\n\\r\\n\\tfunction governance() external view returns (address);\\r\\n\\r\\n\\tfunction getPricePerFullShare() external view returns (uint256);\\r\\n\\r\\n\\tfunction deposit(uint256, address) external;\\r\\n\\r\\n\\tfunction depositAll() external;\\r\\n\\r\\n\\tfunction withdraw(uint256, address, address, uint256) external;\\r\\n\\r\\n\\tfunction withdrawAll() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x05b2afc937219e9aad25bf263f5b5da8394dac5710ba1dd491b3b4fa47334067\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IWETH {\\r\\n\\tfunction deposit() external payable;\\r\\n\\r\\n\\tfunction transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n\\tfunction withdraw(uint) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5b82f6fc97f0d5252790b4251cec7311b0f159f15014d156c27a44e34c89ea21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052662386f26fc1000060055566038d7ea4c680006006556201518060075561025860085562093a806009556000600a556000600b553480156200004557600080fd5b5060405162001d2938038062001d298339810160408190526200006891620000cd565b6001600081905580546001600160a01b039485166001600160a01b03199182161790915560038054938516938216939093179092556004805491909316911617905562000117565b80516001600160a01b0381168114620000c857600080fd5b919050565b600080600060608486031215620000e357600080fd5b620000ee84620000b0565b9250620000fe60208501620000b0565b91506200010e60408501620000b0565b90509250925092565b611c0280620001276000396000f3fe6080604052600436106101845760003560e01c806370246a1e116100d1578063cd6347921161008a578063e75e454e11610064578063e75e454e1461044b578063e9fad8ee14610461578063f9be852314610476578063fe83bece1461049857600080fd5b8063cd63479214610400578063d1c4e1b414610416578063d82e39621461042b57600080fd5b806370246a1e1461036857806371d61cd51461037e578063779bd562146103945780637dc0d1d0146103aa57806380450cde146103ca5780639db5df46146103e057600080fd5b806344ed9f661161013e5780635590cfa9116101185780635590cfa9146102cc5780635c580061146102f9578063600bebf51461030e578063624d7b721461033b57600080fd5b806344ed9f661461028e5780634abf93b7146102a45780634ce93cc8146102b957600080fd5b80624fbbb01461019057806301668096146101ce578063037361e9146101ed5780632810e1d61461021a5780632cebdeb214610231578063371d5d021461026957600080fd5b3661018b57005b600080fd5b34801561019c57600080fd5b506101b06101ab3660046118b0565b6104c5565b6040516101c599989796959493929190611901565b60405180910390f35b3480156101da57600080fd5b506002545b6040519081526020016101c5565b3480156101f957600080fd5b506101df610208366004611958565b600c6020526000908152604090205481565b34801561022657600080fd5b5061022f610532565b005b34801561023d57600080fd5b50600354610251906001600160a01b031681565b6040516001600160a01b0390911681526020016101c5565b34801561027557600080fd5b5061027e61085a565b60405190151581526020016101c5565b34801561029a57600080fd5b506101df60095481565b3480156102b057600080fd5b5061027e6108b8565b61022f6102c7366004611988565b61093f565b3480156102d857600080fd5b506102ec6102e73660046119b8565b610d67565b6040516101c59190611a49565b34801561030557600080fd5b50600a546101df565b34801561031a57600080fd5b506101df610329366004611958565b600e6020526000908152604090205481565b34801561034757600080fd5b506101df610356366004611958565b600d6020526000908152604090205481565b34801561037457600080fd5b506101df60075481565b34801561038a57600080fd5b506101df60085481565b3480156103a057600080fd5b506101df600a5481565b3480156103b657600080fd5b50600154610251906001600160a01b031681565b3480156103d657600080fd5b506101df60065481565b3480156103ec57600080fd5b50600454610251906001600160a01b031681565b34801561040c57600080fd5b506101df60055481565b34801561042257600080fd5b506102ec610f53565b34801561043757600080fd5b506101df610446366004611958565b6110de565b34801561045757600080fd5b506101df600b5481565b34801561046d57600080fd5b5061022f611274565b34801561048257600080fd5b50336000908152600e60205260409020546101df565b3480156104a457600080fd5b506104b86104b33660046118b0565b611532565b6040516101c59190611a98565b600281815481106104d557600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b038716985060ff600160a01b909704871697959694959394929391921689565b60015460408051638e15f47360e01b815290516000926001600160a01b031691638e15f4739160048083019260209291908290030181865afa15801561057c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a09190611aa7565b6105af906402540be400611ad6565b905060005b60025481101561082157600281815481106105d1576105d1611aed565b600091825260209091206007600890920201015460ff1615801561061957506002818154811061060357610603611aed565b9060005260206000209060080201600601544210155b1561080f5760006002828154811061063357610633611aed565b9060005260206000209060080201600101549050600083821161065f5761065a8285611b03565b610669565b6106698483611b03565b90506000610677838661163d565b90506008546002858154811061068f5761068f611aed565b9060005260206000209060080201600601546106ab9190611b16565b421161070e576000600c6000600287815481106106ca576106ca611aed565b600091825260208083206008909202909101546001600160a01b0316835282019290925260400181208054909190610703908490611b16565b909155506107659050565b80600c60006002878154811061072657610726611aed565b600091825260208083206008909202909101546001600160a01b031683528201929092526040018120805490919061075f908490611b16565b90915550505b816002858154811061077957610779611aed565b9060005260206000209060080201600401819055506001600285815481106107a3576107a3611aed565b906000526020600020906008020160070160006101000a81548160ff02191690831515021790555084600285815481106107df576107df611aed565b90600052602060002090600802016003018190555080600b60008282546108069190611b16565b90915550505050505b8061081981611b29565b9150506105b4565b50336000908152600c6020526040812080549161083d83611b29565b9091555050600b805490600061085283611b29565b919050555050565b6000805b6002548110156108b0576002818154811061087b5761087b611aed565b600091825260209091206007600890920201015460ff1661089e57600191505090565b806108a881611b29565b91505061085e565b506000905090565b6000805b6002548110156108b057600281815481106108d9576108d9611aed565b600091825260209091206007600890920201015460ff1615801561092057506002818154811061090b5761090b611aed565b90600052602060002090600802016006015442115b1561092d57600191505090565b8061093781611b29565b9150506108bc565b60055434101561098b5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590819995948185b5bdd5b9d60721b60448201526064015b60405180910390fd5b336000908152600e60205260409020543410156109df5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590819995948185b5bdd5b9d60721b6044820152606401610982565b336000908152600e60205260408120348082556006549290610a02908490611b16565b909155505060015460408051638e15f47360e01b815290516000926001600160a01b031691638e15f4739160048083019260209291908290030181865afa158015610a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a759190611aa7565b610a84906402540be400611ad6565b90506002604051806101200160405280336001600160a01b03168152602001856000811115610ab557610ab56118c9565b8152602001848152602001838152602001600081526020016000815260200142815260200160075442610ae89190611b16565b8152600060209182018190528354600181018555938152819020825160089094020180546001600160a01b039094166001600160a01b031985168117825591830151929390929183916001600160a81b03191617600160a01b838015610b5057610b506118c9565b021790555060408201516001820155606082015160028201556080820151600382015560a0820151600482015560c0820151600582015560e08201516006820155610100909101516007909101805460ff1916911515919091179055600a8054906000610bbc83611b29565b9190505550600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610c1157600080fd5b505af1158015610c25573d6000803e3d6000fd5b50506003546004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252346024830152909116935063095ea7b3925060440190506020604051808303816000875af1158015610c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca79190611b42565b5060048054604051636e553f6560e01b815234928101929092523060248301526001600160a01b031690636e553f6590604401600060405180830381600087803b158015610cf457600080fd5b505af1158015610d08573d6000803e3d6000fd5b50505050336001600160a01b03167f046796fc72779cbabd1ea8b64c35f18f13d4d3d4693526deb779040b773c311b8484844260075442610d499190611b16565b604051610d5a959493929190611b64565b60405180910390a2505050565b6060818310610da85760405162461bcd60e51b815260206004820152600d60248201526c496e76616c69642072616e676560981b6044820152606401610982565b600254821115610dea5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c69642072616e676560981b6044820152606401610982565b6000610df68484611b03565b67ffffffffffffffff811115610e0e57610e0e611b94565b604051908082528060200260200182016040528015610e4757816020015b610e34611861565b815260200190600190039081610e2c5790505b509050835b83811015610f495760028181548110610e6757610e67611aed565b600091825260209182902060408051610120810190915260089092020180546001600160a01b0381168352919290919083019060ff600160a01b909104168015610eb357610eb36118c9565b8015610ec157610ec16118c9565b815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460ff16151560e09091015282610f1b8784611b03565b81518110610f2b57610f2b611aed565b60200260200101819052508080610f4190611b29565b915050610e4c565b5090505b92915050565b6002546060906000600a8211610f6a576000610f75565b610f75600a83611b03565b90506000610f838284611b03565b67ffffffffffffffff811115610f9b57610f9b611b94565b604051908082528060200260200182016040528015610fd457816020015b610fc1611861565b815260200190600190039081610fb95790505b509050815b838110156110d65760028181548110610ff457610ff4611aed565b600091825260209182902060408051610120810190915260089092020180546001600160a01b0381168352919290919083019060ff600160a01b909104168015611040576110406118c9565b801561104e5761104e6118c9565b815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460ff16151560e090910152826110a88584611b03565b815181106110b8576110b8611aed565b602002602001018190525080806110ce90611b29565b915050610fd9565b509392505050565b6001600160a01b0381166000908152600c60205260408120546111395760405162461bcd60e51b81526020600482015260136024820152724e6f2070726564696374696f6e73206d61646560681b6044820152606401610982565b6000600b54116111825760405162461bcd60e51b81526020600482015260146024820152734e6f207265776172647320617661696c61626c6560601b6044820152606401610982565b600b546001600160a01b0383166000908152600c60205260408120549091906111b390670de0b6b3a7640000611ad6565b6111bd9190611baa565b600480546040516370a0823160e01b815230928101929092529192506000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561120c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112309190611aa7565b90506000670de0b6b3a76400006112478484611ad6565b6112519190611baa565b90506000611260600283611baa565b61126a9083611b03565b9695505050505050565b600954336000908152600d60205260409020546112919042611b03565b10156112ef5760405162461bcd60e51b815260206004820152602760248201527f5761697420666f7220657869744c696d6974206265666f7265206e65787420776044820152666974686472617760c81b6064820152608401610982565b60006112fa336110de565b9050600081116113425760405162461bcd60e51b81526020600482015260136024820152724e6f2072657761726420617661696c61626c6560681b6044820152606401610982565b6004805460405163095ea7b360e01b81526001600160a01b039091169181018290526024810183905263095ea7b3906044016020604051808303816000875af1158015611393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b79190611b42565b50600480546040516328c6306960e21b81529182018390523060248301819052604483015260c8606483015247916001600160a01b039091169063a318c1a490608401600060405180830381600087803b15801561141457600080fd5b505af1158015611428573d6000803e3d6000fd5b504792506000915061143c90508383611b03565b600354604051632e1a7d4d60e01b8152600481018390529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561148357600080fd5b505af1158015611497573d6000803e3d6000fd5b5050336000908152600c6020526040812054600a805491945092506114bd908490611b03565b9091555050336000818152600c60209081526040808320839055600d8252808320429055600554600e909252909120556114f79082611743565b60405181815233907f1d3eee4ca001cff39eec6ec7615aacf2f2bd61791273830728ba00ccbd6e13379060200160405180910390a250505050565b61153a611861565b600254821061157b5760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610982565b6002828154811061158e5761158e611aed565b600091825260209182902060408051610120810190915260089092020180546001600160a01b0381168352919290919083019060ff600160a01b9091041680156115da576115da6118c9565b80156115e8576115e86118c9565b815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460ff16151560e09091015292915050565b60008160000361164f57506001610f4d565b6000828411611667576116628484611b03565b611671565b6116718385611b03565b9050600083611681836064611ad6565b61168b9190611baa565b9050806000036116a057600a92505050610f4d565b600581116116b357600992505050610f4d565b600a81116116c657600892505050610f4d565b600f81116116d957600792505050610f4d565b601481116116ec57600692505050610f4d565b601981116116ff57600592505050610f4d565b601e811161171257600492505050610f4d565b6023811161172557600392505050610f4d565b6028811161173857600292505050610f4d565b600192505050610f4d565b804710156117935760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610982565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146117e0576040519150601f19603f3d011682016040523d82523d6000602084013e6117e5565b606091505b505090508061185c5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610982565b505050565b6040805161012081019091526000808252602082019081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6000602082840312156118c257600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600181106118fd57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038a168152610120810161191f602083018b6118df565b60408201989098526060810196909652608086019490945260a085019290925260c084015260e083015215156101009091015292915050565b60006020828403121561196a57600080fd5b81356001600160a01b038116811461198157600080fd5b9392505050565b6000806040838503121561199b57600080fd5b8235600181106119aa57600080fd5b946020939093013593505050565b600080604083850312156119cb57600080fd5b50508035926020909101359150565b80516001600160a01b03168252602080820151906119fa908401826118df565b5060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151151581840152505050565b6020808252825182820181905260009190848201906040850190845b81811015611a8c57611a788385516119da565b928401926101209290920191600101611a65565b50909695505050505050565b6101208101610f4d82846119da565b600060208284031215611ab957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610f4d57610f4d611ac0565b634e487b7160e01b600052603260045260246000fd5b81810381811115610f4d57610f4d611ac0565b80820180821115610f4d57610f4d611ac0565b600060018201611b3b57611b3b611ac0565b5060010190565b600060208284031215611b5457600080fd5b8151801515811461198157600080fd5b60a08101611b7282886118df565b8560208301528460408301528360608301528260808301529695505050505050565b634e487b7160e01b600052604160045260246000fd5b600082611bc757634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205dcefa21f62862da586d3083bf7ebfe0184241f162f043ce5a786e02bb1ed16164736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101845760003560e01c806370246a1e116100d1578063cd6347921161008a578063e75e454e11610064578063e75e454e1461044b578063e9fad8ee14610461578063f9be852314610476578063fe83bece1461049857600080fd5b8063cd63479214610400578063d1c4e1b414610416578063d82e39621461042b57600080fd5b806370246a1e1461036857806371d61cd51461037e578063779bd562146103945780637dc0d1d0146103aa57806380450cde146103ca5780639db5df46146103e057600080fd5b806344ed9f661161013e5780635590cfa9116101185780635590cfa9146102cc5780635c580061146102f9578063600bebf51461030e578063624d7b721461033b57600080fd5b806344ed9f661461028e5780634abf93b7146102a45780634ce93cc8146102b957600080fd5b80624fbbb01461019057806301668096146101ce578063037361e9146101ed5780632810e1d61461021a5780632cebdeb214610231578063371d5d021461026957600080fd5b3661018b57005b600080fd5b34801561019c57600080fd5b506101b06101ab3660046118b0565b6104c5565b6040516101c599989796959493929190611901565b60405180910390f35b3480156101da57600080fd5b506002545b6040519081526020016101c5565b3480156101f957600080fd5b506101df610208366004611958565b600c6020526000908152604090205481565b34801561022657600080fd5b5061022f610532565b005b34801561023d57600080fd5b50600354610251906001600160a01b031681565b6040516001600160a01b0390911681526020016101c5565b34801561027557600080fd5b5061027e61085a565b60405190151581526020016101c5565b34801561029a57600080fd5b506101df60095481565b3480156102b057600080fd5b5061027e6108b8565b61022f6102c7366004611988565b61093f565b3480156102d857600080fd5b506102ec6102e73660046119b8565b610d67565b6040516101c59190611a49565b34801561030557600080fd5b50600a546101df565b34801561031a57600080fd5b506101df610329366004611958565b600e6020526000908152604090205481565b34801561034757600080fd5b506101df610356366004611958565b600d6020526000908152604090205481565b34801561037457600080fd5b506101df60075481565b34801561038a57600080fd5b506101df60085481565b3480156103a057600080fd5b506101df600a5481565b3480156103b657600080fd5b50600154610251906001600160a01b031681565b3480156103d657600080fd5b506101df60065481565b3480156103ec57600080fd5b50600454610251906001600160a01b031681565b34801561040c57600080fd5b506101df60055481565b34801561042257600080fd5b506102ec610f53565b34801561043757600080fd5b506101df610446366004611958565b6110de565b34801561045757600080fd5b506101df600b5481565b34801561046d57600080fd5b5061022f611274565b34801561048257600080fd5b50336000908152600e60205260409020546101df565b3480156104a457600080fd5b506104b86104b33660046118b0565b611532565b6040516101c59190611a98565b600281815481106104d557600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b038716985060ff600160a01b909704871697959694959394929391921689565b60015460408051638e15f47360e01b815290516000926001600160a01b031691638e15f4739160048083019260209291908290030181865afa15801561057c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a09190611aa7565b6105af906402540be400611ad6565b905060005b60025481101561082157600281815481106105d1576105d1611aed565b600091825260209091206007600890920201015460ff1615801561061957506002818154811061060357610603611aed565b9060005260206000209060080201600601544210155b1561080f5760006002828154811061063357610633611aed565b9060005260206000209060080201600101549050600083821161065f5761065a8285611b03565b610669565b6106698483611b03565b90506000610677838661163d565b90506008546002858154811061068f5761068f611aed565b9060005260206000209060080201600601546106ab9190611b16565b421161070e576000600c6000600287815481106106ca576106ca611aed565b600091825260208083206008909202909101546001600160a01b0316835282019290925260400181208054909190610703908490611b16565b909155506107659050565b80600c60006002878154811061072657610726611aed565b600091825260208083206008909202909101546001600160a01b031683528201929092526040018120805490919061075f908490611b16565b90915550505b816002858154811061077957610779611aed565b9060005260206000209060080201600401819055506001600285815481106107a3576107a3611aed565b906000526020600020906008020160070160006101000a81548160ff02191690831515021790555084600285815481106107df576107df611aed565b90600052602060002090600802016003018190555080600b60008282546108069190611b16565b90915550505050505b8061081981611b29565b9150506105b4565b50336000908152600c6020526040812080549161083d83611b29565b9091555050600b805490600061085283611b29565b919050555050565b6000805b6002548110156108b0576002818154811061087b5761087b611aed565b600091825260209091206007600890920201015460ff1661089e57600191505090565b806108a881611b29565b91505061085e565b506000905090565b6000805b6002548110156108b057600281815481106108d9576108d9611aed565b600091825260209091206007600890920201015460ff1615801561092057506002818154811061090b5761090b611aed565b90600052602060002090600802016006015442115b1561092d57600191505090565b8061093781611b29565b9150506108bc565b60055434101561098b5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590819995948185b5bdd5b9d60721b60448201526064015b60405180910390fd5b336000908152600e60205260409020543410156109df5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590819995948185b5bdd5b9d60721b6044820152606401610982565b336000908152600e60205260408120348082556006549290610a02908490611b16565b909155505060015460408051638e15f47360e01b815290516000926001600160a01b031691638e15f4739160048083019260209291908290030181865afa158015610a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a759190611aa7565b610a84906402540be400611ad6565b90506002604051806101200160405280336001600160a01b03168152602001856000811115610ab557610ab56118c9565b8152602001848152602001838152602001600081526020016000815260200142815260200160075442610ae89190611b16565b8152600060209182018190528354600181018555938152819020825160089094020180546001600160a01b039094166001600160a01b031985168117825591830151929390929183916001600160a81b03191617600160a01b838015610b5057610b506118c9565b021790555060408201516001820155606082015160028201556080820151600382015560a0820151600482015560c0820151600582015560e08201516006820155610100909101516007909101805460ff1916911515919091179055600a8054906000610bbc83611b29565b9190505550600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610c1157600080fd5b505af1158015610c25573d6000803e3d6000fd5b50506003546004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252346024830152909116935063095ea7b3925060440190506020604051808303816000875af1158015610c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca79190611b42565b5060048054604051636e553f6560e01b815234928101929092523060248301526001600160a01b031690636e553f6590604401600060405180830381600087803b158015610cf457600080fd5b505af1158015610d08573d6000803e3d6000fd5b50505050336001600160a01b03167f046796fc72779cbabd1ea8b64c35f18f13d4d3d4693526deb779040b773c311b8484844260075442610d499190611b16565b604051610d5a959493929190611b64565b60405180910390a2505050565b6060818310610da85760405162461bcd60e51b815260206004820152600d60248201526c496e76616c69642072616e676560981b6044820152606401610982565b600254821115610dea5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c69642072616e676560981b6044820152606401610982565b6000610df68484611b03565b67ffffffffffffffff811115610e0e57610e0e611b94565b604051908082528060200260200182016040528015610e4757816020015b610e34611861565b815260200190600190039081610e2c5790505b509050835b83811015610f495760028181548110610e6757610e67611aed565b600091825260209182902060408051610120810190915260089092020180546001600160a01b0381168352919290919083019060ff600160a01b909104168015610eb357610eb36118c9565b8015610ec157610ec16118c9565b815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460ff16151560e09091015282610f1b8784611b03565b81518110610f2b57610f2b611aed565b60200260200101819052508080610f4190611b29565b915050610e4c565b5090505b92915050565b6002546060906000600a8211610f6a576000610f75565b610f75600a83611b03565b90506000610f838284611b03565b67ffffffffffffffff811115610f9b57610f9b611b94565b604051908082528060200260200182016040528015610fd457816020015b610fc1611861565b815260200190600190039081610fb95790505b509050815b838110156110d65760028181548110610ff457610ff4611aed565b600091825260209182902060408051610120810190915260089092020180546001600160a01b0381168352919290919083019060ff600160a01b909104168015611040576110406118c9565b801561104e5761104e6118c9565b815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460ff16151560e090910152826110a88584611b03565b815181106110b8576110b8611aed565b602002602001018190525080806110ce90611b29565b915050610fd9565b509392505050565b6001600160a01b0381166000908152600c60205260408120546111395760405162461bcd60e51b81526020600482015260136024820152724e6f2070726564696374696f6e73206d61646560681b6044820152606401610982565b6000600b54116111825760405162461bcd60e51b81526020600482015260146024820152734e6f207265776172647320617661696c61626c6560601b6044820152606401610982565b600b546001600160a01b0383166000908152600c60205260408120549091906111b390670de0b6b3a7640000611ad6565b6111bd9190611baa565b600480546040516370a0823160e01b815230928101929092529192506000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561120c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112309190611aa7565b90506000670de0b6b3a76400006112478484611ad6565b6112519190611baa565b90506000611260600283611baa565b61126a9083611b03565b9695505050505050565b600954336000908152600d60205260409020546112919042611b03565b10156112ef5760405162461bcd60e51b815260206004820152602760248201527f5761697420666f7220657869744c696d6974206265666f7265206e65787420776044820152666974686472617760c81b6064820152608401610982565b60006112fa336110de565b9050600081116113425760405162461bcd60e51b81526020600482015260136024820152724e6f2072657761726420617661696c61626c6560681b6044820152606401610982565b6004805460405163095ea7b360e01b81526001600160a01b039091169181018290526024810183905263095ea7b3906044016020604051808303816000875af1158015611393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b79190611b42565b50600480546040516328c6306960e21b81529182018390523060248301819052604483015260c8606483015247916001600160a01b039091169063a318c1a490608401600060405180830381600087803b15801561141457600080fd5b505af1158015611428573d6000803e3d6000fd5b504792506000915061143c90508383611b03565b600354604051632e1a7d4d60e01b8152600481018390529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561148357600080fd5b505af1158015611497573d6000803e3d6000fd5b5050336000908152600c6020526040812054600a805491945092506114bd908490611b03565b9091555050336000818152600c60209081526040808320839055600d8252808320429055600554600e909252909120556114f79082611743565b60405181815233907f1d3eee4ca001cff39eec6ec7615aacf2f2bd61791273830728ba00ccbd6e13379060200160405180910390a250505050565b61153a611861565b600254821061157b5760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610982565b6002828154811061158e5761158e611aed565b600091825260209182902060408051610120810190915260089092020180546001600160a01b0381168352919290919083019060ff600160a01b9091041680156115da576115da6118c9565b80156115e8576115e86118c9565b815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460ff16151560e09091015292915050565b60008160000361164f57506001610f4d565b6000828411611667576116628484611b03565b611671565b6116718385611b03565b9050600083611681836064611ad6565b61168b9190611baa565b9050806000036116a057600a92505050610f4d565b600581116116b357600992505050610f4d565b600a81116116c657600892505050610f4d565b600f81116116d957600792505050610f4d565b601481116116ec57600692505050610f4d565b601981116116ff57600592505050610f4d565b601e811161171257600492505050610f4d565b6023811161172557600392505050610f4d565b6028811161173857600292505050610f4d565b600192505050610f4d565b804710156117935760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610982565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146117e0576040519150601f19603f3d011682016040523d82523d6000602084013e6117e5565b606091505b505090508061185c5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610982565b505050565b6040805161012081019091526000808252602082019081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6000602082840312156118c257600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600181106118fd57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038a168152610120810161191f602083018b6118df565b60408201989098526060810196909652608086019490945260a085019290925260c084015260e083015215156101009091015292915050565b60006020828403121561196a57600080fd5b81356001600160a01b038116811461198157600080fd5b9392505050565b6000806040838503121561199b57600080fd5b8235600181106119aa57600080fd5b946020939093013593505050565b600080604083850312156119cb57600080fd5b50508035926020909101359150565b80516001600160a01b03168252602080820151906119fa908401826118df565b5060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151151581840152505050565b6020808252825182820181905260009190848201906040850190845b81811015611a8c57611a788385516119da565b928401926101209290920191600101611a65565b50909695505050505050565b6101208101610f4d82846119da565b600060208284031215611ab957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610f4d57610f4d611ac0565b634e487b7160e01b600052603260045260246000fd5b81810381811115610f4d57610f4d611ac0565b80820180821115610f4d57610f4d611ac0565b600060018201611b3b57611b3b611ac0565b5060010190565b600060208284031215611b5457600080fd5b8151801515811461198157600080fd5b60a08101611b7282886118df565b8560208301528460408301528360608301528260808301529695505050505050565b634e487b7160e01b600052604160045260246000fd5b600082611bc757634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205dcefa21f62862da586d3083bf7ebfe0184241f162f043ce5a786e02bb1ed16164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56,
        "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 952,
        "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
        "label": "oracle",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Oracle)2762"
      },
      {
        "astId": 978,
        "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
        "label": "predictions",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Prediction)974_storage)dyn_storage"
      },
      {
        "astId": 981,
        "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
        "label": "wnative",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IWETH)2849"
      },
      {
        "astId": 984,
        "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
        "label": "yearnVault",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IVault)2829"
      },
      {
        "astId": 987,
        "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
        "label": "submissionBaseFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 990,
        "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
        "label": "submissionStepFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 993,
        "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
        "label": "predictionDuration",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 996,
        "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
        "label": "resolutionLimit",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 999,
        "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
        "label": "exitLimit",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1002,
        "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
        "label": "totalPredictions",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1005,
        "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
        "label": "totalDistribution",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1009,
        "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
        "label": "distributionCounter",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1013,
        "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
        "label": "lastWithdraw",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1017,
        "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
        "label": "userSubmissionFees",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Prediction)974_storage)dyn_storage": {
        "base": "t_struct(Prediction)974_storage",
        "encoding": "dynamic_array",
        "label": "struct BaluniPoolV1.Prediction[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IVault)2829": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)2849": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_contract(Oracle)2762": {
        "encoding": "inplace",
        "label": "contract Oracle",
        "numberOfBytes": "20"
      },
      "t_enum(Coin)954": {
        "encoding": "inplace",
        "label": "enum BaluniPoolV1.Coin",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Prediction)974_storage": {
        "encoding": "inplace",
        "label": "struct BaluniPoolV1.Prediction",
        "members": [
          {
            "astId": 956,
            "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
            "label": "predictor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 959,
            "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
            "label": "token",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(Coin)954"
          },
          {
            "astId": 961,
            "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
            "label": "predictedPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 963,
            "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
            "label": "actualPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 965,
            "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
            "label": "resolvedPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 967,
            "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
            "label": "difference",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 969,
            "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 971,
            "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
            "label": "endTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 973,
            "contract": "contracts/BaluniPool_v1.sol:BaluniPoolV1",
            "label": "resolved",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}