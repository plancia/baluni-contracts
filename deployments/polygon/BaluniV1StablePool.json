{
  "address": "0x1440e91162A7De5c4868B3fFe2fD44f2f0cB9166",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rebalancer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset2",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SWAP_FEE_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset1",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset2",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount2",
          "type": "uint256"
        }
      ],
      "name": "provideLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalancer",
      "outputs": [
        {
          "internalType": "contract IBaluniV1Rebalancer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5234819b060694905d3684e3fc254e623cb528cd2ff089058dfac30dc0a34860",
  "receipt": {
    "to": null,
    "from": "0x84F07be28ecd5b29Df340be8b065A6113a8e893e",
    "contractAddress": "0x1440e91162A7De5c4868B3fFe2fD44f2f0cB9166",
    "transactionIndex": 70,
    "gasUsed": "1558907",
    "logsBloom": "0x000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000001000080000000000000000000002000000000000000000000000000000000008000000000000000000001000000000000000000000000000000000000000000000000000000000001800000002000000000410000000c000000400000000000000000000000000000000800000000000022000008000000000000000000000040000000000000000000000000000000c000000000000000000001000000000000400000000000000000120000000000000010008000000000800000000000000000000000000000000000000000100000",
    "blockHash": "0x3794914fa61eb68717fe2c7eaa6a17d585ad42afd4041dd9ce6c0550dc9f991b",
    "transactionHash": "0x5234819b060694905d3684e3fc254e623cb528cd2ff089058dfac30dc0a34860",
    "logs": [
      {
        "transactionIndex": 70,
        "blockNumber": 56956721,
        "transactionHash": "0x5234819b060694905d3684e3fc254e623cb528cd2ff089058dfac30dc0a34860",
        "address": "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000001440e91162a7de5c4868b3ffe2fd44f2f0cb9166",
          "0x0000000000000000000000007ed16f194facd6eaab72cdd847b2becc13c240ec"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 224,
        "blockHash": "0x3794914fa61eb68717fe2c7eaa6a17d585ad42afd4041dd9ce6c0550dc9f991b"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 56956721,
        "transactionHash": "0x5234819b060694905d3684e3fc254e623cb528cd2ff089058dfac30dc0a34860",
        "address": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000001440e91162a7de5c4868b3ffe2fd44f2f0cb9166",
          "0x0000000000000000000000007ed16f194facd6eaab72cdd847b2becc13c240ec"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 225,
        "blockHash": "0x3794914fa61eb68717fe2c7eaa6a17d585ad42afd4041dd9ce6c0550dc9f991b"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 56956721,
        "transactionHash": "0x5234819b060694905d3684e3fc254e623cb528cd2ff089058dfac30dc0a34860",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000084f07be28ecd5b29df340be8b065a6113a8e893e",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000b6c3d10fa6ef440000000000000000000000000000000000000000000000001dcccbe7c592925800000000000000000000000000000000000000000000048bf2e406a43da048eb0000000000000000000000000000000000000000000000001d160816b5eba31400000000000000000000000000000000000000000000048bf39aca754d47382f",
        "logIndex": 226,
        "blockHash": "0x3794914fa61eb68717fe2c7eaa6a17d585ad42afd4041dd9ce6c0550dc9f991b"
      }
    ],
    "blockNumber": 56956721,
    "cumulativeGasUsed": "9637935",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0AdDd25a91563696D8567Df78D5A01C9a991F9B8",
    "0x7Ed16f194faCD6eAaB72cdd847b2bEcc13C240EC",
    "0xc2132d05d31c914a87c6611c10748aeb04b58e8f",
    "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
  ],
  "numDeployments": 5,
  "solcInputHash": "5fc4d782ec805cfd046f4b32ce21bff6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rebalancer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SWAP_FEE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset2\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount2\",\"type\":\"uint256\"}],\"name\":\"provideLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancer\",\"outputs\":[{\"internalType\":\"contract IBaluniV1Rebalancer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaluniV1StablePool.sol\":\"BaluniV1StablePool\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/BaluniV1StablePool.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\r\\npragma solidity 0.8.25;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\r\\nimport './interfaces/IBaluniV1Rebalancer.sol';\\r\\n\\r\\ninterface IOracle {\\r\\n  function getRate(\\r\\n    IERC20 srcToken,\\r\\n    IERC20 dstToken,\\r\\n    bool useWrappers\\r\\n  ) external view returns (uint256 weightedRate);\\r\\n}\\r\\n\\r\\ncontract BaluniV1StablePool is ERC20, ReentrancyGuard {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  IBaluniV1Rebalancer public rebalancer;\\r\\n  IERC20 public asset1;\\r\\n  IERC20 public asset2;\\r\\n  IOracle public oracle;\\r\\n\\r\\n  uint256 public constant SWAP_FEE_BPS = 30;\\r\\n\\r\\n  constructor(\\r\\n    address _oracle,\\r\\n    address _rebalancer,\\r\\n    address _asset1,\\r\\n    address _asset2\\r\\n  ) ERC20('Baluni StableLP', 'BALUNI-SLP') {\\r\\n    rebalancer = IBaluniV1Rebalancer(_rebalancer);\\r\\n    asset1 = IERC20(_asset1);\\r\\n    asset2 = IERC20(_asset2);\\r\\n    oracle = IOracle(_oracle);\\r\\n    asset1.approve(address(rebalancer), type(uint256).max);\\r\\n    asset2.approve(address(rebalancer), type(uint256).max);\\r\\n  }\\r\\n\\r\\n  function _calculateReceivedAmount(\\r\\n    address fromToken,\\r\\n    address toToken,\\r\\n    uint256 amountAfterFee\\r\\n  ) internal view returns (uint256) {\\r\\n    // Getting rate from the oracle\\r\\n    uint256 rate = oracle.getRate(IERC20(fromToken), IERC20(toToken), true);\\r\\n\\r\\n    // Adjusting for token decimals\\r\\n    uint8 fromDecimals = IERC20Metadata(fromToken).decimals();\\r\\n    uint8 toDecimals = IERC20Metadata(toToken).decimals();\\r\\n\\r\\n    // Calculate received amount considering the decimals\\r\\n    uint256 receivedAmount;\\r\\n    if (fromDecimals > toDecimals) {\\r\\n      receivedAmount =\\r\\n        (amountAfterFee * rate) /\\r\\n        (10 ** (fromDecimals - toDecimals));\\r\\n    } else if (toDecimals > fromDecimals) {\\r\\n      receivedAmount =\\r\\n        (amountAfterFee * rate) *\\r\\n        (10 ** (toDecimals - fromDecimals));\\r\\n    } else {\\r\\n      receivedAmount = (amountAfterFee * rate);\\r\\n    }\\r\\n\\r\\n    return receivedAmount / 1e18;\\r\\n  }\\r\\n\\r\\n  function swap(\\r\\n    address fromToken,\\r\\n    address toToken,\\r\\n    uint256 amount\\r\\n  ) external nonReentrant {\\r\\n    require(\\r\\n      (fromToken == address(asset1) || fromToken == address(asset2)) &&\\r\\n        (toToken == address(asset1) || toToken == address(asset2)),\\r\\n      'Unsupported token'\\r\\n    );\\r\\n    require(fromToken != toToken, 'Cannot swap the same token');\\r\\n    require(amount > 0, 'Amount must be greater than zero');\\r\\n\\r\\n    IERC20(fromToken).safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n    uint256 fee = (amount * SWAP_FEE_BPS) / 10000;\\r\\n    uint256 amountAfterFee = amount - fee;\\r\\n\\r\\n    uint256 receivedAmount = _calculateReceivedAmount(\\r\\n      fromToken,\\r\\n      toToken,\\r\\n      amountAfterFee\\r\\n    );\\r\\n\\r\\n    IERC20(toToken).safeTransfer(msg.sender, receivedAmount);\\r\\n  }\\r\\n\\r\\n  function provideLiquidity(\\r\\n    uint256 amount1,\\r\\n    uint256 amount2\\r\\n  ) external nonReentrant {\\r\\n    uint256 totalValue1 = amount1;\\r\\n    uint256 balanceB4 = IERC20(asset2).balanceOf(address(this)) +\\r\\n      IERC20(asset1).balanceOf(address(this));\\r\\n    asset1.safeTransferFrom(msg.sender, address(this), amount1);\\r\\n    asset2.safeTransferFrom(msg.sender, address(this), amount2);\\r\\n    performRebalanceIfNeeded();\\r\\n    uint256 balance = IERC20(asset2).balanceOf(address(this)) +\\r\\n      IERC20(asset1).balanceOf(address(this));\\r\\n    uint256 toMint = balanceB4 - balance;\\r\\n    _mint(msg.sender, toMint);\\r\\n  }\\r\\n\\r\\n  function removeLiquidity(uint256 share) external nonReentrant {\\r\\n    require(balanceOf(msg.sender) >= share, 'Insufficient share');\\r\\n    uint256 totalSupply = totalSupply();\\r\\n    uint256 totalValue = calculatePoolValue();\\r\\n    uint256 userValue = (totalValue * share) / totalSupply;\\r\\n    uint256 shareAsset1 = calculateAssetShareFromValue(\\r\\n      userValue,\\r\\n      address(asset1)\\r\\n    );\\r\\n    uint256 shareAsset2 = userValue - shareAsset1; // Ensure preservation of total value\\r\\n    _burn(msg.sender, share);\\r\\n    asset1.safeTransfer(msg.sender, shareAsset1);\\r\\n    asset2.safeTransfer(msg.sender, shareAsset2);\\r\\n    performRebalanceIfNeeded();\\r\\n  }\\r\\n\\r\\n  function calculatePoolValue() internal view returns (uint256) {\\r\\n    uint256 totalAsset1 = asset1.balanceOf(address(this)) *\\r\\n      (10 ** (18 - IERC20Metadata(address(asset1)).decimals()));\\r\\n    uint256 totalAsset2ValueInAsset1 = _calculateReceivedAmount(\\r\\n      address(asset2),\\r\\n      address(asset1),\\r\\n      asset2.balanceOf(address(this))\\r\\n    ) * (10 ** (18 - IERC20Metadata(address(asset1)).decimals()));\\r\\n\\r\\n    return totalAsset1 + totalAsset2ValueInAsset1;\\r\\n  }\\r\\n\\r\\n  function calculateAssetShareFromValue(\\r\\n    uint256 value,\\r\\n    address asset\\r\\n  ) internal view returns (uint256) {\\r\\n    uint256 rate = oracle.getRate(IERC20(asset), asset1, true); // Assume rate is from asset to asset1\\r\\n    uint256 decimalsDiff = 18 +\\r\\n      IERC20Metadata(address(asset1)).decimals() -\\r\\n      IERC20Metadata(asset).decimals();\\r\\n    return (value * 10 ** decimalsDiff) / rate;\\r\\n  }\\r\\n\\r\\n  function performRebalanceIfNeeded() internal {\\r\\n    address[] memory assets = new address[](2);\\r\\n    uint256[] memory weights = new uint256[](2);\\r\\n\\r\\n    assets[0] = address(asset1);\\r\\n    assets[1] = address(asset2);\\r\\n\\r\\n    weights[0] = 5000; // Represents 50% in a 10,000 basis format\\r\\n    weights[1] = 5000; // Represents 50%\\r\\n\\r\\n    IBaluniV1Rebalancer.RebalanceType rebalanceStatus = rebalancer\\r\\n      .checkRebalance(assets, weights, 50, address(this));\\r\\n\\r\\n    if (rebalanceStatus != IBaluniV1Rebalancer.RebalanceType.NoRebalance) {\\r\\n      rebalancer.rebalance(assets, weights, address(this), address(this));\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x297198068e774ef31f884fc716922b6e86d3ba05b0b155e839bc1498b8da95d3\",\"license\":\"GNU AGPLv3\"},\"contracts/interfaces/IBaluniV1Rebalancer.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\r\\npragma solidity 0.8.25;\\r\\n\\r\\ninterface IBaluniV1Rebalancer {\\r\\n  enum RebalanceType {\\r\\n    Overweight,\\r\\n    Underweight,\\r\\n    NoRebalance\\r\\n  }\\r\\n\\r\\n  function checkRebalance(\\r\\n    address[] memory assets,\\r\\n    uint256[] memory weights,\\r\\n    uint256 limit,\\r\\n    address sender\\r\\n  ) external view returns (RebalanceType);\\r\\n\\r\\n  function rebalance(\\r\\n    address[] memory assets,\\r\\n    uint256[] memory weights,\\r\\n    address sender,\\r\\n    address receiver\\r\\n  ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x0e9bf0e81c0ed9faf15470ef24f353d47a4cec92b69754b7b0ffa9cab4f4e454\",\"license\":\"GNU AGPLv3\"}},\"version\":1}",
  "bytecode": "0x60806040908082523461044857608081611b6880380380916100218285610467565b833981010312610448576100348161048a565b60209161004283820161048a565b9061005a606061005387840161048a565b920161048a565b928551916100678361044c565b600f83526e042616c756e6920537461626c654c5608c1b8684015286519261008e8461044c565b600a845269042414c554e492d534c560b41b8785015280516001600160401b0390818111610350576003908154906001948583811c9316801561043e575b8c84101461042a5781908c601f948581116103d9575b50508c9084831160011461036f575f92610364575b50505f1982851b1c191690851b1782555b86519283116103505760049687548581811c91168015610346575b8c82101461033357908b828487969594116102de575b50508b91841160011461027a575f9361026f575b505082841b925f19911b1c19161784555b60055560018060a01b038080951692818060018060a01b03199486866006541617600655169788856007541617600755168360085416176008551690600954161760095585519063095ea7b360e01b908183528383015285826044815f8019998a60248401525af180156102655786946044935f92610248575b50806008541690600654169689519788968795865285015260248401525af1801561023e57610210575b82516116b190816104b78239f35b8161022f92903d10610237575b6102278183610467565b81019061049e565b505f80610202565b503d61021d565b83513d5f823e3d90fd5b61025e90873d8911610237576102278183610467565b505f6101d8565b87513d5f823e3d90fd5b015191505f8061014d565b5f8981528c812087965093929190601f198616908e5b8282106102c757505085116102ae575b50505050811b01845561015e565b01519060f8845f19921b161c191690555f8080806102a0565b83850151875589989096019593840193018e610290565b909192939450895f5283825f209181880160051c830193881061032a575b9188918897969594930160051c01915b82811061031c57508d9150610139565b5f815587965088910161030c565b925081926102fc565b602289634e487b7160e01b5f525260245ffd5b90607f1690610123565b634e487b7160e01b5f52604160045260245ffd5b015190505f806100f7565b879350908d91601f198416875f52835f20935f905b8282106103b857505084116103a1575b505050811b018255610108565b01515f1983871b60f8161c191690555f8080610394565b91929395968291958786015181550195019301908f918a9695949392610384565b90919250855f5284825f209181860160051c8301938610610421575b918991869594930160051c01915b82811061041357508e91506100e2565b5f8155859450899101610403565b925081926103f5565b634e487b7160e01b5f52602260045260245ffd5b92607f16926100cc565b5f80fd5b604081019081106001600160401b0382111761035057604052565b601f909101601f19168101906001600160401b0382119082101761035057604052565b51906001600160a01b038216820361044857565b9081602091031261044857518015158103610448579056fe6080604090808252600480361015610015575f80fd5b5f3560e01c91826301d22ccd14610e185750816306fdde0314610d24578163095ea7b314610c7c57816318160ddd14610c5e57816323b872dd14610b7d578163313ce56714610b6257816367a6c44014610b4757816370a0823114610b115781637a16af7f146108c75781637cd5f3f91461089f5781637dc0d1d01461087757816395d89b41146107755781639c8f9f2314610320578163a9059cbb146102f0578163dd62ed3e146102a3578163df791e5014610106575063e9423bf2146100db575f80fd5b34610102575f3660031901126101025760085490516001600160a01b039091168152602090f35b5f80fd5b82346101025761011536610e7b565b90919361012061103b565b6007546001600160a01b03868116918116828114908115610295575b81610271575b501561023a578416948582146101f85783156101b6575082610167913090339061105e565b601e820290828204601e036101a357509161018e61019c9592612710610194950490610f23565b916113dd565b90339061138d565b6001600555005b601190634e487b7160e01b5f525260245ffd5b5162461bcd60e51b8152602081840181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152606490fd5b5162461bcd60e51b8152602081840152601a60248201527f43616e6e6f742073776170207468652073616d6520746f6b656e0000000000006044820152606490fd5b855162461bcd60e51b815260208185015260116024820152702ab739bab83837b93a32b2103a37b5b2b760791b6044820152606490fd5b86831690811491508115610287575b5088610142565b905081600854161488610280565b60085483168414915061013c565b82346101025780600319360112610102576102bc610e65565b906024356001600160a01b038181169182900361010257602093165f5260018352815f20905f528252805f20549051908152f35b823461010257806003193601126101025760209061031961030f610e65565b6024359033610f61565b5160018152f35b905034610102576020918260031936011261010257813561033f61103b565b335f525f845280825f20541061073e5760025460075483516370a0823160e01b808252308783015290966001600160a01b0395909390928616918489602481865afa988915610625575f9961070f575b50835163313ce56760e01b808252999086818b81885afa9081156106b5576103c66103d193926103cb925f916106f2575b50611357565b61137c565b90610f30565b9087600854168551918252308a8301528682602481845afa9081156106b55785905f926106bf575b61040393506113dd565b84518a815286818b81885afa9081156106b557610447610451946104416104979897956103cb6103c661044c978f978f5f92610698575b5050611357565b90610f02565b610f30565b610f43565b600954845163802431fb60e01b81526001600160a01b038416818b01818152602081019190915260016040820152929a9094909287928692908b16918391829160600190565b03915afa928315610625575f93610669575b50835181815285818a81865afa90811561065f579060ff915f91610642575b50166012019060ff821161062f5785908986518095819382525afa91821561062557916104ff9160ff935f926105f6575b50611368565b16604d81116105e3576105239161044c61051c92600a0a8a610f30565b8097610f23565b9433156105ce57335f525f8352815f2054908482106105a35750927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61059b97935f93836105909733875286845203818620558360025403600255519283523392a333836007541661138d565b33906008541661138d565b61019c611171565b825163391434e360e21b81523391810191825260208201929092526040810185905281906060010390fd5b5f6024925191634b637e8f60e11b8352820152fd5b601187634e487b7160e01b5f525260245ffd5b610617919250873d891161061e575b61060f8183610ee0565b81019061133e565b905f6104f9565b503d610605565b84513d5f823e3d90fd5b601189634e487b7160e01b5f525260245ffd5b6106599150873d891161061e5761060f8183610ee0565b5f6104c8565b85513d5f823e3d90fd5b9092508481813d8311610691575b6106818183610ee0565b810103126101025751915f6104a9565b503d610677565b6106ae9250803d1061061e5761060f8183610ee0565b5f8f61043a565b86513d5f823e3d90fd5b9150508682813d83116106eb575b6106d78183610ee0565b8101031261010257846104039251916103f9565b503d6106cd565b61070991508a3d8c1161061e5761060f8183610ee0565b5f6103c0565b9098508481813d8311610737575b6107278183610ee0565b810103126101025751975f61038f565b503d61071d565b5091606492519162461bcd60e51b83528201526012602482015271496e73756666696369656e7420736861726560701b6044820152fd5b8234610102575f366003190112610102578051905f9280549060018260011c916001841693841561086d575b602094858510811461085a5784885290811561083857506001146107df575b6107db86866107d1828b0383610ee0565b5191829182610e3b565b0390f35b5f9081529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061082557505050826107db946107d19282010194866107c0565b8054868501880152928601928101610808565b60ff191687860152505050151560051b83010192506107d1826107db866107c0565b602283634e487b7160e01b5f525260245ffd5b92607f16926107a1565b8234610102575f3660031901126101025760095490516001600160a01b039091168152602090f35b8234610102575f3660031901126101025760075490516001600160a01b039091168152602090f35b90503461010257816003193601126101025760246108e361103b565b60085483516370a0823160e01b80825230858301529094602093909290916001600160a01b0391859088908590829086165afa968715610625575f97610ae2575b5081600754169184519782895230888a015286898681875afa9081156106b55785969798995f92610aae575b5061096b9161095e91610f02565b938935903090339061105e565b61097c84353033846008541661105e565b610984611171565b868160085416875195868092868252308d8301525afa9384156106b5579087915f95610a7d575b506007541691858751809481938252308c8301525afa90811561065f575f91610a4e575b506109dd906109e393610f02565b90610f23565b933315610a3b57845f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8686610a1b85600254610f02565b600255338452838252808420858154019055519384523393a36001600555005b5f83519163ec442f0560e01b8352820152fd5b90508581813d8311610a76575b610a658183610ee0565b8101031261010257516109e36109cf565b503d610a5b565b8281939296503d8311610aa7575b610a958183610ee0565b8101031261010257869051935f6109ab565b503d610a8b565b955090508785813d8111610adb575b610ac78183610ee0565b81010312610102579351859461095e610950565b503d610abd565b9096508481813d8311610b0a575b610afa8183610ee0565b810103126101025751955f610924565b503d610af0565b8234610102576020366003190112610102576020906001600160a01b03610b36610e65565b165f525f8252805f20549051908152f35b8234610102575f3660031901126101025760209051601e8152f35b8234610102575f366003190112610102576020905160128152f35b90503461010257610b8d36610e7b565b6001600160a01b0383165f81815260016020818152888320338452905290879020549295939493908301610bca575b602087610319888888610f61565b858310610c32578115610c1c573315610c0657505f90815260016020908152868220338352815290869020918590039091558290610319610bbc565b6024905f885191634a1406b160e11b8352820152fd5b6024905f88519163e602df0560e01b8352820152fd5b8651637dc7a0d960e11b8152339181019182526020820193909352604081018690528291506060010390fd5b8234610102575f366003190112610102576020906002549051908152f35b8234610102578060031936011261010257610c95610e65565b602435903315610d0e576001600160a01b0316908115610cf85760209350335f5260018452825f20825f52845280835f205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8251634a1406b160e11b81525f81860152602490fd5b825163e602df0560e01b81525f81860152602490fd5b8234610102575f366003190112610102578051905f9260035460018160011c91600181168015610e0e575b6020948585108214610dfb5750838752908115610ddb5750600114610d81575b5050506107d1826107db940383610ee0565b60035f9081529295507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828410610dc857505050826107db946107d19282010194610d6f565b8054868501880152928601928101610dac565b60ff1916868501525050151560051b83010192506107d1826107db610d6f565b602290634e487b7160e01b5f525260245ffd5b92607f1692610d4f565b34610102575f366003190112610102576006546001600160a01b03168152602090f35b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b600435906001600160a01b038216820361010257565b6060906003190112610102576001600160a01b0390600435828116810361010257916024359081168103610102579060443590565b6060810190811067ffffffffffffffff821117610ecc57604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff821117610ecc57604052565b91908201809211610f0f57565b634e487b7160e01b5f52601160045260245ffd5b91908203918211610f0f57565b81810292918115918404141715610f0f57565b8115610f4d570490565b634e487b7160e01b5f52601260045260245ffd5b916001600160a01b03808416928315611023571692831561100b57825f525f60205260405f205490828210610fd95750817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f5260405f20818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101829052606490fd5b60405163ec442f0560e01b81525f6004820152602490fd5b604051634b637e8f60e11b81525f6004820152602490fd5b60026005541461104c576002600555565b604051633ee5aeb560e01b8152600490fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff841117610ecc576110b792604052611568565b565b8051156110c65760200190565b634e487b7160e01b5f52603260045260245ffd5b8051600110156110c65760400190565b9081518082526020808093019301915f5b828110611109575050505090565b83516001600160a01b0316855293810193928101926001016110fb565b9081518082526020808093019301915f5b828110611145575050505090565b835185529381019392810192600101611137565b90816020910312610102575180151581036101025790565b6040805161117e81610eb0565b6002815260209180368484013780519161119783610eb0565b600283528136858501376007546001600160a01b039081166111b8836110b9565b5280600854166111c7836110da565b52611388806111d5866110b9565b526111df856110da565b526006548351638957698960e01b81526080600482015294911661120660848601846110ea565b94868180611221600319998a83820301602484015287611126565b603260448301523060648301520381855afa90811561065f575f91611308575b5060038110156112f45760020361125b575b505050505050565b6112885f87946112978751988996879586946303978bed60e31b86526080600487015260848601906110ea565b91848303016024850152611126565b30604483015230606483015203925af19081156112eb57506112bd575b80808080611253565b816112dc92903d106112e4575b6112d48183610ee0565b810190611159565b505f806112b4565b503d6112ca565b513d5f823e3d90fd5b634e487b7160e01b5f52602160045260245ffd5b90508681813d8311611337575b61131f8183610ee0565b8101031261010257516003811015610102575f611241565b503d611315565b90816020910312610102575160ff811681036101025790565b60ff166012039060ff8211610f0f57565b9060ff8091169116039060ff8211610f0f57565b60ff16604d8111610f0f57600a0a90565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff831182841017610ecc576110b792604052611568565b6009546040805163802431fb60e01b81526001600160a01b039384166004820181905294841660248201819052600160448301529196959493602093919291849184916064918391165afa918215611504575f92611539575b50865193838560048163313ce56760e01b948582525afa94851561152f575f9561150e575b508390600489518094819382525afa92831561150457670de0b6b3a76400009697505f936114e5575b505060ff838116908316808211156114bc5750506114b2916114ac6103c6926114b896610f30565b93611368565b90610f43565b0490565b92939211156114d9576103cb916114ac6103c6926114b896610f30565b9150506114b891610f30565b6114fc929350803d1061061e5761060f8183610ee0565b905f80611484565b87513d5f823e3d90fd5b8491955061152890823d841161061e5761060f8183610ee0565b949061145b565b88513d5f823e3d90fd5b9091508281813d8311611561575b6115518183610ee0565b810103126101025751905f611436565b503d611547565b81516001600160a01b03909116915f91829160200182855af13d1561160c573d67ffffffffffffffff8111610ecc576115c391604051916115b36020601f19601f8401160184610ee0565b82523d5f602084013e5b83611618565b80519081151591826115f1575b50506115d95750565b60249060405190635274afe760e01b82526004820152fd5b6116049250602080918301019101611159565b155f806115d0565b6115c3906060906115bd565b9061163f575080511561162d57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580611672575b611650575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561164856fea2646970667358221220806fbc5a5252e3811ca2c0244c69452d5fdb03199d06a98b5446d030ba287ce264736f6c63430008190033",
  "deployedBytecode": "0x6080604090808252600480361015610015575f80fd5b5f3560e01c91826301d22ccd14610e185750816306fdde0314610d24578163095ea7b314610c7c57816318160ddd14610c5e57816323b872dd14610b7d578163313ce56714610b6257816367a6c44014610b4757816370a0823114610b115781637a16af7f146108c75781637cd5f3f91461089f5781637dc0d1d01461087757816395d89b41146107755781639c8f9f2314610320578163a9059cbb146102f0578163dd62ed3e146102a3578163df791e5014610106575063e9423bf2146100db575f80fd5b34610102575f3660031901126101025760085490516001600160a01b039091168152602090f35b5f80fd5b82346101025761011536610e7b565b90919361012061103b565b6007546001600160a01b03868116918116828114908115610295575b81610271575b501561023a578416948582146101f85783156101b6575082610167913090339061105e565b601e820290828204601e036101a357509161018e61019c9592612710610194950490610f23565b916113dd565b90339061138d565b6001600555005b601190634e487b7160e01b5f525260245ffd5b5162461bcd60e51b8152602081840181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152606490fd5b5162461bcd60e51b8152602081840152601a60248201527f43616e6e6f742073776170207468652073616d6520746f6b656e0000000000006044820152606490fd5b855162461bcd60e51b815260208185015260116024820152702ab739bab83837b93a32b2103a37b5b2b760791b6044820152606490fd5b86831690811491508115610287575b5088610142565b905081600854161488610280565b60085483168414915061013c565b82346101025780600319360112610102576102bc610e65565b906024356001600160a01b038181169182900361010257602093165f5260018352815f20905f528252805f20549051908152f35b823461010257806003193601126101025760209061031961030f610e65565b6024359033610f61565b5160018152f35b905034610102576020918260031936011261010257813561033f61103b565b335f525f845280825f20541061073e5760025460075483516370a0823160e01b808252308783015290966001600160a01b0395909390928616918489602481865afa988915610625575f9961070f575b50835163313ce56760e01b808252999086818b81885afa9081156106b5576103c66103d193926103cb925f916106f2575b50611357565b61137c565b90610f30565b9087600854168551918252308a8301528682602481845afa9081156106b55785905f926106bf575b61040393506113dd565b84518a815286818b81885afa9081156106b557610447610451946104416104979897956103cb6103c661044c978f978f5f92610698575b5050611357565b90610f02565b610f30565b610f43565b600954845163802431fb60e01b81526001600160a01b038416818b01818152602081019190915260016040820152929a9094909287928692908b16918391829160600190565b03915afa928315610625575f93610669575b50835181815285818a81865afa90811561065f579060ff915f91610642575b50166012019060ff821161062f5785908986518095819382525afa91821561062557916104ff9160ff935f926105f6575b50611368565b16604d81116105e3576105239161044c61051c92600a0a8a610f30565b8097610f23565b9433156105ce57335f525f8352815f2054908482106105a35750927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61059b97935f93836105909733875286845203818620558360025403600255519283523392a333836007541661138d565b33906008541661138d565b61019c611171565b825163391434e360e21b81523391810191825260208201929092526040810185905281906060010390fd5b5f6024925191634b637e8f60e11b8352820152fd5b601187634e487b7160e01b5f525260245ffd5b610617919250873d891161061e575b61060f8183610ee0565b81019061133e565b905f6104f9565b503d610605565b84513d5f823e3d90fd5b601189634e487b7160e01b5f525260245ffd5b6106599150873d891161061e5761060f8183610ee0565b5f6104c8565b85513d5f823e3d90fd5b9092508481813d8311610691575b6106818183610ee0565b810103126101025751915f6104a9565b503d610677565b6106ae9250803d1061061e5761060f8183610ee0565b5f8f61043a565b86513d5f823e3d90fd5b9150508682813d83116106eb575b6106d78183610ee0565b8101031261010257846104039251916103f9565b503d6106cd565b61070991508a3d8c1161061e5761060f8183610ee0565b5f6103c0565b9098508481813d8311610737575b6107278183610ee0565b810103126101025751975f61038f565b503d61071d565b5091606492519162461bcd60e51b83528201526012602482015271496e73756666696369656e7420736861726560701b6044820152fd5b8234610102575f366003190112610102578051905f9280549060018260011c916001841693841561086d575b602094858510811461085a5784885290811561083857506001146107df575b6107db86866107d1828b0383610ee0565b5191829182610e3b565b0390f35b5f9081529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061082557505050826107db946107d19282010194866107c0565b8054868501880152928601928101610808565b60ff191687860152505050151560051b83010192506107d1826107db866107c0565b602283634e487b7160e01b5f525260245ffd5b92607f16926107a1565b8234610102575f3660031901126101025760095490516001600160a01b039091168152602090f35b8234610102575f3660031901126101025760075490516001600160a01b039091168152602090f35b90503461010257816003193601126101025760246108e361103b565b60085483516370a0823160e01b80825230858301529094602093909290916001600160a01b0391859088908590829086165afa968715610625575f97610ae2575b5081600754169184519782895230888a015286898681875afa9081156106b55785969798995f92610aae575b5061096b9161095e91610f02565b938935903090339061105e565b61097c84353033846008541661105e565b610984611171565b868160085416875195868092868252308d8301525afa9384156106b5579087915f95610a7d575b506007541691858751809481938252308c8301525afa90811561065f575f91610a4e575b506109dd906109e393610f02565b90610f23565b933315610a3b57845f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8686610a1b85600254610f02565b600255338452838252808420858154019055519384523393a36001600555005b5f83519163ec442f0560e01b8352820152fd5b90508581813d8311610a76575b610a658183610ee0565b8101031261010257516109e36109cf565b503d610a5b565b8281939296503d8311610aa7575b610a958183610ee0565b8101031261010257869051935f6109ab565b503d610a8b565b955090508785813d8111610adb575b610ac78183610ee0565b81010312610102579351859461095e610950565b503d610abd565b9096508481813d8311610b0a575b610afa8183610ee0565b810103126101025751955f610924565b503d610af0565b8234610102576020366003190112610102576020906001600160a01b03610b36610e65565b165f525f8252805f20549051908152f35b8234610102575f3660031901126101025760209051601e8152f35b8234610102575f366003190112610102576020905160128152f35b90503461010257610b8d36610e7b565b6001600160a01b0383165f81815260016020818152888320338452905290879020549295939493908301610bca575b602087610319888888610f61565b858310610c32578115610c1c573315610c0657505f90815260016020908152868220338352815290869020918590039091558290610319610bbc565b6024905f885191634a1406b160e11b8352820152fd5b6024905f88519163e602df0560e01b8352820152fd5b8651637dc7a0d960e11b8152339181019182526020820193909352604081018690528291506060010390fd5b8234610102575f366003190112610102576020906002549051908152f35b8234610102578060031936011261010257610c95610e65565b602435903315610d0e576001600160a01b0316908115610cf85760209350335f5260018452825f20825f52845280835f205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8251634a1406b160e11b81525f81860152602490fd5b825163e602df0560e01b81525f81860152602490fd5b8234610102575f366003190112610102578051905f9260035460018160011c91600181168015610e0e575b6020948585108214610dfb5750838752908115610ddb5750600114610d81575b5050506107d1826107db940383610ee0565b60035f9081529295507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828410610dc857505050826107db946107d19282010194610d6f565b8054868501880152928601928101610dac565b60ff1916868501525050151560051b83010192506107d1826107db610d6f565b602290634e487b7160e01b5f525260245ffd5b92607f1692610d4f565b34610102575f366003190112610102576006546001600160a01b03168152602090f35b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b600435906001600160a01b038216820361010257565b6060906003190112610102576001600160a01b0390600435828116810361010257916024359081168103610102579060443590565b6060810190811067ffffffffffffffff821117610ecc57604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff821117610ecc57604052565b91908201809211610f0f57565b634e487b7160e01b5f52601160045260245ffd5b91908203918211610f0f57565b81810292918115918404141715610f0f57565b8115610f4d570490565b634e487b7160e01b5f52601260045260245ffd5b916001600160a01b03808416928315611023571692831561100b57825f525f60205260405f205490828210610fd95750817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f5260405f20818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101829052606490fd5b60405163ec442f0560e01b81525f6004820152602490fd5b604051634b637e8f60e11b81525f6004820152602490fd5b60026005541461104c576002600555565b604051633ee5aeb560e01b8152600490fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff841117610ecc576110b792604052611568565b565b8051156110c65760200190565b634e487b7160e01b5f52603260045260245ffd5b8051600110156110c65760400190565b9081518082526020808093019301915f5b828110611109575050505090565b83516001600160a01b0316855293810193928101926001016110fb565b9081518082526020808093019301915f5b828110611145575050505090565b835185529381019392810192600101611137565b90816020910312610102575180151581036101025790565b6040805161117e81610eb0565b6002815260209180368484013780519161119783610eb0565b600283528136858501376007546001600160a01b039081166111b8836110b9565b5280600854166111c7836110da565b52611388806111d5866110b9565b526111df856110da565b526006548351638957698960e01b81526080600482015294911661120660848601846110ea565b94868180611221600319998a83820301602484015287611126565b603260448301523060648301520381855afa90811561065f575f91611308575b5060038110156112f45760020361125b575b505050505050565b6112885f87946112978751988996879586946303978bed60e31b86526080600487015260848601906110ea565b91848303016024850152611126565b30604483015230606483015203925af19081156112eb57506112bd575b80808080611253565b816112dc92903d106112e4575b6112d48183610ee0565b810190611159565b505f806112b4565b503d6112ca565b513d5f823e3d90fd5b634e487b7160e01b5f52602160045260245ffd5b90508681813d8311611337575b61131f8183610ee0565b8101031261010257516003811015610102575f611241565b503d611315565b90816020910312610102575160ff811681036101025790565b60ff166012039060ff8211610f0f57565b9060ff8091169116039060ff8211610f0f57565b60ff16604d8111610f0f57600a0a90565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff831182841017610ecc576110b792604052611568565b6009546040805163802431fb60e01b81526001600160a01b039384166004820181905294841660248201819052600160448301529196959493602093919291849184916064918391165afa918215611504575f92611539575b50865193838560048163313ce56760e01b948582525afa94851561152f575f9561150e575b508390600489518094819382525afa92831561150457670de0b6b3a76400009697505f936114e5575b505060ff838116908316808211156114bc5750506114b2916114ac6103c6926114b896610f30565b93611368565b90610f43565b0490565b92939211156114d9576103cb916114ac6103c6926114b896610f30565b9150506114b891610f30565b6114fc929350803d1061061e5761060f8183610ee0565b905f80611484565b87513d5f823e3d90fd5b8491955061152890823d841161061e5761060f8183610ee0565b949061145b565b88513d5f823e3d90fd5b9091508281813d8311611561575b6115518183610ee0565b810103126101025751905f611436565b503d611547565b81516001600160a01b03909116915f91829160200182855af13d1561160c573d67ffffffffffffffff8111610ecc576115c391604051916115b36020601f19601f8401160184610ee0565b82523d5f602084013e5b83611618565b80519081151591826115f1575b50506115d95750565b60249060405190635274afe760e01b82526004820152fd5b6116049250602080918301019101611159565b155f806115d0565b6115c3906060906115bd565b9061163f575080511561162d57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580611672575b611650575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561164856fea2646970667358221220806fbc5a5252e3811ca2c0244c69452d5fdb03199d06a98b5446d030ba287ce264736f6c63430008190033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 159,
        "contract": "contracts/BaluniV1StablePool.sol:BaluniV1StablePool",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 165,
        "contract": "contracts/BaluniV1StablePool.sol:BaluniV1StablePool",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 167,
        "contract": "contracts/BaluniV1StablePool.sol:BaluniV1StablePool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 169,
        "contract": "contracts/BaluniV1StablePool.sol:BaluniV1StablePool",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 171,
        "contract": "contracts/BaluniV1StablePool.sol:BaluniV1StablePool",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1375,
        "contract": "contracts/BaluniV1StablePool.sol:BaluniV1StablePool",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1466,
        "contract": "contracts/BaluniV1StablePool.sol:BaluniV1StablePool",
        "label": "rebalancer",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IBaluniV1Rebalancer)2173"
      },
      {
        "astId": 1469,
        "contract": "contracts/BaluniV1StablePool.sol:BaluniV1StablePool",
        "label": "asset1",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)729"
      },
      {
        "astId": 1472,
        "contract": "contracts/BaluniV1StablePool.sol:BaluniV1StablePool",
        "label": "asset2",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20)729"
      },
      {
        "astId": 1475,
        "contract": "contracts/BaluniV1StablePool.sol:BaluniV1StablePool",
        "label": "oracle",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IOracle)1455"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IBaluniV1Rebalancer)2173": {
        "encoding": "inplace",
        "label": "contract IBaluniV1Rebalancer",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)729": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)1455": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}