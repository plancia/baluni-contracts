{
  "address": "0x75777130Bf188D689B4C00BB825Fd124bFFC02B2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "AgentCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "ChangeBpsFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPool",
          "type": "address"
        }
      ],
      "name": "ChangeStakingPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct Agent.Call[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokensReturn",
          "type": "address[]"
        }
      ],
      "name": "Execute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_BPS_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_MAX_BPS_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "changeBpsFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newPool",
          "type": "address"
        }
      ],
      "name": "changeStakingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Agent.Call[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "tokensReturn",
          "type": "address[]"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAgentAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getBaluniMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBpsFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balAmount",
          "type": "uint256"
        }
      ],
      "name": "getShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userAgents",
      "outputs": [
        {
          "internalType": "contract Agent",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5e1a61a1e0ace2dce607b25b3742907b736a3446102b16f9c75d17f03d80d583",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x75777130Bf188D689B4C00BB825Fd124bFFC02B2",
    "transactionIndex": 53,
    "gasUsed": "2365359",
    "logsBloom": "0x0000000000000000000000000000000000000000000000000080000000000040200000000000000000000000000010000000800000000000000c000000000000000000000000000000000000000000800001000000400000000100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000008000000004000000000000000000001000000000000000000000000000000100000000020000000000000000000000000000000008000000000000000000000000000100000",
    "blockHash": "0xec0ad1acded6a2804867344bf27af0f4d3236bf1da65a31d2ced7ee120dfd085",
    "transactionHash": "0x5e1a61a1e0ace2dce607b25b3742907b736a3446102b16f9c75d17f03d80d583",
    "logs": [
      {
        "transactionIndex": 53,
        "blockNumber": 56651317,
        "transactionHash": "0x5e1a61a1e0ace2dce607b25b3742907b736a3446102b16f9c75d17f03d80d583",
        "address": "0x75777130Bf188D689B4C00BB825Fd124bFFC02B2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 587,
        "blockHash": "0xec0ad1acded6a2804867344bf27af0f4d3236bf1da65a31d2ced7ee120dfd085"
      },
      {
        "transactionIndex": 53,
        "blockNumber": 56651317,
        "transactionHash": "0x5e1a61a1e0ace2dce607b25b3742907b736a3446102b16f9c75d17f03d80d583",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000131acdccbc3f5c7000000000000000000000000000000000000000000000000034fb9ad7c85e0b500000000000000000000000000000000000000000002f709cd4875c8687e4a65000000000000000000000000000000000000000000000000021e0cd0b0c1eaee00000000000000000000000000000000000000000002f709ce7a22a53442402c",
        "logIndex": 588,
        "blockHash": "0xec0ad1acded6a2804867344bf27af0f4d3236bf1da65a31d2ced7ee120dfd085"
      }
    ],
    "blockNumber": 56651317,
    "cumulativeGasUsed": "10358963",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "1883860fc3a26ed100114e405c6614a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"AgentCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"ChangeBpsFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"ChangeStakingPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Agent.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokensReturn\",\"type\":\"address[]\"}],\"name\":\"Execute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BPS_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MAX_BPS_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeBpsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPool\",\"type\":\"address\"}],\"name\":\"changeStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Agent.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensReturn\",\"type\":\"address[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAgentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBaluniMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBpsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balAmount\",\"type\":\"uint256\"}],\"name\":\"getShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAgents\",\"outputs\":[{\"internalType\":\"contract Agent\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Router.sol\":\"Router\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/Agent.sol\":{\"content\":\"pragma solidity 0.8.25;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\n\\r\\ninterface IRouter {\\r\\n\\tfunction getBpsFee() external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract Agent {\\r\\n\\tusing SafeERC20 for IERC20Metadata;\\r\\n\\tusing Address for address payable;\\r\\n\\r\\n\\taddress public owner;\\r\\n\\taddress private router;\\r\\n\\r\\n\\tIERC20Metadata internal constant USDC =\\r\\n\\t\\tIERC20Metadata(0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174);\\r\\n\\tIERC20Metadata internal constant WNATIVE =\\r\\n\\t\\tIERC20Metadata(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270);\\r\\n\\r\\n\\tISwapRouter public immutable uniswapRouter =\\r\\n\\t\\tISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\r\\n\\r\\n\\tuint256 internal constant _DUST = 10;\\r\\n\\tuint256 internal constant _BPS_BASE = 10000;\\r\\n\\r\\n\\tstruct Call {\\r\\n\\t\\taddress to;\\r\\n\\t\\tuint256 value;\\r\\n\\t\\tbytes data;\\r\\n\\t}\\r\\n\\r\\n\\tconstructor(address _owner, address _router) {\\r\\n\\t\\trequire(msg.sender == _router, \\\"Only Router can instantiate\\\");\\r\\n\\t\\towner = _owner;\\r\\n\\t\\trouter = _router;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyRouter() {\\r\\n\\t\\trequire(msg.sender == router, \\\"Callable only by the router\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction execute(\\r\\n\\t\\tCall[] calldata calls,\\r\\n\\t\\taddress[] calldata tokensReturn\\r\\n\\t) external onlyRouter {\\r\\n\\t\\tfor (uint i = 0; i < calls.length; i++) {\\r\\n\\t\\t\\t(bool success, ) = calls[i].to.call{ value: calls[i].value }(\\r\\n\\t\\t\\t\\tcalls[i].data\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\trequire(success, \\\"Batch call failed\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t_swapTokensForUSDC(tokensReturn);\\r\\n\\t\\t_returnTokens(tokensReturn);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _swapTokensForUSDC(address[] calldata tokens) internal {\\r\\n\\t\\tuint256 routerBpsFee = IRouter(router).getBpsFee();\\r\\n\\r\\n\\t\\tfor (uint i = 0; i < tokens.length; i++) {\\r\\n\\t\\t\\tIERC20Metadata token = IERC20Metadata(tokens[i]);\\r\\n\\t\\t\\tuint tokenBalance = token.balanceOf(address(this));\\r\\n\\r\\n\\t\\t\\tif (tokenBalance == 0) continue;\\r\\n\\r\\n\\t\\t\\tuint amountAfterFee = (tokenBalance * (_BPS_BASE - routerBpsFee)) /\\r\\n\\t\\t\\t\\t_BPS_BASE;\\r\\n\\t\\t\\tif (amountAfterFee == 0 || address(token) == address(USDC)) {\\r\\n\\t\\t\\t\\tif (amountAfterFee != 0) {\\r\\n\\t\\t\\t\\t\\ttoken.transfer(router, amountAfterFee);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\ttoken.approve(address(uniswapRouter), amountAfterFee);\\r\\n\\r\\n\\t\\t\\t// Attempt direct swap, if it fails, then try multi-hop swap\\r\\n\\t\\t\\tif (!trySwapDirect(token, amountAfterFee)) {\\r\\n\\t\\t\\t\\tif (!tryMultiHopSwap(token, amountAfterFee)) {\\r\\n\\t\\t\\t\\t\\ttoken.transfer(owner, amountAfterFee); // If both swaps fail, return tokens to owner\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\ttoken.approve(address(uniswapRouter), 0); // Always revoke approval to minimize risk\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction trySwapDirect(\\r\\n\\t\\tIERC20Metadata token,\\r\\n\\t\\tuint amount\\r\\n\\t) private returns (bool) {\\r\\n\\t\\ttry\\r\\n\\t\\t\\tuniswapRouter.exactInputSingle(\\r\\n\\t\\t\\t\\tISwapRouter.ExactInputSingleParams({\\r\\n\\t\\t\\t\\t\\ttokenIn: address(token),\\r\\n\\t\\t\\t\\t\\ttokenOut: address(USDC),\\r\\n\\t\\t\\t\\t\\tfee: 3000,\\r\\n\\t\\t\\t\\t\\trecipient: address(this),\\r\\n\\t\\t\\t\\t\\tdeadline: block.timestamp,\\r\\n\\t\\t\\t\\t\\tamountIn: amount,\\r\\n\\t\\t\\t\\t\\tamountOutMinimum: 0,\\r\\n\\t\\t\\t\\t\\tsqrtPriceLimitX96: 0\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t)\\r\\n\\t\\treturns (uint) {\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t} catch {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction tryMultiHopSwap(\\r\\n\\t\\tIERC20Metadata token,\\r\\n\\t\\tuint amount\\r\\n\\t) private returns (bool) {\\r\\n\\t\\tbytes memory path = abi.encodePacked(\\r\\n\\t\\t\\taddress(token),\\r\\n\\t\\t\\tuint24(3000),\\r\\n\\t\\t\\taddress(WNATIVE),\\r\\n\\t\\t\\tuint24(3000),\\r\\n\\t\\t\\taddress(USDC)\\r\\n\\t\\t);\\r\\n\\t\\ttry\\r\\n\\t\\t\\tuniswapRouter.exactInput(\\r\\n\\t\\t\\t\\tISwapRouter.ExactInputParams({\\r\\n\\t\\t\\t\\t\\tpath: path,\\r\\n\\t\\t\\t\\t\\trecipient: address(this),\\r\\n\\t\\t\\t\\t\\tdeadline: block.timestamp,\\r\\n\\t\\t\\t\\t\\tamountIn: amount,\\r\\n\\t\\t\\t\\t\\tamountOutMinimum: 0\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t)\\r\\n\\t\\treturns (uint) {\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t} catch {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _returnTokens(address[] calldata tokensReturn) internal {\\r\\n\\t\\tfor (uint256 i = 0; i < tokensReturn.length; i++) {\\r\\n\\t\\t\\taddress token = tokensReturn[i];\\r\\n\\t\\t\\tuint256 balance = IERC20Metadata(token).balanceOf(address(this));\\r\\n\\t\\t\\tif (balance > _DUST) {\\r\\n\\t\\t\\t\\tIERC20Metadata(token).safeTransfer(owner, balance);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (address(this).balance > 0) {\\r\\n\\t\\t\\t\\tpayable(owner).sendValue(address(this).balance);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x8a15b3167475a82632319a2a2f9134af308be7a4f7acf869be271bd6f14a6ee5\"},\"contracts/core/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.25;\\r\\n\\r\\n/**\\r\\n *  __                  __                      __\\r\\n * /  |                /  |                    /  |\\r\\n * $$ |____    ______  $$ | __    __  _______  $$/\\r\\n * $$      \\\\  /      \\\\ $$ |/  |  /  |/       \\\\ /  |\\r\\n * $$$$$$$  | $$$$$$  |$$ |$$ |  $$ |$$$$$$$  |$$ |\\r\\n * $$ |  $$ | /    $$ |$$ |$$ |  $$ |$$ |  $$ |$$ |\\r\\n * $$ |__$$ |/$$$$$$$ |$$ |$$ \\\\__$$ |$$ |  $$ |$$ |\\r\\n * $$    $$/ $$    $$ |$$ |$$    $$/ $$ |  $$ |$$ |\\r\\n * $$$$$$$/   $$$$$$$/ $$/  $$$$$$/  $$/   $$/ $$/\\r\\n *\\r\\n *\\r\\n *                  ,-\\\"\\\"\\\"\\\"-.\\r\\n *                ,'      _ `.\\r\\n *               /       )_)  \\\\\\r\\n *              :              :\\r\\n *              \\\\              /\\r\\n *               \\\\            /\\r\\n *                `.        ,'\\r\\n *                  `.    ,'\\r\\n *                    `.,'\\r\\n *                     /\\\\`.   ,-._\\r\\n *                         `-'    \\\\__\\r\\n *                              .\\r\\n *               s                \\\\\\r\\n *                                \\\\\\\\\\r\\n *                                 \\\\\\\\\\r\\n *                                  >\\\\/7\\r\\n *                              _.-(6'  \\\\\\r\\n *                             (=___._/` \\\\\\r\\n *                                  )  \\\\ |\\r\\n *                                 /   / |\\r\\n *                                /    > /\\r\\n *                               j    < _\\\\\\r\\n *                           _.-' :      ``.\\r\\n *                           \\\\ r=._\\\\        `.\\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport \\\"./Agent.sol\\\";\\r\\n\\r\\ninterface IStakingPool {\\r\\n\\tfunction updateRewardIndex(uint256 reward) external;\\r\\n}\\r\\n\\r\\ncontract Router is Ownable, ERC20, ReentrancyGuard {\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\taddress public stakingPool;\\r\\n\\r\\n\\tuint256 public constant _MAX_BPS_FEE = 500;\\r\\n\\tuint256 public _BPS_FEE = 300; // 10 / 10000 * 100 = 3%.\\r\\n\\r\\n\\tIERC20 public constant USDC =\\r\\n\\t\\tIERC20(0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174);\\r\\n\\r\\n\\tmapping(address => Agent) public userAgents;\\r\\n\\r\\n\\tevent AgentCreated(address user, address agent);\\r\\n\\tevent Execute(address user, Agent.Call[] calls, address[] tokensReturn);\\r\\n\\tevent Burn(address user, uint256 value);\\r\\n\\tevent Mint(address user, uint256 value);\\r\\n\\tevent ChangeBpsFee(uint256 newFee);\\r\\n\\tevent ChangeStakingPool(address newPool);\\r\\n\\r\\n\\tmodifier validTimestamp(uint _timestamp) {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_timestamp <= block.timestamp,\\r\\n\\t\\t\\t\\\"Timestamp too far in the future\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_timestamp >= block.timestamp - 1 days,\\r\\n\\t\\t\\t\\\"Timestamp too far in the past\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tconstructor() Ownable(msg.sender) ERC20(\\\"Baluni\\\", \\\"BALUNI\\\") {}\\r\\n\\r\\n\\tfunction getAgentAddress(address _user) public view returns (address) {\\r\\n\\t\\tbytes32 salt = keccak256(abi.encodePacked(_user));\\r\\n\\t\\tbytes memory bytecode = getBytecode(_user);\\r\\n\\r\\n\\t\\tbytes32 hash = keccak256(\\r\\n\\t\\t\\tabi.encodePacked(\\r\\n\\t\\t\\t\\tbytes1(0xff),\\r\\n\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\tsalt,\\r\\n\\t\\t\\t\\tkeccak256(bytecode)\\r\\n\\t\\t\\t)\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\treturn address(uint160(uint(hash)));\\r\\n\\t}\\r\\n\\r\\n\\tfunction getOrCreateAgent(address user) private returns (Agent) {\\r\\n\\t\\tbytes32 salt = keccak256(abi.encodePacked(user));\\r\\n\\r\\n\\t\\tif (address(userAgents[user]) == address(0)) {\\r\\n\\t\\t\\tAgent agent = new Agent{ salt: salt }(user, address(this));\\r\\n\\t\\t\\tuserAgents[user] = agent;\\r\\n\\t\\t\\temit AgentCreated(user, address(agent));\\r\\n\\t\\t}\\r\\n\\t\\treturn userAgents[user];\\r\\n\\t}\\r\\n\\r\\n\\tfunction getBytecode(address _owner) internal view returns (bytes memory) {\\r\\n\\t\\trequire(_owner != address(0), \\\"Owner address cannot be zero.\\\");\\r\\n\\t\\tbytes memory bytecode = type(Agent).creationCode;\\r\\n\\t\\treturn abi.encodePacked(bytecode, abi.encode(_owner, address(this)));\\r\\n\\t}\\r\\n\\r\\n\\tfunction getBpsFee() external view returns (uint256) {\\r\\n\\t\\treturn _BPS_FEE;\\r\\n\\t}\\r\\n\\r\\n\\tfunction changeBpsFee(uint256 _newFee) external onlyOwner {\\r\\n\\t\\t_BPS_FEE = _newFee;\\r\\n\\t\\temit ChangeBpsFee(_newFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction changeStakingPool(address _newPool) external onlyOwner {\\r\\n\\t\\trequire(_newPool != address(0), \\\"Staking pool address cannot be zero.\\\");\\r\\n\\t\\tif (stakingPool != address(0))\\r\\n\\t\\t\\tIERC20(address(this)).approve(stakingPool, 0); // Revoke existing approval\\r\\n\\t\\tIERC20(address(this)).approve(_newPool, 2 ** 256 - 1);\\r\\n\\t\\tstakingPool = _newPool;\\r\\n\\t\\temit ChangeStakingPool(_newPool);\\r\\n\\t}\\r\\n\\r\\n\\tfunction execute(\\r\\n\\t\\tAgent.Call[] calldata calls,\\r\\n\\t\\taddress[] calldata tokensReturn\\r\\n\\t) external nonReentrant {\\r\\n\\t\\tuint256 usdBalanceB4 = USDC.balanceOf(address(this));\\r\\n\\r\\n\\t\\tAgent agent = getOrCreateAgent(msg.sender);\\r\\n\\t\\tagent.execute(calls, tokensReturn);\\r\\n\\t\\temit Execute(msg.sender, calls, tokensReturn);\\r\\n\\r\\n\\t\\tuint256 usdBalance = USDC.balanceOf(address(this));\\r\\n\\t\\tuint256 mintAmount = (usdBalance - usdBalanceB4) * 1e12;\\r\\n\\r\\n\\t\\tif (mintAmount > 0) {\\r\\n\\t\\t\\tuint256 amountInWithFee = getBaluniMintAmount(mintAmount);\\r\\n\\t\\t\\tuint256 feeAmount = mintAmount - amountInWithFee;\\r\\n\\r\\n\\t\\t\\t_mint(address(this), feeAmount);\\r\\n\\t\\t\\temit Mint(address(this), feeAmount);\\r\\n\\r\\n\\t\\t\\tIStakingPool(stakingPool).updateRewardIndex(feeAmount);\\r\\n\\t\\t\\t_mint(msg.sender, amountInWithFee);\\r\\n\\t\\t\\temit Mint(msg.sender, amountInWithFee);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction burn(uint amount) external nonReentrant {\\r\\n\\t\\trequire(amount > 0, \\\"Insufficient BAL\\\");\\r\\n\\t\\tuint usdcAmount = _calculateUSDCShare(amount);\\r\\n\\r\\n\\t\\tUSDC.transfer(msg.sender, usdcAmount / 1e12);\\r\\n\\t\\t_burn(msg.sender, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getBaluniMintAmount(\\r\\n\\t\\tuint256 _amount\\r\\n\\t) public view returns (uint256) {\\r\\n\\t\\tuint256 amountInWithFee = (_amount * (10000 - (_BPS_FEE * 2))) / 10000;\\r\\n\\r\\n\\t\\treturn amountInWithFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction mint(uint256 amount) external {\\r\\n\\t\\trequire(amount > 0, \\\"Amount must be greater than zero\\\");\\r\\n\\r\\n\\t\\t// Ensure there is enough allowance\\r\\n\\t\\tuint256 allowed = USDC.allowance(msg.sender, address(this));\\r\\n\\t\\trequire(allowed >= amount, \\\"Check the token allowance\\\");\\r\\n\\r\\n\\t\\tUSDC.safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n\\t\\tuint256 mintAmount = amount * 1e12; // Assuming USDC has 6 decimals\\r\\n\\t\\tuint256 amountInWithFee = (mintAmount * (10000 - _BPS_FEE)) / 10000;\\r\\n\\t\\tuint256 feeAmount = mintAmount - amountInWithFee;\\r\\n\\r\\n\\t\\t_mint(address(this), feeAmount);\\r\\n\\t\\temit Mint(address(this), feeAmount);\\r\\n\\r\\n\\t\\tIStakingPool(stakingPool).updateRewardIndex(feeAmount);\\r\\n\\r\\n\\t\\t_mint(msg.sender, amountInWithFee);\\r\\n\\t\\temit Mint(msg.sender, amountInWithFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _calculateUSDCShare(uint balAmount) internal view returns (uint) {\\r\\n\\t\\tuint totalBaluni = totalSupply();\\r\\n\\t\\tuint totalUSDC = USDC.balanceOf(address(this)) * 1e12;\\r\\n\\t\\treturn ((balAmount * totalUSDC) / totalBaluni) / 1e12;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getShare(uint balAmount) external view returns (uint) {\\r\\n\\t\\treturn _calculateUSDCShare(balAmount);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x2a3ae30896bc9f8b136ccd3351fcec930378c554bd0540930d84eba67c3bfef5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052346103395761001161033e565b6020906542616c756e6960d01b8282015261002a61033e565b6542414c554e4960d01b8382015233156103205760008054336001600160a01b0319821681178355919291906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08480a382516001600160401b039182821161030c576004938454926001968785811c95168015610302575b898610146102ef578190601f958681116102a1575b508990868311600114610242578492610237575b5050600019600383901b1c191690871b1785555b8151938411610224576005948554908782811c9216801561021a575b8983101461020757508381116101c6575b508692841160011461016357839495965092610158575b5050600019600383901b1c191690831b1790555b60065561012c60085560405161278490816103788239f35b01519050388061012c565b9190601f1984169685845280842093905b8882106101af57505083869796959610610196575b505050811b019055610140565b015160001960f88460031b161c19169055388080610189565b808885968294968601518155019501930190610174565b85825287822084808701881c8201928a88106101fe575b01871c019087905b8281106101f3575050610115565b8381550187906101e5565b925081926101dd565b634e487b7160e01b835260229052602482fd5b91607f1691610104565b634e487b7160e01b815260418552602490fd5b0151905038806100d4565b8885528a85208a94509190601f198416865b8d82821061028b5750508411610272575b505050811b0185556100e8565b015160001960f88460031b161c19169055388080610265565b8385015186558d97909501949384019301610254565b9091508784528984208680850160051c8201928c86106102e6575b918b91869594930160051c01915b8281106102d85750506100c0565b8681558594508b91016102ca565b925081926102bc565b634e487b7160e01b835260228752602483fd5b94607f16946100ab565b634e487b7160e01b84526041600452602484fd5b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b60408051919082016001600160401b038111838210176103615760405260068252565b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600091823560e01c806306497cb9146113fc57806306fdde0314611304578063095ea7b31461125b5780630c56ae3b1461123257806318160ddd14611213578063185fcffe1461068c57806323b872dd1461112057806327d54a9214610f95578063313ce56714610f7957806334decfc914610f5c57806342966c6814610ddd5780635bca5a5514610dbd57806370a0823114610d85578063715018a614610d2b5780637811a78514610cf05780638615ee5314610b6957806389a3027114610b3a5780638da5cb5b14610b1257806395d89b4114610a0e578063a0712d68146106dc578063a9059cbb146106ab578063b9f5e6171461068c578063cfb5a5f814610662578063dd62ed3e14610614578063eedc3c50146101d25763f2fde38b1461013f57600080fd5b346101ce5760203660031901126101ce57610158611498565b9061016161170e565b6001600160a01b039182169283156101b8575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b50346101ce57816003193601126101ce5767ffffffffffffffff9080358281116106105761020390369083016114d8565b92906024359382851161060c5761021e8695369086016114d8565b909161022861181a565b8651936370a0823160e01b918286523088870152602094732791bca1f2de4661ed88a30c99a7a9449aa841749786886024818c5afa978815610602578d986105d0575b508a51878101903360601b82526014815261028581611533565b519020338e52600988529b8d20546001600160a01b039c91908d1615610514575b5050338c52600986528b8b8b82205416803b15610510578b51630eedc3c560e41b8152808c018d905290829082908183816102fc8d6102e9604484018d8f6115f0565b838103600319016024850152908b6116ca565b03925af180156105065790889695949392916104e7575b5050610365907f959525f9273812bc5ed0bd375df7492e36027567ab13116ec62673c8d46870c89495966103588d5195869533875260608b88015260608701916115f0565b848103858f0152916116ca565b0390a16024875180968193825230898301525afa9081156104dd5787916104a8575b5061039292506115b2565b9064e8d4a5100091828102928184041490151715610495578490826103bb575b50600160065580f35b6103ce6103c7846115bf565b80946115b2565b906103d98230611903565b8451308152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688596908790604090a16007541691823b156104875760248492838851958694859363037312d160e21b85528401525af1801561048b57610473575b5050610466916104508233611903565b5133815260208101919091529081906040820190565b0390a138808083816103b2565b61047c90611509565b610487578338610440565b8380fd5b84513d84823e3d90fd5b634e487b7160e01b855260119052602484fd5b905082813d83116104d6575b6104be818361154f565b810103126104d157610392915138610387565b600080fd5b503d6104b4565b85513d89823e3d90fd5b6104f49192959650611509565b610502578593928c38610313565b8b80fd5b8c513d84823e3d90fd5b5080fd5b8b5190610d66808301918211838310176105bc57918f928192610545916119e9843933815230602082015260400190565b0391f58c81156105b1573380825260098952908c902080546001600160a01b031916928e1692831790558b519081526001600160a01b0390911660208201527f8c6e353968e7ffd60dba22ff7d2a4354af301f9d41858a35668e7292ec1301b690604090a138806102a6565b8b51903d90823e3d90fd5b50634e487b7160e01b8f5260418c5260248ffd5b9a509650858a813d81116105fb575b6105e9818361154f565b810103126104d1578a9951963861026b565b503d6105df565b8b513d8f823e3d90fd5b8680fd5b8480fd5b505034610510578060031936011261051057602091610631611498565b8261063a6114ae565b6001600160a01b03928316845260028652922091166000908152908352819020549051908152f35b50913461068957602036600319011261068957506106826020923561183d565b9051908152f35b80fd5b5050346105105781600319360112610510576020906008549051908152f35b5050346105105780600319360112610510576020906106d56106cb611498565b602435903361173a565b5160018152f35b5082903461051057602092836003193601126101ce5781359182156109ce578151636eb1769f60e11b815233828201908152306020820152819060400103908681732791bca1f2de4661ed88a30c99a7a9449aa841749381855afa9081156109c457908591879161098f575b501061094d57825195808701966323b872dd60e01b885286602498338a8401523060448401528760648401526064835260a083019267ffffffffffffffff938181108582111761093b57885251829182875af13d1561092e573d91821161091c57906107d1918651916107c485601f19601f840116018461154f565b82523d898584013e611965565b8051918215159283610903575b5050506108f0575064e8d4a51000808402938404036108de576008546127109081038181116108cc57859695916108186108209287611589565b0480956115b2565b61082a8130611903565b8351308152602081018290527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688596908790604090a16007546001600160a01b031693843b1561048757838651958694859363037312d160e21b85528401525af180156108c2576108ab575b50906108a5916104508233611903565b0390a180f35b936108ba6108a5939295611509565b939091610895565b82513d87823e3d90fd5b634e487b7160e01b8652601183528686fd5b634e487b7160e01b8452601190528383fd5b85925191635274afe760e01b8352820152fd5b6109139350820181019101611571565b158780806107de565b634e487b7160e01b8852604185528888fd5b6107d19150606090611965565b634e487b7160e01b8452604188528b84fd5b5084606492519162461bcd60e51b8352820152601960248201527f436865636b2074686520746f6b656e20616c6c6f77616e6365000000000000006044820152fd5b809250888092503d83116109bd575b6109a8818361154f565b810103126109b95784905188610748565b8580fd5b503d61099e565b84513d88823e3d90fd5b8480606493519262461bcd60e51b845283015260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152fd5b5090346101ce57826003193601126101ce5780519183600554906001908260011c92600181168015610b08575b6020958686108214610af55750848852908115610ad35750600114610a7a575b610a768686610a6c828b038361154f565b519182918261146c565b0390f35b929550600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b828410610ac05750505082610a7694610a6c928201019438610a5b565b8054868501880152928601928101610aa3565b60ff191687860152505050151560051b8301019250610a6c82610a7638610a5b565b634e487b7160e01b845260229052602483fd5b93607f1693610a3b565b505034610510578160031936011261051057905490516001600160a01b039091168152602090f35b50503461051057816003193601126105105760209051732791bca1f2de4661ed88a30c99a7a9449aa841748152f35b5090346101ce576020908160031936011261048757610b86611498565b90610b8f61170e565b6001600160a01b03918216918215610ca1576007541680610c4f575b50805163095ea7b360e01b81529384018290526000196024850152828460448188305af1938415610c45577fe98621a0e42205fc1b1f446bce8f4d59f2cc1bd957c2ceda956ddad6e228b1e894610c18575b50600780546001600160a01b0319168317905551908152a180f35b610c3790843d8611610c3e575b610c2f818361154f565b810190611571565b5038610bfd565b503d610c25565b81513d87823e3d90fd5b81519063095ea7b360e01b825285820152856024820152838160448189305af18015610c975715610bab57610c9090843d8611610c3e57610c2f818361154f565b5038610bab565b82513d88823e3d90fd5b815162461bcd60e51b81528086018590526024808201527f5374616b696e6720706f6f6c20616464726573732063616e6e6f74206265207a60448201526332b9379760e11b6064820152608490fd5b505034610510576020366003190112610510576020916001600160a01b0390829082610d1a611498565b168152600985522054169051908152f35b8334610689578060031936011261068957610d4461170e565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346105105760203660031901126105105760209181906001600160a01b03610dad611498565b1681526001845220549051908152f35b5091346106895760203660031901126106895750610682602092356115bf565b50919034610510576020806003193601126101ce57833591610dfd61181a565b8215610f2657610e3f8264e8d4a51000610e168661183d565b845163a9059cbb60e01b8152338a82019081529290910460208301529283918291604090910190565b038188732791bca1f2de4661ed88a30c99a7a9449aa841745af180156108c257610f09575b503315610ef357338452600182528084205494838610610ec85750907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef918385963387526001845203818620558360035403600355519283523392a3600160065580f35b905163391434e360e21b81523391810191825260208201869052604082018490529081906060010390fd5b51634b637e8f60e11b8152808501849052602490fd5b610f1f90833d8511610c3e57610c2f818361154f565b5038610e64565b5162461bcd60e51b815280850191909152601060248201526f125b9cdd59999a58da595b9d0810905360821b6044820152606490fd5b505034610510578160031936011261051057602090516101f48152f35b5050346105105781600319360112610510576020905160128152f35b5090346101ce576020928360031936011261068957610fb2611498565b8251606082901b6bffffffffffffffffffffffff1916868201908152601482526001600160a01b039492939291610fe881611533565b51902092848116156110dd5761107061107c88610d669385519061100e8387018361154f565b858252828201956119e9873986516001600160a01b039091168382019081523060208201529061104a816040840103601f19810183528261154f565b8751958693611061868601998a9251928391611449565b84019151809386840190611449565b0103808452018261154f565b519020918151928784019460ff60f81b86523060601b60218601526035850152605584015260558352608083019583871067ffffffffffffffff8811176110ca575050849052519020168152f35b634e487b7160e01b825260419052602490fd5b815162461bcd60e51b8152808701889052601d60248201527f4f776e657220616464726573732063616e6e6f74206265207a65726f2e0000006044820152606490fd5b5082346106895760603660031901126106895761113b611498565b6111436114ae565b916044359360018060a01b03831680835260026020528683203384526020528683205491600019830361117f575b6020886106d589898961173a565b8683106111e75781156111d05733156111b9575082526002602090815286832033845281529186902090859003905582906106d587611171565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b8751637dc7a0d960e11b8152339181019182526020820193909352604081018790528291506060010390fd5b5050346105105781600319360112610510576020906003549051908152f35b50503461051057816003193601126105105760075490516001600160a01b039091168152602090f35b50346101ce57816003193601126101ce57611274611498565b6024359033156112ed576001600160a01b03169182156112d657508083602095338152600287528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b5091903461051057816003193601126105105780519180938054916001908360011c92600185169485156113f2575b60209586861081146113df578589529081156113bb5750600114611363575b610a768787610a6c828c038361154f565b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106113a85750505082610a7694610a6c92820101943880611352565b805486850188015292860192810161138a565b60ff19168887015250505050151560051b8301019250610a6c82610a763880611352565b634e487b7160e01b845260228352602484fd5b93607f1693611333565b50346101ce5760203660031901126101ce577fbea1b31142ae4b1f4efad240349036d718b7950d246c127768097ccf602fc7e091602091359061143d61170e565b8160085551908152a180f35b60005b83811061145c5750506000910152565b818101518382015260200161144c565b6040916020825261148c8151809281602086015260208686019101611449565b601f01601f1916010190565b600435906001600160a01b03821682036104d157565b602435906001600160a01b03821682036104d157565b35906001600160a01b03821682036104d157565b9181601f840112156104d15782359167ffffffffffffffff83116104d1576020808501948460051b0101116104d157565b67ffffffffffffffff811161151d57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761151d57604052565b90601f8019910116810190811067ffffffffffffffff82111761151d57604052565b908160209103126104d1575180151581036104d15790565b8181029291811591840414171561159c57565b634e487b7160e01b600052601160045260246000fd5b9190820391821161159c57565b600854908160011b918083046002149015171561159c5761271091820382811161159c576115ec91611589565b0490565b8183526020600583901b84018101939192906000818401855b84831061161a575050505050505090565b90919293949596601f1990818882030184528835605e19843603018112156104d157606092908401906001600160a01b03611654836114c4565b168352878201358884015260409182810135601e19823603018112156104d157019288843594019167ffffffffffffffff85116104d15784360383136104d157601f858b968860019989988701528501528060809586860137600085828601015201160101990193019301919594939290611609565b91908082526020809201929160005b8281106116e7575050505090565b909192938280600192838060a01b036116ff896114c4565b168152019501939291016116d9565b6000546001600160a01b0316330361172257565b60405163118cdaa760e01b8152336004820152602490fd5b916001600160a01b0380841692831561180157169283156117e85760009083825260016020526040822054908382106117b6575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95876020965260018652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b60026006541461182b576002600655565b604051633ee5aeb560e01b8152600490fd5b6003546040516370a0823160e01b815230600482015291602083602481732791bca1f2de4661ed88a30c99a7a9449aa841745afa9283156118f7576000936118c3575b5064e8d4a51000928381029080820485149015171561159c576118a291611589565b81156118ad57040490565b634e487b7160e01b600052601260045260246000fd5b90926020823d6020116118ef575b816118de6020938361154f565b810103126106895750519138611880565b3d91506118d1565b6040513d6000823e3d90fd5b6001600160a01b03169081156117e8576003549080820180921161159c5760207fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef916000936003558484526001825260408420818154019055604051908152a3565b90919061198e575080511561197c57805190602001fd5b604051630a12f52160e11b8152600490fd5b90805115806119cb575b61199f5790565b604051639996b31560e01b8152732791bca1f2de4661ed88a30c99a7a9449aa841746004820152602490fd5b50732791bca1f2de4661ed88a30c99a7a9449aa841743b1561199856fe60a03461010b57601f610d6638819003918201601f19168301916001600160401b0383118484101761011057808492604094855283398101031261010b57610052602061004b83610126565b9201610126565b73e592427a0aece92de3edee1f18e0157c058615646080526001600160a01b039081169190338390036100c65760018060a01b031991168160005416176000556001541617600155604051610c2b908161013b823960805181818160e10152818161074d0152818161096d0152610b1c0152f35b60405162461bcd60e51b815260206004820152601b60248201527f4f6e6c7920526f757465722063616e20696e7374616e746961746500000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361010b5756fe6080604081815260048036101561001557600080fd5b600092833560e01c908163735de9f714610739575080638da5cb5b1461070d5763eedc3c501461004457600080fd5b3461070957816003193601126107095767ffffffffffffffff9080358281116106bf57610074903690830161077c565b602494919490813585811161070557610090903690860161077c565b909560018060a01b0392600198848a541633036106c3578a5b82811061060b5750505050818754169084518092630c2fe7ff60e11b8252818860209586935afa908115610601578a916105d0575b507f000000000000000000000000000000000000000000000000000000000000000084168a5b858a858084106102bf57505050505050885b818110610121578980f35b8361013561013083858c610876565b6107ea565b168a87516370a0823160e01b8152308a82015285818981865afa9081156102b557829189918e96959491610280575b50600a81116101cf575b505050504761017e575b01610116565b9050838a541647908147106101ba578b80809381935af161019d610836565b50156101aa578890610178565b8551630a12f52160e11b81528790fd5b875163cd78605960e01b815230818b01528790fd5b82548b5163a9059cbb60e01b8a8201908152918b166001600160a01b03169381019384526020840192909252949550929361023293839261021d90829060400103601f1981018352826107fe565b519082865af161022b610836565b9083610b92565b805190858215159283610267575b5050506102525790818b878c9461016e565b878691885191635274afe760e01b8352820152fd5b6102779350820181019101610886565b15388581610240565b955050508584813d83116102ae575b61029981836107fe565b810103126102ab57878c945138610164565b80fd5b503d61028f565b89513d84823e3d90fd5b83610130916102cd93610876565b168c89516370a0823160e01b8152308c82015287818b81865afa9182156105c55791610594575b508c811561058b575061271090858203828111610578578082029182040361056657918d8f928d940490898d8c841580159081610549575b6104bc5750505163095ea7b360e01b8082526001600160a01b038a1697820197885260208801859052969092508b915082908190604001038187875af180156104b257938a938f938f908f98948b98610495575b5061038b818461089e565b156103f8575b50604494959697839151988997889687528601528401525af180156103ee57908c92916103c1575b505b01610104565b6103e090873d89116103e7575b6103d881836107fe565b810190610886565b50386103b9565b503d6103ce565b89513d8f823e3d90fd5b61040281846109d8565b610391579491959397509195506104438d8754169251948593849363a9059cbb60e01b8552840160209093929193604081019460018060a01b031681520152565b038186865af1801561048b5793838e938b958f8f906044968c9a61046e575b50915097969594610391565b610484908a3d8c116103e7576103d881836107fe565b5038610462565b8c513d85823e3d90fd5b6104ab90883d8a116103e7576103d881836107fe565b5038610380565b8d513d86823e3d90fd5b98979193989692969594956104d8575b505050505050506103bb565b9754925163a9059cbb60e01b8152929097166001600160a01b03169682019687526020870193909352939484928391829060400103925af180156103ee57908c929161052c575b8087918f8c908e8c6104cc565b61054290873d89116103e7576103d881836107fe565b503861051f565b50732791bca1f2de4661ed88a30c99a7a9449aa84174871461032c565b634e487b7160e01b8f5260118c52898ffd5b50634e487b7160e01b8f5260118c52898ffd5b929150506103bb565b90508681813d83116105be575b6105ab81836107fe565b810103126105ba5751386102f4565b8d80fd5b503d6105a1565b8b51903d90823e3d90fd5b90508281813d83116105fa575b6105e781836107fe565b810103126105f65751386100de565b8980fd5b503d6105dd565b86513d8c823e3d90fd5b6106196101308285856107b2565b8c602091826106298588886107b2565b0135906106378588886107b2565b8c81013590601e19813603018212156106bf57018035908982116106bf5785019281360384136106bf578493828f519384928337810185815203925af161067c610836565b501561068a57508a016100a9565b896011896064938c519362461bcd60e51b85528401528201527010985d18da0818d85b1b0819985a5b1959607a1b6044820152fd5b8480fd5b865162461bcd60e51b81526020818a0152601b818801527f43616c6c61626c65206f6e6c792062792074686520726f7574657200000000006044820152606490fd5b8780fd5b8280fd5b505034610735578160031936011261073557905490516001600160a01b039091168152602090f35b5080fd5b8490346107355781600319360112610735577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9181601f840112156107ad5782359167ffffffffffffffff83116107ad576020808501948460051b0101116107ad57565b600080fd5b91908110156107d45760051b81013590605e19813603018212156107ad570190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036107ad5790565b90601f8019910116810190811067ffffffffffffffff82111761082057604052565b634e487b7160e01b600052604160045260246000fd5b3d15610871573d9067ffffffffffffffff82116108205760405191610865601f8201601f1916602001846107fe565b82523d6000602084013e565b606090565b91908110156107d45760051b0190565b908160209103126107ad575180151581036107ad5790565b6040516001600160a01b039161010082019067ffffffffffffffff8211838310176108205783916040521681526020810190732791bca1f2de4661ed88a30c99a7a9449aa84174825282806040830193610bb885526060840196308852608085019042825260a0860190815260c08601918460009a8b998a86528260e08b01978c89526040519d8e9c8d63414bf38960e01b9052511660048d0152511660248b01525162ffffff1660448a0152511660648801525160848701525160a48601525160c4850152511660e48301527f000000000000000000000000000000000000000000000000000000000000000016815a9361010492602095f190816109ad575b506109a75790565b50600190565b602090813d83116109d1575b6109c381836107fe565b81010312610735573861099f565b503d6109b9565b60405160609190911b6bffffffffffffffffffffffff191660208083019190915261017760eb1b6034830181905272d500b1d8e8ef31e21c99d1db9a6444d3adf12760641b6037840152604b8301527309e46f287cb791987b6228c32669ea5126aa105d60621b604e83015260428252909160808301919067ffffffffffffffff9081841185851017610820576001600160a01b0391610120860190811185821017610820579183926040969592965284825260a085019530875261010060c087019642885260e081019283520196600097889283825260405198899663c04b8d5960e01b8852886004890152519360a060248901528451948560c48a0152865b868110610b7757505092879594919286938860e49688888789010152511660448601525160648501525160848401525160a4830152601f801991011681010301927f0000000000000000000000000000000000000000000000000000000000000000165af19182610b4e575b50506109a75790565b813d8311610b70575b610b6181836107fe565b81010312610735573880610b45565b503d610b57565b8082018b01518d820160e401528b9a8d9a508e985001610ad9565b90610bb95750805115610ba757805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610bec575b610bca575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15610bc256fea2646970667358221220c4198f605f0aad8396b624d4c11d65ca53dee12708c4cd57084f0a898fad845e64736f6c63430008190033a26469706673582212201a70fb325e3fe8075436cc11e7376e2f15138f77615f3bc3ed295cfa838cf1eb64736f6c63430008190033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c806306497cb9146113fc57806306fdde0314611304578063095ea7b31461125b5780630c56ae3b1461123257806318160ddd14611213578063185fcffe1461068c57806323b872dd1461112057806327d54a9214610f95578063313ce56714610f7957806334decfc914610f5c57806342966c6814610ddd5780635bca5a5514610dbd57806370a0823114610d85578063715018a614610d2b5780637811a78514610cf05780638615ee5314610b6957806389a3027114610b3a5780638da5cb5b14610b1257806395d89b4114610a0e578063a0712d68146106dc578063a9059cbb146106ab578063b9f5e6171461068c578063cfb5a5f814610662578063dd62ed3e14610614578063eedc3c50146101d25763f2fde38b1461013f57600080fd5b346101ce5760203660031901126101ce57610158611498565b9061016161170e565b6001600160a01b039182169283156101b8575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b50346101ce57816003193601126101ce5767ffffffffffffffff9080358281116106105761020390369083016114d8565b92906024359382851161060c5761021e8695369086016114d8565b909161022861181a565b8651936370a0823160e01b918286523088870152602094732791bca1f2de4661ed88a30c99a7a9449aa841749786886024818c5afa978815610602578d986105d0575b508a51878101903360601b82526014815261028581611533565b519020338e52600988529b8d20546001600160a01b039c91908d1615610514575b5050338c52600986528b8b8b82205416803b15610510578b51630eedc3c560e41b8152808c018d905290829082908183816102fc8d6102e9604484018d8f6115f0565b838103600319016024850152908b6116ca565b03925af180156105065790889695949392916104e7575b5050610365907f959525f9273812bc5ed0bd375df7492e36027567ab13116ec62673c8d46870c89495966103588d5195869533875260608b88015260608701916115f0565b848103858f0152916116ca565b0390a16024875180968193825230898301525afa9081156104dd5787916104a8575b5061039292506115b2565b9064e8d4a5100091828102928184041490151715610495578490826103bb575b50600160065580f35b6103ce6103c7846115bf565b80946115b2565b906103d98230611903565b8451308152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688596908790604090a16007541691823b156104875760248492838851958694859363037312d160e21b85528401525af1801561048b57610473575b5050610466916104508233611903565b5133815260208101919091529081906040820190565b0390a138808083816103b2565b61047c90611509565b610487578338610440565b8380fd5b84513d84823e3d90fd5b634e487b7160e01b855260119052602484fd5b905082813d83116104d6575b6104be818361154f565b810103126104d157610392915138610387565b600080fd5b503d6104b4565b85513d89823e3d90fd5b6104f49192959650611509565b610502578593928c38610313565b8b80fd5b8c513d84823e3d90fd5b5080fd5b8b5190610d66808301918211838310176105bc57918f928192610545916119e9843933815230602082015260400190565b0391f58c81156105b1573380825260098952908c902080546001600160a01b031916928e1692831790558b519081526001600160a01b0390911660208201527f8c6e353968e7ffd60dba22ff7d2a4354af301f9d41858a35668e7292ec1301b690604090a138806102a6565b8b51903d90823e3d90fd5b50634e487b7160e01b8f5260418c5260248ffd5b9a509650858a813d81116105fb575b6105e9818361154f565b810103126104d1578a9951963861026b565b503d6105df565b8b513d8f823e3d90fd5b8680fd5b8480fd5b505034610510578060031936011261051057602091610631611498565b8261063a6114ae565b6001600160a01b03928316845260028652922091166000908152908352819020549051908152f35b50913461068957602036600319011261068957506106826020923561183d565b9051908152f35b80fd5b5050346105105781600319360112610510576020906008549051908152f35b5050346105105780600319360112610510576020906106d56106cb611498565b602435903361173a565b5160018152f35b5082903461051057602092836003193601126101ce5781359182156109ce578151636eb1769f60e11b815233828201908152306020820152819060400103908681732791bca1f2de4661ed88a30c99a7a9449aa841749381855afa9081156109c457908591879161098f575b501061094d57825195808701966323b872dd60e01b885286602498338a8401523060448401528760648401526064835260a083019267ffffffffffffffff938181108582111761093b57885251829182875af13d1561092e573d91821161091c57906107d1918651916107c485601f19601f840116018461154f565b82523d898584013e611965565b8051918215159283610903575b5050506108f0575064e8d4a51000808402938404036108de576008546127109081038181116108cc57859695916108186108209287611589565b0480956115b2565b61082a8130611903565b8351308152602081018290527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688596908790604090a16007546001600160a01b031693843b1561048757838651958694859363037312d160e21b85528401525af180156108c2576108ab575b50906108a5916104508233611903565b0390a180f35b936108ba6108a5939295611509565b939091610895565b82513d87823e3d90fd5b634e487b7160e01b8652601183528686fd5b634e487b7160e01b8452601190528383fd5b85925191635274afe760e01b8352820152fd5b6109139350820181019101611571565b158780806107de565b634e487b7160e01b8852604185528888fd5b6107d19150606090611965565b634e487b7160e01b8452604188528b84fd5b5084606492519162461bcd60e51b8352820152601960248201527f436865636b2074686520746f6b656e20616c6c6f77616e6365000000000000006044820152fd5b809250888092503d83116109bd575b6109a8818361154f565b810103126109b95784905188610748565b8580fd5b503d61099e565b84513d88823e3d90fd5b8480606493519262461bcd60e51b845283015260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152fd5b5090346101ce57826003193601126101ce5780519183600554906001908260011c92600181168015610b08575b6020958686108214610af55750848852908115610ad35750600114610a7a575b610a768686610a6c828b038361154f565b519182918261146c565b0390f35b929550600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b828410610ac05750505082610a7694610a6c928201019438610a5b565b8054868501880152928601928101610aa3565b60ff191687860152505050151560051b8301019250610a6c82610a7638610a5b565b634e487b7160e01b845260229052602483fd5b93607f1693610a3b565b505034610510578160031936011261051057905490516001600160a01b039091168152602090f35b50503461051057816003193601126105105760209051732791bca1f2de4661ed88a30c99a7a9449aa841748152f35b5090346101ce576020908160031936011261048757610b86611498565b90610b8f61170e565b6001600160a01b03918216918215610ca1576007541680610c4f575b50805163095ea7b360e01b81529384018290526000196024850152828460448188305af1938415610c45577fe98621a0e42205fc1b1f446bce8f4d59f2cc1bd957c2ceda956ddad6e228b1e894610c18575b50600780546001600160a01b0319168317905551908152a180f35b610c3790843d8611610c3e575b610c2f818361154f565b810190611571565b5038610bfd565b503d610c25565b81513d87823e3d90fd5b81519063095ea7b360e01b825285820152856024820152838160448189305af18015610c975715610bab57610c9090843d8611610c3e57610c2f818361154f565b5038610bab565b82513d88823e3d90fd5b815162461bcd60e51b81528086018590526024808201527f5374616b696e6720706f6f6c20616464726573732063616e6e6f74206265207a60448201526332b9379760e11b6064820152608490fd5b505034610510576020366003190112610510576020916001600160a01b0390829082610d1a611498565b168152600985522054169051908152f35b8334610689578060031936011261068957610d4461170e565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346105105760203660031901126105105760209181906001600160a01b03610dad611498565b1681526001845220549051908152f35b5091346106895760203660031901126106895750610682602092356115bf565b50919034610510576020806003193601126101ce57833591610dfd61181a565b8215610f2657610e3f8264e8d4a51000610e168661183d565b845163a9059cbb60e01b8152338a82019081529290910460208301529283918291604090910190565b038188732791bca1f2de4661ed88a30c99a7a9449aa841745af180156108c257610f09575b503315610ef357338452600182528084205494838610610ec85750907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef918385963387526001845203818620558360035403600355519283523392a3600160065580f35b905163391434e360e21b81523391810191825260208201869052604082018490529081906060010390fd5b51634b637e8f60e11b8152808501849052602490fd5b610f1f90833d8511610c3e57610c2f818361154f565b5038610e64565b5162461bcd60e51b815280850191909152601060248201526f125b9cdd59999a58da595b9d0810905360821b6044820152606490fd5b505034610510578160031936011261051057602090516101f48152f35b5050346105105781600319360112610510576020905160128152f35b5090346101ce576020928360031936011261068957610fb2611498565b8251606082901b6bffffffffffffffffffffffff1916868201908152601482526001600160a01b039492939291610fe881611533565b51902092848116156110dd5761107061107c88610d669385519061100e8387018361154f565b858252828201956119e9873986516001600160a01b039091168382019081523060208201529061104a816040840103601f19810183528261154f565b8751958693611061868601998a9251928391611449565b84019151809386840190611449565b0103808452018261154f565b519020918151928784019460ff60f81b86523060601b60218601526035850152605584015260558352608083019583871067ffffffffffffffff8811176110ca575050849052519020168152f35b634e487b7160e01b825260419052602490fd5b815162461bcd60e51b8152808701889052601d60248201527f4f776e657220616464726573732063616e6e6f74206265207a65726f2e0000006044820152606490fd5b5082346106895760603660031901126106895761113b611498565b6111436114ae565b916044359360018060a01b03831680835260026020528683203384526020528683205491600019830361117f575b6020886106d589898961173a565b8683106111e75781156111d05733156111b9575082526002602090815286832033845281529186902090859003905582906106d587611171565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b8751637dc7a0d960e11b8152339181019182526020820193909352604081018790528291506060010390fd5b5050346105105781600319360112610510576020906003549051908152f35b50503461051057816003193601126105105760075490516001600160a01b039091168152602090f35b50346101ce57816003193601126101ce57611274611498565b6024359033156112ed576001600160a01b03169182156112d657508083602095338152600287528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b5091903461051057816003193601126105105780519180938054916001908360011c92600185169485156113f2575b60209586861081146113df578589529081156113bb5750600114611363575b610a768787610a6c828c038361154f565b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106113a85750505082610a7694610a6c92820101943880611352565b805486850188015292860192810161138a565b60ff19168887015250505050151560051b8301019250610a6c82610a763880611352565b634e487b7160e01b845260228352602484fd5b93607f1693611333565b50346101ce5760203660031901126101ce577fbea1b31142ae4b1f4efad240349036d718b7950d246c127768097ccf602fc7e091602091359061143d61170e565b8160085551908152a180f35b60005b83811061145c5750506000910152565b818101518382015260200161144c565b6040916020825261148c8151809281602086015260208686019101611449565b601f01601f1916010190565b600435906001600160a01b03821682036104d157565b602435906001600160a01b03821682036104d157565b35906001600160a01b03821682036104d157565b9181601f840112156104d15782359167ffffffffffffffff83116104d1576020808501948460051b0101116104d157565b67ffffffffffffffff811161151d57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761151d57604052565b90601f8019910116810190811067ffffffffffffffff82111761151d57604052565b908160209103126104d1575180151581036104d15790565b8181029291811591840414171561159c57565b634e487b7160e01b600052601160045260246000fd5b9190820391821161159c57565b600854908160011b918083046002149015171561159c5761271091820382811161159c576115ec91611589565b0490565b8183526020600583901b84018101939192906000818401855b84831061161a575050505050505090565b90919293949596601f1990818882030184528835605e19843603018112156104d157606092908401906001600160a01b03611654836114c4565b168352878201358884015260409182810135601e19823603018112156104d157019288843594019167ffffffffffffffff85116104d15784360383136104d157601f858b968860019989988701528501528060809586860137600085828601015201160101990193019301919594939290611609565b91908082526020809201929160005b8281106116e7575050505090565b909192938280600192838060a01b036116ff896114c4565b168152019501939291016116d9565b6000546001600160a01b0316330361172257565b60405163118cdaa760e01b8152336004820152602490fd5b916001600160a01b0380841692831561180157169283156117e85760009083825260016020526040822054908382106117b6575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95876020965260018652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b60026006541461182b576002600655565b604051633ee5aeb560e01b8152600490fd5b6003546040516370a0823160e01b815230600482015291602083602481732791bca1f2de4661ed88a30c99a7a9449aa841745afa9283156118f7576000936118c3575b5064e8d4a51000928381029080820485149015171561159c576118a291611589565b81156118ad57040490565b634e487b7160e01b600052601260045260246000fd5b90926020823d6020116118ef575b816118de6020938361154f565b810103126106895750519138611880565b3d91506118d1565b6040513d6000823e3d90fd5b6001600160a01b03169081156117e8576003549080820180921161159c5760207fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef916000936003558484526001825260408420818154019055604051908152a3565b90919061198e575080511561197c57805190602001fd5b604051630a12f52160e11b8152600490fd5b90805115806119cb575b61199f5790565b604051639996b31560e01b8152732791bca1f2de4661ed88a30c99a7a9449aa841746004820152602490fd5b50732791bca1f2de4661ed88a30c99a7a9449aa841743b1561199856fe60a03461010b57601f610d6638819003918201601f19168301916001600160401b0383118484101761011057808492604094855283398101031261010b57610052602061004b83610126565b9201610126565b73e592427a0aece92de3edee1f18e0157c058615646080526001600160a01b039081169190338390036100c65760018060a01b031991168160005416176000556001541617600155604051610c2b908161013b823960805181818160e10152818161074d0152818161096d0152610b1c0152f35b60405162461bcd60e51b815260206004820152601b60248201527f4f6e6c7920526f757465722063616e20696e7374616e746961746500000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361010b5756fe6080604081815260048036101561001557600080fd5b600092833560e01c908163735de9f714610739575080638da5cb5b1461070d5763eedc3c501461004457600080fd5b3461070957816003193601126107095767ffffffffffffffff9080358281116106bf57610074903690830161077c565b602494919490813585811161070557610090903690860161077c565b909560018060a01b0392600198848a541633036106c3578a5b82811061060b5750505050818754169084518092630c2fe7ff60e11b8252818860209586935afa908115610601578a916105d0575b507f000000000000000000000000000000000000000000000000000000000000000084168a5b858a858084106102bf57505050505050885b818110610121578980f35b8361013561013083858c610876565b6107ea565b168a87516370a0823160e01b8152308a82015285818981865afa9081156102b557829189918e96959491610280575b50600a81116101cf575b505050504761017e575b01610116565b9050838a541647908147106101ba578b80809381935af161019d610836565b50156101aa578890610178565b8551630a12f52160e11b81528790fd5b875163cd78605960e01b815230818b01528790fd5b82548b5163a9059cbb60e01b8a8201908152918b166001600160a01b03169381019384526020840192909252949550929361023293839261021d90829060400103601f1981018352826107fe565b519082865af161022b610836565b9083610b92565b805190858215159283610267575b5050506102525790818b878c9461016e565b878691885191635274afe760e01b8352820152fd5b6102779350820181019101610886565b15388581610240565b955050508584813d83116102ae575b61029981836107fe565b810103126102ab57878c945138610164565b80fd5b503d61028f565b89513d84823e3d90fd5b83610130916102cd93610876565b168c89516370a0823160e01b8152308c82015287818b81865afa9182156105c55791610594575b508c811561058b575061271090858203828111610578578082029182040361056657918d8f928d940490898d8c841580159081610549575b6104bc5750505163095ea7b360e01b8082526001600160a01b038a1697820197885260208801859052969092508b915082908190604001038187875af180156104b257938a938f938f908f98948b98610495575b5061038b818461089e565b156103f8575b50604494959697839151988997889687528601528401525af180156103ee57908c92916103c1575b505b01610104565b6103e090873d89116103e7575b6103d881836107fe565b810190610886565b50386103b9565b503d6103ce565b89513d8f823e3d90fd5b61040281846109d8565b610391579491959397509195506104438d8754169251948593849363a9059cbb60e01b8552840160209093929193604081019460018060a01b031681520152565b038186865af1801561048b5793838e938b958f8f906044968c9a61046e575b50915097969594610391565b610484908a3d8c116103e7576103d881836107fe565b5038610462565b8c513d85823e3d90fd5b6104ab90883d8a116103e7576103d881836107fe565b5038610380565b8d513d86823e3d90fd5b98979193989692969594956104d8575b505050505050506103bb565b9754925163a9059cbb60e01b8152929097166001600160a01b03169682019687526020870193909352939484928391829060400103925af180156103ee57908c929161052c575b8087918f8c908e8c6104cc565b61054290873d89116103e7576103d881836107fe565b503861051f565b50732791bca1f2de4661ed88a30c99a7a9449aa84174871461032c565b634e487b7160e01b8f5260118c52898ffd5b50634e487b7160e01b8f5260118c52898ffd5b929150506103bb565b90508681813d83116105be575b6105ab81836107fe565b810103126105ba5751386102f4565b8d80fd5b503d6105a1565b8b51903d90823e3d90fd5b90508281813d83116105fa575b6105e781836107fe565b810103126105f65751386100de565b8980fd5b503d6105dd565b86513d8c823e3d90fd5b6106196101308285856107b2565b8c602091826106298588886107b2565b0135906106378588886107b2565b8c81013590601e19813603018212156106bf57018035908982116106bf5785019281360384136106bf578493828f519384928337810185815203925af161067c610836565b501561068a57508a016100a9565b896011896064938c519362461bcd60e51b85528401528201527010985d18da0818d85b1b0819985a5b1959607a1b6044820152fd5b8480fd5b865162461bcd60e51b81526020818a0152601b818801527f43616c6c61626c65206f6e6c792062792074686520726f7574657200000000006044820152606490fd5b8780fd5b8280fd5b505034610735578160031936011261073557905490516001600160a01b039091168152602090f35b5080fd5b8490346107355781600319360112610735577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9181601f840112156107ad5782359167ffffffffffffffff83116107ad576020808501948460051b0101116107ad57565b600080fd5b91908110156107d45760051b81013590605e19813603018212156107ad570190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036107ad5790565b90601f8019910116810190811067ffffffffffffffff82111761082057604052565b634e487b7160e01b600052604160045260246000fd5b3d15610871573d9067ffffffffffffffff82116108205760405191610865601f8201601f1916602001846107fe565b82523d6000602084013e565b606090565b91908110156107d45760051b0190565b908160209103126107ad575180151581036107ad5790565b6040516001600160a01b039161010082019067ffffffffffffffff8211838310176108205783916040521681526020810190732791bca1f2de4661ed88a30c99a7a9449aa84174825282806040830193610bb885526060840196308852608085019042825260a0860190815260c08601918460009a8b998a86528260e08b01978c89526040519d8e9c8d63414bf38960e01b9052511660048d0152511660248b01525162ffffff1660448a0152511660648801525160848701525160a48601525160c4850152511660e48301527f000000000000000000000000000000000000000000000000000000000000000016815a9361010492602095f190816109ad575b506109a75790565b50600190565b602090813d83116109d1575b6109c381836107fe565b81010312610735573861099f565b503d6109b9565b60405160609190911b6bffffffffffffffffffffffff191660208083019190915261017760eb1b6034830181905272d500b1d8e8ef31e21c99d1db9a6444d3adf12760641b6037840152604b8301527309e46f287cb791987b6228c32669ea5126aa105d60621b604e83015260428252909160808301919067ffffffffffffffff9081841185851017610820576001600160a01b0391610120860190811185821017610820579183926040969592965284825260a085019530875261010060c087019642885260e081019283520196600097889283825260405198899663c04b8d5960e01b8852886004890152519360a060248901528451948560c48a0152865b868110610b7757505092879594919286938860e49688888789010152511660448601525160648501525160848401525160a4830152601f801991011681010301927f0000000000000000000000000000000000000000000000000000000000000000165af19182610b4e575b50506109a75790565b813d8311610b70575b610b6181836107fe565b81010312610735573880610b45565b503d610b57565b8082018b01518d820160e401528b9a8d9a508e985001610ad9565b90610bb95750805115610ba757805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610bec575b610bca575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15610bc256fea2646970667358221220c4198f605f0aad8396b624d4c11d65ca53dee12708c4cd57084f0a898fad845e64736f6c63430008190033a26469706673582212201a70fb325e3fe8075436cc11e7376e2f15138f77615f3bc3ed295cfa838cf1eb64736f6c63430008190033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/core/Router.sol:Router",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 311,
        "contract": "contracts/core/Router.sol:Router",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 317,
        "contract": "contracts/core/Router.sol:Router",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 319,
        "contract": "contracts/core/Router.sol:Router",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 321,
        "contract": "contracts/core/Router.sol:Router",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 323,
        "contract": "contracts/core/Router.sol:Router",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1527,
        "contract": "contracts/core/Router.sol:Router",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2189,
        "contract": "contracts/core/Router.sol:Router",
        "label": "stakingPool",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2195,
        "contract": "contracts/core/Router.sol:Router",
        "label": "_BPS_FEE",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2206,
        "contract": "contracts/core/Router.sol:Router",
        "label": "userAgents",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_contract(Agent)2163)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Agent)2163": {
        "encoding": "inplace",
        "label": "contract Agent",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(Agent)2163)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract Agent)",
        "numberOfBytes": "32",
        "value": "t_contract(Agent)2163"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}