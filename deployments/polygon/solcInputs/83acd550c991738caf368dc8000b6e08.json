{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/community/Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"../helpers/Oracle.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"../interfaces/IWETH.sol\";\r\nimport \"../interfaces/IVault.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract Pool is ReentrancyGuard {\r\n\tOracle public oracle;\r\n\r\n\tenum Coin {\r\n\t\tMATIC\r\n\t}\r\n\r\n\tstruct Prediction {\r\n\t\taddress predictor;\r\n\t\tCoin token;\r\n\t\tuint256 predictedPrice;\r\n\t\tuint256 actualPrice;\r\n\t\tuint256 resolvedPrice;\r\n\t\tuint256 difference;\r\n\t\tuint256 timestamp;\r\n\t\tuint256 endTime;\r\n\t\tbool resolved;\r\n\t}\r\n\r\n\tPrediction[] public predictions;\r\n\r\n\tIWETH public wnative;\r\n\tIVault public yearnVault;\r\n\r\n\tuint256 public submissionBaseFee = 0.01 ether;\r\n\tuint256 public submissionStepFee = 0.001 ether;\r\n\tuint256 public predictionDuration = 1 days;\r\n\tuint256 public resolutionLimit = 10 minutes;\r\n\tuint256 public exitLimit = 7 days;\r\n\tuint256 public totalPredictions = 0;\r\n\tuint256 public totalDistribution = 0;\r\n\r\n\tmapping(address => uint256) public distributionCounter;\r\n\tmapping(address => uint256) public lastWithdraw;\r\n\tmapping(address => uint256) public userSubmissionFees;\r\n\r\n\tevent PredictionRegistered(\r\n\t\taddress indexed predictor,\r\n\t\tCoin token,\r\n\t\tuint256 predictedPrice,\r\n\t\tuint256 actualPrice,\r\n\t\tuint256 timestamp,\r\n\t\tuint256 endTime\r\n\t);\r\n\tevent RewardWithdrawn(address indexed predictor, uint256 amount);\r\n\r\n\tconstructor(\r\n\t\taddress _oracleAddress,\r\n\t\taddress _wnative,\r\n\t\taddress _yearnVault\r\n\t) ReentrancyGuard() {\r\n\t\toracle = Oracle(_oracleAddress);\r\n\t\twnative = IWETH(_wnative);\r\n\t\tyearnVault = IVault(_yearnVault);\r\n\t}\r\n\r\n\tfunction getSubmissionFee() public view returns (uint256) {\r\n\t\treturn userSubmissionFees[msg.sender];\r\n\t}\r\n\r\n\tfunction submit(Coin _token, uint256 _predictedPrice) public payable {\r\n\t\trequire(msg.value >= submissionBaseFee, \"Invalid fee amount\");\r\n\t\trequire(\r\n\t\t\tmsg.value >= userSubmissionFees[msg.sender],\r\n\t\t\t\"Invalid fee amount\"\r\n\t\t);\r\n\r\n\t\tuserSubmissionFees[msg.sender] = msg.value;\r\n\t\tuserSubmissionFees[msg.sender] += submissionStepFee;\r\n\r\n\t\tuint256 price = oracle.getLatestPrice() * 1e10;\r\n\r\n\t\tpredictions.push(\r\n\t\t\tPrediction(\r\n\t\t\t\tmsg.sender,\r\n\t\t\t\t_token,\r\n\t\t\t\t_predictedPrice,\r\n\t\t\t\tprice,\r\n\t\t\t\t0,\r\n\t\t\t\t0,\r\n\t\t\t\tblock.timestamp,\r\n\t\t\t\tblock.timestamp + predictionDuration,\r\n\t\t\t\tfalse\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\ttotalPredictions++;\r\n\t\twnative.deposit{ value: msg.value }();\r\n\t\tIERC20(address(wnative)).approve(address(yearnVault), msg.value);\r\n\t\tyearnVault.deposit(msg.value, address(this));\r\n\r\n\t\temit PredictionRegistered(\r\n\t\t\tmsg.sender,\r\n\t\t\t_token,\r\n\t\t\t_predictedPrice,\r\n\t\t\tprice,\r\n\t\t\tblock.timestamp,\r\n\t\t\tblock.timestamp + predictionDuration\r\n\t\t);\r\n\t}\r\n\r\n\tfunction exit() public {\r\n\t\trequire(\r\n\t\t\tblock.timestamp - lastWithdraw[msg.sender] >= exitLimit,\r\n\t\t\t\"Wait for exitLimit before next withdraw\"\r\n\t\t);\r\n\r\n\t\tuint256 reward = calculateReward(msg.sender);\r\n\r\n\t\trequire(reward > 0, \"No reward available\");\r\n\r\n\t\tIERC20(address(yearnVault)).approve(address(yearnVault), reward);\r\n\r\n\t\tuint256 ctxBalanceB4 = address(this).balance;\r\n\t\tyearnVault.withdraw(reward, address(this), address(this), 200);\r\n\t\tuint256 ctxBalanceAfter = address(this).balance;\r\n\t\tuint256 rewardToTransfer = ctxBalanceAfter - ctxBalanceB4;\r\n\r\n\t\twnative.withdraw(rewardToTransfer);\r\n\r\n\t\t// Aggiornamento dello stato prima della trasferimento per prevenire reentrancy\r\n\t\ttotalPredictions -= distributionCounter[msg.sender];\r\n\t\tdistributionCounter[msg.sender] = 0;\r\n\t\tlastWithdraw[msg.sender] = block.timestamp;\r\n\r\n\t\tuserSubmissionFees[msg.sender] = submissionBaseFee;\r\n\r\n\t\tAddress.sendValue(payable(msg.sender), rewardToTransfer);\r\n\r\n\t\temit RewardWithdrawn(msg.sender, rewardToTransfer);\r\n\t}\r\n\r\n\tfunction calculateReward(address user) public view returns (uint256) {\r\n\t\trequire(distributionCounter[user] > 0, \"No predictions made\");\r\n\t\trequire(totalDistribution > 0, \"No rewards available\");\r\n\t\tuint256 userShare = (distributionCounter[user] * 1e18) /\r\n\t\t\ttotalDistribution;\r\n\t\tuint256 yeanBalance = IERC20(address(yearnVault)).balanceOf(\r\n\t\t\taddress(this)\r\n\t\t);\r\n\t\tuint256 userBalance = (yeanBalance * userShare) / 1e18;\r\n\t\tuint256 userReward = userBalance - userBalance / 2;\r\n\t\treturn userReward;\r\n\t}\r\n\r\n\tfunction last10Predictions() public view returns (Prediction[] memory) {\r\n\t\tuint256 length = predictions.length;\r\n\t\tuint256 start = length > 10 ? length - 10 : 0;\r\n\t\tPrediction[] memory result = new Prediction[](length - start);\r\n\t\tfor (uint256 i = start; i < length; i++) {\r\n\t\t\tresult[i - start] = predictions[i];\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction getPrediction(\r\n\t\tuint256 index\r\n\t) public view returns (Prediction memory) {\r\n\t\trequire(index < predictions.length, \"Invalid index\");\r\n\t\treturn predictions[index];\r\n\t}\r\n\r\n\tfunction getPredictionFromTo(\r\n\t\tuint256 from,\r\n\t\tuint256 to\r\n\t) public view returns (Prediction[] memory) {\r\n\t\trequire(from < to, \"Invalid range\");\r\n\t\trequire(to <= predictions.length, \"Invalid range\");\r\n\t\tPrediction[] memory result = new Prediction[](to - from);\r\n\t\tfor (uint256 i = from; i < to; i++) {\r\n\t\t\tresult[i - from] = predictions[i];\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction getPredictionCount() public view returns (uint256) {\r\n\t\treturn predictions.length;\r\n\t}\r\n\r\n\tfunction getTotalPredictions() public view returns (uint256) {\r\n\t\treturn totalPredictions;\r\n\t}\r\n\r\n\tfunction hasAnyUnresolvedPastEndTime() public view returns (bool) {\r\n\t\tfor (uint256 i = 0; i < predictions.length; i++) {\r\n\t\t\tif (\r\n\t\t\t\t!predictions[i].resolved &&\r\n\t\t\t\tblock.timestamp > predictions[i].endTime\r\n\t\t\t) {\r\n\t\t\t\treturn true; // Restituisce true alla prima occorrenza di una previsione non risolta superata da endTime\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false; // Se nessuna previsione non risolta ha superato endTime, restituisce false\r\n\t}\r\n\r\n\tfunction resolve() public {\r\n\t\tuint256 latestPrice = oracle.getLatestPrice() * 1e10;\r\n\r\n\t\tfor (uint256 i = 0; i < predictions.length; i++) {\r\n\t\t\tif (\r\n\t\t\t\t!predictions[i].resolved &&\r\n\t\t\t\tblock.timestamp >= predictions[i].endTime\r\n\t\t\t) {\r\n\t\t\t\tuint256 predictedPrice = predictions[i].predictedPrice;\r\n\t\t\t\tuint256 priceDifference = predictedPrice > latestPrice\r\n\t\t\t\t\t? predictedPrice - latestPrice\r\n\t\t\t\t\t: latestPrice - predictedPrice;\r\n\t\t\t\tuint256 score = calculateScore(predictedPrice, latestPrice);\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\tblock.timestamp <= predictions[i].endTime + resolutionLimit\r\n\t\t\t\t) {\r\n\t\t\t\t\tdistributionCounter[predictions[i].predictor] += 0; // Assumi che esista questo campo\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdistributionCounter[predictions[i].predictor] += score; // Assumi che esista questo campo\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpredictions[i].difference = priceDifference;\r\n\t\t\t\tpredictions[i].resolved = true;\r\n\t\t\t\tpredictions[i].resolvedPrice = latestPrice;\r\n\t\t\t\ttotalDistribution += score;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdistributionCounter[msg.sender]++;\r\n\t\ttotalDistribution++;\r\n\t}\r\n\r\n\tfunction calculateScore(\r\n\t\tuint256 predictedPrice,\r\n\t\tuint256 resolvedPrice\r\n\t) private pure returns (uint256) {\r\n\t\tif (resolvedPrice == 0) return 1; // Evita divisione per zero\r\n\t\tuint256 priceDifference = predictedPrice > resolvedPrice\r\n\t\t\t? predictedPrice - resolvedPrice\r\n\t\t\t: resolvedPrice - predictedPrice;\r\n\t\tuint256 differencePercentage = (priceDifference * 100) / resolvedPrice;\r\n\r\n\t\t// Il punteggio diminuisce all'aumentare della differenza percentuale\r\n\t\tif (differencePercentage == 0) {\r\n\t\t\treturn 10; // Puntaeggio massimo per previsione perfetta\r\n\t\t} else if (differencePercentage <= 5) {\r\n\t\t\treturn 9;\r\n\t\t} else if (differencePercentage <= 10) {\r\n\t\t\treturn 8;\r\n\t\t} else if (differencePercentage <= 15) {\r\n\t\t\treturn 7;\r\n\t\t} else if (differencePercentage <= 20) {\r\n\t\t\treturn 6;\r\n\t\t} else if (differencePercentage <= 25) {\r\n\t\t\treturn 5;\r\n\t\t} else if (differencePercentage <= 30) {\r\n\t\t\treturn 4;\r\n\t\t} else if (differencePercentage <= 35) {\r\n\t\t\treturn 3;\r\n\t\t} else if (differencePercentage <= 40) {\r\n\t\t\treturn 2;\r\n\t\t} else {\r\n\t\t\treturn 1; // Punteggio minimo per grande differenza\r\n\t\t}\r\n\t}\r\n\r\n\tfunction hasUnresolvedPredictions() public view returns (bool) {\r\n\t\tfor (uint256 i = 0; i < predictions.length; i++) {\r\n\t\t\tif (!predictions[i].resolved) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Permetti al contratto di ricevere ETH\r\n\treceive() external payable {}\r\n}\r\n"
    },
    "contracts/community/Tournament.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"../helpers/Oracle.sol\";\r\n\r\ncontract Tournament is ReentrancyGuard {\r\n\tOracle public oracle;\r\n\r\n\tuint256 public keeperPercentageFee = 100;\r\n\tuint256 public submissionEndTime = 8 hours;\r\n\tuint256 public verificationEndTime = 1 days;\r\n\tuint256 public resolutionEndTime = 1 hours;\r\n\r\n\tstruct Prediction {\r\n\t\tuint256 round;\r\n\t\taddress predictor;\r\n\t\tuint256 predictedPrice;\r\n\t\tuint256 amount;\r\n\t}\r\n\r\n\tuint256 public maxParticipants;\r\n\r\n\tuint256 public lastRoundPrice;\r\n\r\n\tPrediction[] public predictions;\r\n\r\n\tuint256 public verificationTime;\r\n\taddress public priceFeedAddress;\r\n\tuint256 public prizePool;\r\n\tuint256 public currentRound = 0;\r\n\r\n\tmapping(uint256 => uint256) scores;\r\n\tmapping(uint256 => uint256) prizePerScore;\r\n\r\n\taddress[] public roundWinners;\r\n\r\n\tstruct WinnerInfo {\r\n\t\tuint256 index;\r\n\t\tuint256 difference;\r\n\t\tbool exists;\r\n\t}\r\n\r\n\tevent PredictionSubmitted(\r\n\t\tuint256 round,\r\n\t\taddress indexed predictor,\r\n\t\tuint256 predictedPrice,\r\n\t\tuint256 amount\r\n\t);\r\n\r\n\tevent TournamentResolved(\r\n\t\tuint256 round,\r\n\t\taddress[] winners,\r\n\t\tuint256[] prizeAmounts\r\n\t);\r\n\r\n\tconstructor(\r\n\t\taddress _oracleAddress,\r\n\t\tuint256 _maxParticipants\r\n\t) ReentrancyGuard() {\r\n\t\toracle = Oracle(_oracleAddress);\r\n\t\tmaxParticipants = _maxParticipants;\r\n\t\tverificationTime = block.timestamp + verificationEndTime;\r\n\t}\r\n\r\n\tfunction isRoundOpen() public view returns (bool) {\r\n\t\treturn block.timestamp <= verificationTime - 4 hours;\r\n\t}\r\n\r\n\tfunction submitPrediction(uint256 _predictedPrice) external payable {\r\n\t\trequire(msg.value >= 0.01 ether, \"Entry fee is 0.01 ether\");\r\n\t\trequire(\r\n\t\t\tpredictions.length < maxParticipants,\r\n\t\t\t\"Participant limit reached\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tblock.timestamp <= verificationTime - submissionEndTime,\r\n\t\t\t\"Submissions closed 4 hours before round ends\"\r\n\t\t);\r\n\r\n\t\tpredictions.push(\r\n\t\t\tPrediction(currentRound, msg.sender, _predictedPrice, msg.value)\r\n\t\t);\r\n\t\tprizePool += msg.value;\r\n\t\temit PredictionSubmitted(\r\n\t\t\tcurrentRound,\r\n\t\t\tmsg.sender,\r\n\t\t\t_predictedPrice,\r\n\t\t\tmsg.value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _resetTournament() private {\r\n\t\tdelete predictions;\r\n\t\tprizePool = 0;\r\n\t\tverificationTime = block.timestamp + verificationEndTime;\r\n\t\tcurrentRound += 1;\r\n\t}\r\n\r\n\tfunction resolveTournament() external nonReentrant {\r\n\t\trequire(\r\n\t\t\tblock.timestamp >= verificationTime,\r\n\t\t\t\"Tournament cannot be resolved yet\"\r\n\t\t);\r\n\r\n\t\tif (block.timestamp >= verificationTime + resolutionEndTime) {\r\n\t\t\tfor (uint256 i = 0; i < predictions.length; i++) {\r\n\t\t\t\tAddress.sendValue(\r\n\t\t\t\t\tpayable(predictions[i].predictor),\r\n\t\t\t\t\tpredictions[i].amount\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\temit TournamentResolved(\r\n\t\t\t\tcurrentRound,\r\n\t\t\t\tnew address[](0),\r\n\t\t\t\tnew uint256[](0)\r\n\t\t\t);\r\n\t\t\t_resetTournament();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tuint256 actualPrice = oracle.getLatestPrice();\r\n\t\tuint256 actualPriceUint = actualPrice * 1e10;\r\n\t\tlastRoundPrice = actualPriceUint;\r\n\r\n\t\tif (predictions.length == 0) {\r\n\t\t\temit TournamentResolved(\r\n\t\t\t\tcurrentRound,\r\n\t\t\t\tnew address[](0),\r\n\t\t\t\tnew uint256[](0)\r\n\t\t\t);\r\n\t\t\troundWinners = new address[](0);\r\n\t\t\t_resetTournament();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (predictions.length == 1) {\r\n\t\t\t// Restituisce il premio all'unico partecipante\r\n\t\t\taddress[] memory winnerAddress = new address[](1);\r\n\t\t\tuint256[] memory winnerPrize = new uint256[](1);\r\n\t\t\twinnerAddress[0] = predictions[0].predictor;\r\n\t\t\twinnerPrize[0] = prizePool;\r\n\t\t\tAddress.sendValue(payable(winnerAddress[0]), winnerPrize[0]);\r\n\t\t\temit TournamentResolved(currentRound, winnerAddress, winnerPrize);\r\n\t\t\troundWinners = winnerAddress;\r\n\t\t\t_resetTournament();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (predictions.length == 2) {\r\n\t\t\t// Distribuisci il premio tra i due partecipanti\r\n\t\t\taddress[] memory winnersAddresses = new address[](2);\r\n\t\t\tuint256[] memory prizes = new uint256[](2);\r\n\t\t\tuint256 halfPrize = prizePool / 2;\r\n\t\t\tfor (uint256 i = 0; i < 2; i++) {\r\n\t\t\t\twinnersAddresses[i] = predictions[i].predictor;\r\n\t\t\t\tprizes[i] = halfPrize;\r\n\t\t\t\tAddress.sendValue(payable(winnersAddresses[i]), prizes[i]);\r\n\t\t\t}\r\n\t\t\temit TournamentResolved(currentRound, winnersAddresses, prizes);\r\n\t\t\troundWinners = winnersAddresses;\r\n\t\t\t_resetTournament();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tWinnerInfo[3] memory winners;\r\n\t\tuint256 winnersCount = 0;\r\n\r\n\t\t// Identifica i potenziali vincitori e calcola la differenza di prezzo\r\n\t\tfor (uint256 i = 0; i < predictions.length; i++) {\r\n\t\t\tuint256 difference = predictions[i].predictedPrice > actualPriceUint\r\n\t\t\t\t? predictions[i].predictedPrice - actualPriceUint\r\n\t\t\t\t: actualPriceUint - predictions[i].predictedPrice;\r\n\r\n\t\t\tif (winnersCount < 3) {\r\n\t\t\t\twinners[winnersCount] = WinnerInfo(i, difference, true);\r\n\t\t\t\twinnersCount++;\r\n\t\t\t} else {\r\n\t\t\t\t// Trova e sostituisci il vincitore con la differenza maggiore se ce n'è uno con una differenza minore\r\n\t\t\t\tuint256 maxDiffIndex = 0;\r\n\t\t\t\tuint256 maxDiff = winners[0].difference;\r\n\t\t\t\tfor (uint256 j = 1; j < 3; j++) {\r\n\t\t\t\t\tif (winners[j].difference > maxDiff) {\r\n\t\t\t\t\t\tmaxDiff = winners[j].difference;\r\n\t\t\t\t\t\tmaxDiffIndex = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (difference < maxDiff) {\r\n\t\t\t\t\twinners[maxDiffIndex] = WinnerInfo(i, difference, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tuint256 keeperFee = (prizePool * keeperPercentageFee) / 10000;\r\n\t\tprizePool -= keeperFee;\r\n\t\tAddress.sendValue(payable(msg.sender), keeperFee);\r\n\r\n\t\tuint256 totalPrize = prizePool;\r\n\r\n\t\t// Preparazione degli array per i vincitori e i premi\r\n\t\taddress[] memory finalWinnersAddresses = new address[](winnersCount);\r\n\t\tuint256[] memory finalPrizeAmounts = new uint256[](winnersCount);\r\n\r\n\t\tfor (uint256 i = 0; i < winnersCount; i++) {\r\n\t\t\tfinalWinnersAddresses[i] = predictions[winners[i].index].predictor;\r\n\t\t\t// Distribuzione equa del premio\r\n\t\t\tfinalPrizeAmounts[i] = totalPrize / winnersCount;\r\n\t\t\tAddress.sendValue(\r\n\t\t\t\tpayable(finalWinnersAddresses[i]),\r\n\t\t\t\tfinalPrizeAmounts[i]\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\troundWinners = finalWinnersAddresses;\r\n\r\n\t\temit TournamentResolved(\r\n\t\t\tcurrentRound,\r\n\t\t\tfinalWinnersAddresses,\r\n\t\t\tfinalPrizeAmounts\r\n\t\t);\r\n\t\t_resetTournament();\r\n\t}\r\n\r\n\tfunction getLastWinners() external view returns (address[] memory) {\r\n\t\treturn roundWinners;\r\n\t}\r\n\r\n\tfunction getPrice() public view returns (uint256) {\r\n\t\treturn oracle.getLatestPrice() * 1e10;\r\n\t}\r\n\r\n\tfunction getLatestRoundPrice() external view returns (uint256) {\r\n\t\treturn lastRoundPrice;\r\n\t}\r\n\r\n\tfunction getCurrentRound() external view returns (uint256) {\r\n\t\treturn currentRound;\r\n\t}\r\n\r\n\tfunction getMaxPartecipants() external view returns (uint256) {\r\n\t\treturn maxParticipants;\r\n\t}\r\n\r\n\tfunction getCurrentRoundPartecipants() external view returns (uint256) {\r\n\t\treturn predictions.length;\r\n\t}\r\n\r\n\tfunction getCurrentPricePool() external view returns (uint256) {\r\n\t\treturn prizePool;\r\n\t}\r\n\r\n\tfunction getNextVerificationTime() external view returns (uint256) {\r\n\t\treturn verificationTime;\r\n\t}\r\n\r\n\tfunction getPredictions() external view returns (Prediction[] memory) {\r\n\t\treturn predictions;\r\n\t}\r\n\r\n\tfunction getPartecipants() external view returns (address[] memory) {\r\n\t\taddress[] memory partecipants = new address[](predictions.length);\r\n\t\tfor (uint256 i = 0; i < predictions.length; i++) {\r\n\t\t\tpartecipants[i] = predictions[i].predictor;\r\n\t\t}\r\n\t\treturn partecipants;\r\n\t}\r\n\r\n\treceive() external payable {\r\n\t\tprizePool += msg.value;\r\n\t}\r\n}\r\n"
    },
    "contracts/core/BaluniAgent.sol": {
      "content": "pragma solidity 0.8.25;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\ninterface IRouter {\r\n\tfunction getBpsFee() external view returns (uint256);\r\n}\r\n\r\ncontract BaluniAgent {\r\n\tusing SafeERC20 for IERC20Metadata;\r\n\tusing Address for address payable;\r\n\r\n\taddress public owner;\r\n\taddress private router;\r\n\taddress internal constant _NATIVE =\r\n\t\t0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n\tIERC20Metadata internal constant WNATIVE =\r\n\t\tIERC20Metadata(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270);\r\n\r\n\tuint256 internal constant _DUST = 10;\r\n\tuint256 internal constant _BPS_BASE = 10000;\r\n\r\n\tstruct Call {\r\n\t\taddress to;\r\n\t\tuint256 value;\r\n\t\tbytes data;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Initializes a new instance of the Agent contract.\r\n\t * @param _owner The address of the contract owner.\r\n\t * @param _router The address of the router contract.\r\n\t * @notice Only the router contract can deploy this contract.\r\n\t */\r\n\tconstructor(address _owner, address _router) {\r\n\t\trequire(msg.sender == _router, \"Only Router\");\r\n\t\towner = _owner;\r\n\t\trouter = _router;\r\n\t}\r\n\r\n\tmodifier onlyRouter() {\r\n\t\trequire(msg.sender == router, \"Callable only by the router\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Executes a batch of calls and performs token operations.\r\n\t * @param calls An array of Call structs representing the calls to be executed.\r\n\t * @param tokensReturn An array of token addresses to return after the batch call.\r\n\t * @notice Only the router contract is allowed to execute this function.\r\n\t */\r\n\tfunction execute(\r\n\t\tCall[] calldata calls,\r\n\t\taddress[] calldata tokensReturn\r\n\t) external onlyRouter {\r\n\t\tfor (uint i = 0; i < calls.length; i++) {\r\n\t\t\t(bool success, ) = calls[i].to.call{ value: calls[i].value }(\r\n\t\t\t\tcalls[i].data\r\n\t\t\t);\r\n\t\t\trequire(success, \"Batch call failed\");\r\n\t\t}\r\n\t\t_chargeFees(tokensReturn);\r\n\t\t_returnTokens(tokensReturn);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the router contract.\r\n\t * @return The address of the router contract.\r\n\t */\r\n\tfunction getRouter() public view returns (address) {\r\n\t\treturn router;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function to charge fees for the tokens returned.\r\n\t * @param tokensReturn The array of tokens to charge fees for.\r\n\t */\r\n\tfunction _chargeFees(address[] calldata tokensReturn) internal {\r\n\t\tuint256 amount;\r\n\t\tuint256 bpsFee = IRouter(router).getBpsFee();\r\n\t\tfor (uint256 i = 0; i < tokensReturn.length; i++) {\r\n\t\t\taddress token = tokensReturn[i];\r\n\t\t\tif (token == _NATIVE) {\r\n\t\t\t\t// Use the native balance for amount calculation as wrap will be executed later\r\n\t\t\t\tamount = (address(this).balance * bpsFee) / _BPS_BASE;\r\n\t\t\t\t// send to router\r\n\t\t\t\tpayable(router).sendValue(amount);\r\n\t\t\t} else {\r\n\t\t\t\tuint256 balance = IERC20(token).balanceOf(address(this));\r\n\t\t\t\tamount = (balance * bpsFee) / _BPS_BASE;\r\n\t\t\t\tIERC20Metadata(token).safeTransfer(router, amount);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function to return tokens to the owner.\r\n\t * @param tokensReturn The array of tokens to return.\r\n\t */\r\n\tfunction _returnTokens(address[] calldata tokensReturn) internal {\r\n\t\tuint256 tokensReturnLength = tokensReturn.length;\r\n\t\tif (tokensReturnLength > 0) {\r\n\t\t\tfor (uint256 i; i < tokensReturnLength; ) {\r\n\t\t\t\taddress token = tokensReturn[i];\r\n\t\t\t\tif (token == _NATIVE) {\r\n\t\t\t\t\tif (address(this).balance > 0) {\r\n\t\t\t\t\t\tpayable(owner).sendValue(address(this).balance);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tuint256 balance = IERC20Metadata(token).balanceOf(\r\n\t\t\t\t\t\taddress(this)\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (balance > _DUST) {\r\n\t\t\t\t\t\tIERC20Metadata(token).safeTransfer(owner, balance);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tunchecked {\r\n\t\t\t\t\t++i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"
    },
    "contracts/core/BaluniRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.25;\r\n\r\n/**\r\n *  __                  __                      __\r\n * /  |                /  |                    /  |\r\n * $$ |____    ______  $$ | __    __  _______  $$/\r\n * $$      \\  /      \\ $$ |/  |  /  |/       \\ /  |\r\n * $$$$$$$  | $$$$$$  |$$ |$$ |  $$ |$$$$$$$  |$$ |\r\n * $$ |  $$ | /    $$ |$$ |$$ |  $$ |$$ |  $$ |$$ |\r\n * $$ |__$$ |/$$$$$$$ |$$ |$$ \\__$$ |$$ |  $$ |$$ |\r\n * $$    $$/ $$    $$ |$$ |$$    $$/ $$ |  $$ |$$ |\r\n * $$$$$$$/   $$$$$$$/ $$/  $$$$$$/  $$/   $$/ $$/\r\n *\r\n *\r\n *                  ,-\"\"\"\"-.\r\n *                ,'      _ `.\r\n *               /       )_)  \\\r\n *              :              :\r\n *              \\              /\r\n *               \\            /\r\n *                `.        ,'\r\n *                  `.    ,'\r\n *                    `.,'\r\n *                     /\\`.   ,-._\r\n *                         `-'    \\__\r\n *                              .\r\n *               s                \\\r\n *                                \\\\\r\n *                                 \\\\\r\n *                                  >\\/7\r\n *                              _.-(6'  \\\r\n *                             (=___._/` \\\r\n *                                  )  \\ |\r\n *                                 /   / |\r\n *                                /    > /\r\n *                               j    < _\\\r\n *                           _.-' :      ``.\r\n *                           \\ r=._\\        `.\r\n */\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\r\n\r\nimport \"./BaluniAgent.sol\";\r\nimport \"./BaluniStake.sol\";\r\n\r\ninterface IOracle {\r\n\tfunction getRate(\r\n\t\tIERC20 srcToken,\r\n\t\tIERC20 dstToken,\r\n\t\tbool useWrappers\r\n\t) external view returns (uint256 weightedRate);\r\n}\r\n\r\ncontract BaluniRouter is Ownable, ERC20, BaluniStake {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\tuint256 public constant _MAX_BPS_FEE = 500;\r\n\r\n\tuint256 public _BPS_FEE = 30; // 0.3%.\r\n\tuint256 public _BPS_BASE = 10000;\r\n\tuint256 public _BPS_LIQUIDATE_FEE = 30; // 0.3%.\r\n\r\n\tusing EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n\tEnumerableSet.AddressSet private tokens;\r\n\r\n\tIERC20 public constant USDC =\r\n\t\tIERC20(0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174);\r\n\tIERC20Metadata internal constant WNATIVE =\r\n\t\tIERC20Metadata(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270);\r\n\tIOracle public immutable oracle =\r\n\t\tIOracle(0x0AdDd25a91563696D8567Df78D5A01C9a991F9B8); // 1inch Spot Aggregator\r\n\tISwapRouter public immutable uniswapRouter =\r\n\t\tISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\r\n\tIUniswapV3Factory public immutable uniswapFactory =\r\n\t\tIUniswapV3Factory(0x1F98431c8aD98523631AE4a59f267346ea31F984);\r\n\r\n\tmapping(address => BaluniAgent) public userAgents;\r\n\tmapping(address => uint256) public tokenBalanceMap;\r\n\r\n\tevent AgentCreated(address user, address agent);\r\n\tevent Execute(\r\n\t\taddress user,\r\n\t\tBaluniAgent.Call[] calls,\r\n\t\taddress[] tokensReturn\r\n\t);\r\n\tevent Burn(address user, uint256 value);\r\n\tevent Mint(address user, uint256 value);\r\n\tevent ChangeBpsFee(uint256 newFee);\r\n\tevent ChangeLiquidateFee(uint256 newFee);\r\n\r\n\tmodifier validTimestamp(uint256 _timestamp) {\r\n\t\trequire(\r\n\t\t\t_timestamp <= block.timestamp,\r\n\t\t\t\"Timestamp too far in the future\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_timestamp >= block.timestamp - 1 days,\r\n\t\t\t\"Timestamp too far in the past\"\r\n\t\t);\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor()\r\n\t\tOwnable(msg.sender)\r\n\t\tERC20(\"Baluni\", \"BALUNI\")\r\n\t\tBaluniStake(address(this), address(this))\r\n\t{\r\n\t\t_mint(address(this), 1 ether);\r\n\t\t_stakeToContract(address(this), 1 ether);\r\n\t\t_updateRewards(address(this));\r\n\r\n\t\tEnumerableSet.add(tokens, address(USDC));\r\n\t}\r\n\r\n\tfunction _stakeToContract(address _to, uint256 _amount) internal {\r\n\t\tbalanceStakedOf[_to] += _amount;\r\n\t\tstakingSupply += _amount;\r\n\t\tstakeTimestamp[msg.sender] = block.timestamp;\r\n\r\n\t\tif (stakingSupply > 0) {\r\n\t\t\tupdateRewardIndex(_amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction listAllTokens() external view returns (address[] memory) {\r\n\t\treturn tokens.values();\r\n\t}\r\n\r\n\tfunction getAgentAddress(address _user) public view returns (address) {\r\n\t\tbytes32 salt = keccak256(abi.encodePacked(_user));\r\n\t\tbytes memory bytecode = getBytecode(_user);\r\n\t\tbytes32 hash = keccak256(\r\n\t\t\tabi.encodePacked(\r\n\t\t\t\tbytes1(0xff),\r\n\t\t\t\taddress(this),\r\n\t\t\t\tsalt,\r\n\t\t\t\tkeccak256(bytecode)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\treturn address(uint160(uint256(hash)));\r\n\t}\r\n\r\n\tfunction getOrCreateAgent(address user) private returns (BaluniAgent) {\r\n\t\tbytes32 salt = keccak256(abi.encodePacked(user));\r\n\r\n\t\tif (address(userAgents[user]) == address(0)) {\r\n\t\t\tBaluniAgent agent = new BaluniAgent{ salt: salt }(\r\n\t\t\t\tuser,\r\n\t\t\t\taddress(this)\r\n\t\t\t);\r\n\t\t\trequire(\r\n\t\t\t\tisContract(address(agent)),\r\n\t\t\t\t\"Agent creation failed, not a contract\"\r\n\t\t\t);\r\n\t\t\tuserAgents[user] = agent;\r\n\t\t\temit AgentCreated(user, address(agent));\r\n\t\t}\r\n\t\treturn userAgents[user];\r\n\t}\r\n\r\n\tfunction isContract(address _addr) private view returns (bool) {\r\n\t\tuint32 size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(_addr)\r\n\t\t}\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\tfunction getBytecode(address _owner) internal view returns (bytes memory) {\r\n\t\trequire(_owner != address(0), \"Owner address cannot be zero.\");\r\n\t\tbytes memory bytecode = type(BaluniAgent).creationCode;\r\n\t\treturn abi.encodePacked(bytecode, abi.encode(_owner, address(this)));\r\n\t}\r\n\r\n\tfunction getBpsFee() external view returns (uint256) {\r\n\t\treturn _BPS_FEE;\r\n\t}\r\n\r\n\tfunction changeBpsFee(uint256 _newFee) external onlyOwner {\r\n\t\t_BPS_FEE = _newFee;\r\n\t\temit ChangeBpsFee(_newFee);\r\n\t}\r\n\r\n\tfunction changeBpsLiquidateFee(uint256 _newFee) external onlyOwner {\r\n\t\t_BPS_LIQUIDATE_FEE = _newFee;\r\n\t\temit ChangeLiquidateFee(_newFee);\r\n\t}\r\n\r\n\tfunction execute(\r\n\t\tBaluniAgent.Call[] calldata calls,\r\n\t\taddress[] calldata tokensReturn\r\n\t) external nonReentrant {\r\n\t\tBaluniAgent agent = getOrCreateAgent(msg.sender);\r\n\t\tbool[] memory isTokenNew = new bool[](tokensReturn.length);\r\n\r\n\t\tfor (uint256 i = 0; i < tokensReturn.length; i++) {\r\n\t\t\tisTokenNew[i] = !EnumerableSet.contains(tokens, tokensReturn[i]);\r\n\t\t}\r\n\r\n\t\tagent.execute(calls, tokensReturn);\r\n\r\n\t\tfor (uint256 i = 0; i < tokensReturn.length; i++) {\r\n\t\t\taddress token = tokensReturn[i];\r\n\t\t\taddress poolNative3000 = uniswapFactory.getPool(\r\n\t\t\t\ttoken,\r\n\t\t\t\taddress(WNATIVE),\r\n\t\t\t\t3000\r\n\t\t\t);\r\n\t\t\taddress poolNative500 = uniswapFactory.getPool(\r\n\t\t\t\ttoken,\r\n\t\t\t\taddress(WNATIVE),\r\n\t\t\t\t500\r\n\t\t\t);\r\n\t\t\tbool poolExist = poolNative3000 != address(0) ||\r\n\t\t\t\tpoolNative500 != address(0);\r\n\r\n\t\t\tif (isTokenNew[i] && poolExist) {\r\n\t\t\t\tEnumerableSet.add(tokens, token);\r\n\t\t\t}\r\n\r\n\t\t\tif (!poolExist) {\r\n\t\t\t\tuint256 balance = IERC20(token).balanceOf(address(this));\r\n\t\t\t\tIERC20(token).transfer(msg.sender, balance);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction liquidate(address token) external nonReentrant {\r\n\t\tuint256 totalERC20Balance = IERC20(token).balanceOf(address(this));\r\n\t\taddress pool = uniswapFactory.getPool(token, address(USDC), 3000);\r\n\t\tsecureApproval(token, address(uniswapRouter), totalERC20Balance);\r\n\r\n\t\tif (pool != address(0)) {\r\n\t\t\tuint256 singleSwapResult = singleSwap(\r\n\t\t\t\ttoken,\r\n\t\t\t\taddress(USDC),\r\n\t\t\t\ttotalERC20Balance,\r\n\t\t\t\taddress(this)\r\n\t\t\t);\r\n\t\t\trequire(singleSwapResult > 0, \"Swap Failed, Try Burn()\");\r\n\t\t} else {\r\n\t\t\tuint256 amountOutHop = multiHopSwap(\r\n\t\t\t\ttoken,\r\n\t\t\t\taddress(WNATIVE),\r\n\t\t\t\taddress(USDC),\r\n\t\t\t\ttotalERC20Balance,\r\n\t\t\t\taddress(this)\r\n\t\t\t);\r\n\t\t\trequire(amountOutHop > 0, \"Swap Failed, Try Burn()\");\r\n\t\t}\r\n\r\n\t\tuint256 reward = claimTo(address(this), msg.sender);\r\n\t\tuint256 mintAmount = (totalSupply() * _BPS_LIQUIDATE_FEE) / 10000;\r\n\r\n\t\t_mint(address(this), mintAmount);\r\n\t\t_stakeToContract(address(this), mintAmount);\r\n\r\n\t\temit Mint(address(this), mintAmount);\r\n\t\temit RewardClaimed(msg.sender, reward);\r\n\t}\r\n\r\n\tfunction burn(uint256 burnAmount) external nonReentrant {\r\n\t\trequire(balanceOf(msg.sender) >= burnAmount, \"Insufficient BAL\");\r\n\r\n\t\tfor (uint256 i; i < tokens.length(); i++) {\r\n\t\t\taddress token = tokens.at(i);\r\n\t\t\tuint256 totalBaluni = totalSupply();\r\n\t\t\tuint256 totalERC20Balance = IERC20(token).balanceOf(address(this));\r\n\r\n\t\t\tif (totalERC20Balance == 0 || token == address(this)) continue;\r\n\r\n\t\t\tuint256 decimals = IERC20Metadata(token).decimals();\r\n\t\t\tuint256 share = _calculateTokenShare(\r\n\t\t\t\ttotalBaluni,\r\n\t\t\t\ttotalERC20Balance,\r\n\t\t\t\tburnAmount,\r\n\t\t\t\tdecimals\r\n\t\t\t);\r\n\r\n\t\t\tIERC20(token).transfer(msg.sender, share);\r\n\t\t}\r\n\t\t_burn(msg.sender, burnAmount);\r\n\t\temit Burn(msg.sender, burnAmount);\r\n\t}\r\n\r\n\tfunction burnTokensAndSwapToUSDC(uint256 burnAmount) external nonReentrant {\r\n\t\trequire(burnAmount > 0, \"Insufficient BAL\");\r\n\r\n\t\tfor (uint256 i; i < tokens.length(); i++) {\r\n\t\t\taddress token = tokens.at(i);\r\n\t\t\tuint256 totalBaluni = totalSupply();\r\n\t\t\tuint256 totalERC20Balance = IERC20(token).balanceOf(address(this));\r\n\r\n\t\t\tif (totalERC20Balance > 0 == false) continue;\r\n\t\t\tif (token == address(this)) continue;\r\n\r\n\t\t\tuint256 decimals = IERC20Metadata(token).decimals();\r\n\t\t\tuint256 burnAmountToken = _calculateTokenShare(\r\n\t\t\t\ttotalBaluni,\r\n\t\t\t\ttotalERC20Balance,\r\n\t\t\t\tburnAmount,\r\n\t\t\t\tdecimals\r\n\t\t\t);\r\n\r\n\t\t\tif (token == address(USDC)) {\r\n\t\t\t\tIERC20(USDC).transfer(msg.sender, burnAmountToken);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\taddress pool = uniswapFactory.getPool(token, address(USDC), 3000);\r\n\t\t\tsecureApproval(token, address(uniswapRouter), burnAmountToken);\r\n\r\n\t\t\tif (pool != address(0)) {\r\n\t\t\t\tsingleSwap(token, address(USDC), burnAmountToken, msg.sender);\r\n\t\t\t} else {\r\n\t\t\t\tuint256 amountOutHop = multiHopSwap(\r\n\t\t\t\t\ttoken,\r\n\t\t\t\t\taddress(WNATIVE),\r\n\t\t\t\t\taddress(USDC),\r\n\t\t\t\t\tburnAmountToken,\r\n\t\t\t\t\tmsg.sender\r\n\t\t\t\t);\r\n\t\t\t\trequire(amountOutHop > 0, \"Swap Failed, Try Burn()\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t_burn(msg.sender, burnAmount);\r\n\r\n\t\temit Burn(msg.sender, burnAmount);\r\n\t}\r\n\r\n\tfunction calculateNetAmountAfterFee(\r\n\t\tuint256 _amount\r\n\t) internal view returns (uint256) {\r\n\t\tuint256 amountInWithFee = (_amount * (_BPS_BASE - (_BPS_FEE))) /\r\n\t\t\t_BPS_BASE;\r\n\t\treturn amountInWithFee;\r\n\t}\r\n\r\n\tfunction getUnitPrice() public view returns (uint256) {\r\n\t\treturn _calculateBaluniToUsdc(1e18);\r\n\t}\r\n\r\n\tfunction mintUSDC(\r\n\t\tuint256 balAmountToMint\r\n\t) public nonReentrant returns (uint256) {\r\n\t\tuint256 totalUSDValuation = _totalValuation();\r\n\t\tuint256 totalBalSupply = totalSupply();\r\n\t\tuint256 usdcRequired = (balAmountToMint * totalUSDValuation) /\r\n\t\t\ttotalBalSupply;\r\n\t\tuint256 balance = IERC20(USDC).balanceOf(msg.sender);\r\n\t\trequire(totalBalSupply > 0, \"Total BALUNI supply cannot be zero\");\r\n\t\trequire(balance >= usdcRequired / 1e12, \"USDC balance is insufficient\");\r\n\r\n\t\tuint256 allowed = USDC.allowance(msg.sender, address(this));\r\n\t\trequire(allowed >= usdcRequired / 1e12, \"Check the token allowance\");\r\n\r\n\t\tUSDC.safeTransferFrom(msg.sender, address(this), usdcRequired / 1e12);\r\n\r\n\t\tuint256 amountAfterFee = calculateNetAmountAfterFee(balAmountToMint);\r\n\t\tuint256 netBalAmountToMint = balAmountToMint - amountAfterFee;\r\n\r\n\t\t_mint(address(this), netBalAmountToMint);\r\n\t\temit Mint(address(this), netBalAmountToMint);\r\n\r\n\t\tif (stakingSupply > 0) {\r\n\t\t\tupdateRewardIndex(netBalAmountToMint);\r\n\t\t}\r\n\r\n\t\t_mint(msg.sender, amountAfterFee);\r\n\t\temit Mint(msg.sender, amountAfterFee);\r\n\r\n\t\treturn netBalAmountToMint;\r\n\t}\r\n\r\n\tfunction mintERC20(\r\n\t\tuint256 balAmountToMint,\r\n\t\taddress asset\r\n\t) public nonReentrant returns (uint256) {\r\n\t\tuint256 totalUSDValuation = _totalValuation();\r\n\t\tuint256 totalBalSupply = totalSupply();\r\n\t\trequire(totalBalSupply > 0, \"Total BALUNI supply cannot be zero\");\r\n\r\n\t\tuint256 usdcRequired = (balAmountToMint * totalUSDValuation) /\r\n\t\t\ttotalBalSupply;\r\n\r\n\t\tuint8 decimalA = IERC20Metadata(address(USDC)).decimals();\r\n\t\tuint8 decimalB = IERC20Metadata(asset).decimals();\r\n\r\n\t\tuint256 assetRate = oracle.getRate(IERC20(USDC), IERC20(asset), false);\r\n\t\tuint256 required;\r\n\r\n\t\tif (decimalB > decimalA) {\r\n\t\t\tuint256 rate = assetRate / 10 ** (decimalB - decimalA);\r\n\t\t\trequired = (usdcRequired / rate) * 1e18;\r\n\t\t\trequired = required / 10 ** (decimalB - decimalA);\r\n\t\t} else {\r\n\t\t\tuint256 rate = assetRate * 10 ** (decimalA - decimalB);\r\n\t\t\trequired = (usdcRequired / rate) * 1e18;\r\n\t\t\trequired = required / 10 ** (decimalA - decimalB);\r\n\t\t}\r\n\r\n\t\tuint256 balance = IERC20(asset).balanceOf(msg.sender);\r\n\r\n\t\trequire(balance >= required, \"Balance is insufficient\");\r\n\r\n\t\tuint256 allowed = IERC20(asset).allowance(msg.sender, address(this));\r\n\r\n\t\trequire(allowed >= required, \"Check the token allowance\");\r\n\r\n\t\tIERC20(asset).safeTransferFrom(msg.sender, address(this), required);\r\n\r\n\t\tuint256 amountAfterFee = calculateNetAmountAfterFee(balAmountToMint);\r\n\t\tuint256 netBalAmountToMint = balAmountToMint - amountAfterFee;\r\n\r\n\t\t_mint(address(this), netBalAmountToMint);\r\n\t\temit Mint(address(this), netBalAmountToMint);\r\n\r\n\t\tif (stakingSupply > 0) {\r\n\t\t\tupdateRewardIndex(netBalAmountToMint);\r\n\t\t}\r\n\r\n\t\t_mint(msg.sender, amountAfterFee);\r\n\t\temit Mint(msg.sender, amountAfterFee);\r\n\r\n\t\treturn amountAfterFee;\r\n\t}\r\n\r\n\tfunction _calculateBaluniToUsdc(\r\n\t\tuint256 amount\r\n\t) internal view returns (uint256 shareUSDC) {\r\n\t\tuint256 totalBaluni = totalSupply();\r\n\t\trequire(totalBaluni > 0, \"Total supply cannot be zero\");\r\n\t\tuint256 totalUSDC = _totalValuation();\r\n\t\tshareUSDC = (amount * totalUSDC) / totalBaluni;\r\n\t}\r\n\r\n\tfunction _calculateTokenShare(\r\n\t\tuint256 totalBaluni,\r\n\t\tuint256 totalERC20Balance,\r\n\t\tuint256 amount,\r\n\t\tuint256 tokenDecimals\r\n\t) internal pure returns (uint256) {\r\n\t\trequire(totalBaluni > 0, \"Total supply cannot be zero\");\r\n\t\tuint256 rate;\r\n\r\n\t\tif (tokenDecimals < 18) {\r\n\t\t\trate =\r\n\t\t\t\t((amount * totalERC20Balance)) /\r\n\t\t\t\t(totalBaluni / (10 ** (18 - tokenDecimals)));\r\n\t\t} else {\r\n\t\t\trate = (amount * totalERC20Balance) / totalBaluni;\r\n\t\t}\r\n\r\n\t\treturn rate;\r\n\t}\r\n\r\n\tfunction _calculateTokenValuation(\r\n\t\tuint256 amount,\r\n\t\taddress token\r\n\t) internal view returns (uint256 valuation) {\r\n\t\tuint256 rate;\r\n\t\tuint8 tokenDecimal = IERC20Metadata(token).decimals();\r\n\t\tuint8 usdcDecimal = IERC20Metadata(address(USDC)).decimals();\r\n\r\n\t\tif (token == address(USDC)) return amount * 1e12;\r\n\r\n\t\ttry\r\n\t\t\tIOracle(oracle).getRate(IERC20(token), IERC20(USDC), false)\r\n\t\treturns (uint256 _rate) {\r\n\t\t\trate = _rate;\r\n\t\t} catch {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 factor = (10 ** (tokenDecimal - usdcDecimal));\r\n\r\n\t\trate = ((amount * factor) * (rate * factor)) / 1e18;\r\n\r\n\t\treturn rate;\r\n\t}\r\n\r\n\tfunction totalValuation() external view returns (uint256) {\r\n\t\treturn _totalValuation();\r\n\t}\r\n\r\n\tfunction _totalValuation() internal view returns (uint256) {\r\n\t\tuint256 _totalV;\r\n\r\n\t\tfor (uint256 i; i < tokens.length(); i++) {\r\n\t\t\taddress token = tokens.at(i);\r\n\t\t\tuint256 balance = IERC20(token).balanceOf(address(this));\r\n\t\t\tuint256 tokenBalanceValuation = _calculateTokenValuation(\r\n\t\t\t\tbalance,\r\n\t\t\t\ttoken\r\n\t\t\t);\r\n\t\t\t_totalV += tokenBalanceValuation;\r\n\t\t}\r\n\r\n\t\treturn _totalV;\r\n\t}\r\n\r\n\tfunction getUSDCShareValue(uint256 amount) external view returns (uint256) {\r\n\t\treturn _calculateBaluniToUsdc(amount);\r\n\t}\r\n\r\n\tfunction performArbitrage() external nonReentrant {\r\n\t\tuint256 unitPrice = getUnitPrice();\r\n\t\tuint256 marketPrice = oracle.getRate(\r\n\t\t\tIERC20(address(this)),\r\n\t\t\tIERC20(address(USDC)),\r\n\t\t\tfalse\r\n\t\t);\r\n\r\n\t\tuint256 baluniBalance = balanceOf(address(this));\r\n\t\tuint256 usdcBalance = IERC20(USDC).balanceOf(address(this));\r\n\r\n\t\tif (marketPrice * 1e12 < unitPrice) {\r\n\t\t\tuint256 amountToBuy = (usdcBalance * 1e12) /\r\n\t\t\t\t(marketPrice * 1e12) /\r\n\t\t\t\t1e18;\r\n\r\n\t\t\tif (amountToBuy > baluniBalance) amountToBuy = baluniBalance;\r\n\r\n\t\t\tsecureApproval(address(USDC), address(uniswapRouter), usdcBalance);\r\n\r\n\t\t\tuint256 amountOut = singleSwap(\r\n\t\t\t\taddress(USDC),\r\n\t\t\t\taddress(this),\r\n\t\t\t\tusdcBalance,\r\n\t\t\t\taddress(this)\r\n\t\t\t);\r\n\t\t\trequire(\r\n\t\t\t\tamountOut >= amountToBuy,\r\n\t\t\t\t\"Arbitrage failed: insufficient output amount\"\r\n\t\t\t);\r\n\t\t\tsecureApproval(address(this), address(uniswapRouter), amountOut);\r\n\t\t\tsingleSwap(address(this), address(USDC), amountOut, address(this));\r\n\t\t\trequire(\r\n\t\t\t\tIERC20(USDC).balanceOf(address(this)) > usdcBalance,\r\n\t\t\t\t\"Arbitrage did not profit\"\r\n\t\t\t);\r\n\t\t} else if (marketPrice * 1e12 > unitPrice) {\r\n\t\t\tuint256 amountToSell = baluniBalance;\r\n\t\t\tsecureApproval(address(this), address(uniswapRouter), amountToSell);\r\n\t\t\tuint256 amountOutUSDC = singleSwap(\r\n\t\t\t\taddress(this),\r\n\t\t\t\taddress(USDC),\r\n\t\t\t\tamountToSell,\r\n\t\t\t\taddress(this)\r\n\t\t\t);\r\n\t\t\trequire(\r\n\t\t\t\tamountOutUSDC > usdcBalance,\r\n\t\t\t\t\"Arbitrage failed: insufficient output amount\"\r\n\t\t\t);\r\n\t\t\tsecureApproval(\r\n\t\t\t\taddress(USDC),\r\n\t\t\t\taddress(uniswapRouter),\r\n\t\t\t\tamountOutUSDC\r\n\t\t\t);\r\n\t\t\tsingleSwap(\r\n\t\t\t\taddress(USDC),\r\n\t\t\t\taddress(this),\r\n\t\t\t\tamountOutUSDC,\r\n\t\t\t\taddress(this)\r\n\t\t\t);\r\n\t\t\trequire(\r\n\t\t\t\tbalanceOf(address(this)) > baluniBalance,\r\n\t\t\t\t\"Arbitrage did not profit\"\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction singleSwap(\r\n\t\taddress token0,\r\n\t\taddress token1,\r\n\t\tuint256 tokenBalance,\r\n\t\taddress receiver\r\n\t) private returns (uint256 amountOut) {\r\n\t\tISwapRouter.ExactInputSingleParams memory params = ISwapRouter\r\n\t\t\t.ExactInputSingleParams({\r\n\t\t\t\ttokenIn: token0,\r\n\t\t\t\ttokenOut: token1,\r\n\t\t\t\tfee: 3000,\r\n\t\t\t\trecipient: address(receiver),\r\n\t\t\t\tdeadline: block.timestamp,\r\n\t\t\t\tamountIn: tokenBalance,\r\n\t\t\t\tamountOutMinimum: 0,\r\n\t\t\t\tsqrtPriceLimitX96: 0\r\n\t\t\t});\r\n\r\n\t\treturn uniswapRouter.exactInputSingle(params);\r\n\t}\r\n\r\n\tfunction multiHopSwap(\r\n\t\taddress token0,\r\n\t\taddress token1,\r\n\t\taddress token2,\r\n\t\tuint256 tokenBalance,\r\n\t\taddress receiver\r\n\t) private returns (uint256 amountOut) {\r\n\t\tISwapRouter.ExactInputParams memory params = ISwapRouter\r\n\t\t\t.ExactInputParams({\r\n\t\t\t\tpath: abi.encodePacked(\r\n\t\t\t\t\ttoken0,\r\n\t\t\t\t\tuint24(3000),\r\n\t\t\t\t\ttoken1,\r\n\t\t\t\t\tuint24(3000),\r\n\t\t\t\t\ttoken2\r\n\t\t\t\t),\r\n\t\t\t\trecipient: address(receiver),\r\n\t\t\t\tdeadline: block.timestamp,\r\n\t\t\t\tamountIn: tokenBalance,\r\n\t\t\t\tamountOutMinimum: 0\r\n\t\t\t});\r\n\t\treturn uniswapRouter.exactInput(params);\r\n\t}\r\n\r\n\tfunction secureApproval(\r\n\t\taddress token,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal {\r\n\t\tIERC20 _token = IERC20(token);\r\n\t\tuint256 currentAllowance = _token.allowance(address(this), spender);\r\n\r\n\t\tif (currentAllowance != amount) {\r\n\t\t\tif (currentAllowance != 0) {\r\n\t\t\t\t_token.approve(spender, 0);\r\n\t\t\t}\r\n\r\n\t\t\t_token.approve(spender, amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction rebalance(\r\n\t\taddress[] calldata assets,\r\n\t\tuint256[] calldata weights\r\n\t) external returns (bool) {\r\n\t\tuint256 totalValue;\r\n\r\n\t\tfor (uint256 i; i < assets.length; i++) {\r\n\t\t\tuint256 balance = IERC20(assets[i]).balanceOf(msg.sender);\r\n\t\t\tuint256 tokenValuation = _calculateTokenValuation(\r\n\t\t\t\tbalance,\r\n\t\t\t\tassets[i]\r\n\t\t\t);\r\n\t\t\ttotalValue += tokenValuation;\r\n\t\t}\r\n\r\n\t\tuint256[] memory overweightVaults = new uint256[](assets.length);\r\n\t\tuint256[] memory overweightAmounts = new uint256[](assets.length);\r\n\t\tuint256[] memory underweightVaults = new uint256[](assets.length);\r\n\t\tuint256[] memory underweightAmounts = new uint256[](assets.length);\r\n\r\n\t\tuint256 overweightVaultsLength;\r\n\t\tuint256 underweightVaultsLength;\r\n\t\tuint256 overweightAmount;\r\n\t\tuint256 overweightPercent;\r\n\t\tuint256 targetWeight;\r\n\t\tuint256 currentWeight;\r\n\t\tuint256 totalActiveWeight;\r\n\r\n\t\tbool overweight;\r\n\r\n\t\tfor (uint256 i; i < assets.length; i++) {\r\n\t\t\tuint256 balance = IERC20(assets[i]).balanceOf(msg.sender);\r\n\t\t\tuint256 decimals = IERC20Metadata(assets[i]).decimals();\r\n\t\t\tuint256 tokensTotalValue = _calculateTokenValuation(\r\n\t\t\t\tbalance,\r\n\t\t\t\tassets[i]\r\n\t\t\t);\r\n\t\t\ttargetWeight = weights[i];\r\n\t\t\tcurrentWeight = tokensTotalValue / (10000) / (totalValue);\r\n\t\t\toverweight = currentWeight > targetWeight;\r\n\t\t\toverweightPercent = overweight\r\n\t\t\t\t? currentWeight - (targetWeight)\r\n\t\t\t\t: targetWeight - (currentWeight);\r\n\t\t\tuint256 price = _calculateTokenValuation(\r\n\t\t\t\t1 * 10 ** decimals,\r\n\t\t\t\tassets[i]\r\n\t\t\t);\r\n\t\t\tif (overweight) {\r\n\t\t\t\toverweightAmount = (overweightPercent * (totalValue)) / (10000);\r\n\t\t\t\toverweightAmount = (overweightAmount * (1e18)) / (price);\r\n\t\t\t\toverweightVaults[overweightVaultsLength] = i;\r\n\t\t\t\toverweightAmounts[overweightVaultsLength] = overweightAmount;\r\n\t\t\t\toverweightVaultsLength++;\r\n\t\t\t} else if (!overweight) {\r\n\t\t\t\ttotalActiveWeight += overweightPercent;\r\n\t\t\t\toverweightAmount = overweightPercent;\r\n\t\t\t\t// overweightAmount = overweightPercent.mul(totalValue).div(10000);\r\n\t\t\t\tunderweightVaults[underweightVaultsLength] = i;\r\n\t\t\t\tunderweightAmounts[underweightVaultsLength] = overweightAmount;\r\n\t\t\t\tunderweightVaultsLength++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Resize overweightVaults and overweightAmounts to the actual overweighted vaults\r\n\t\toverweightVaults = _resize(overweightVaults, overweightVaultsLength);\r\n\t\toverweightAmounts = _resize(overweightAmounts, overweightVaultsLength);\r\n\t\t// Resize overweightVaults and overweightAmounts to the actual overweighted vaults\r\n\t\tunderweightVaults = _resize(underweightVaults, underweightVaultsLength);\r\n\t\tunderweightAmounts = _resize(\r\n\t\t\tunderweightAmounts,\r\n\t\t\tunderweightVaultsLength\r\n\t\t);\r\n\r\n\t\tfor (uint256 i; i < overweightVaults.length; i++) {\r\n\t\t\tif (overweightAmounts[i] > 0) {\r\n\t\t\t\tIERC20(address(assets[overweightVaults[i]])).transferFrom(\r\n\t\t\t\t\tmsg.sender,\r\n\t\t\t\t\taddress(this),\r\n\t\t\t\t\toverweightAmounts[i]\r\n\t\t\t\t);\r\n\t\t\t\taddress pool = uniswapFactory.getPool(\r\n\t\t\t\t\taddress(assets[overweightVaults[i]]),\r\n\t\t\t\t\taddress(USDC),\r\n\t\t\t\t\t3000\r\n\t\t\t\t);\r\n\t\t\t\tsecureApproval(\r\n\t\t\t\t\taddress(assets[overweightVaults[i]]),\r\n\t\t\t\t\taddress(uniswapRouter),\r\n\t\t\t\t\toverweightAmounts[i]\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (pool != address(0)) {\r\n\t\t\t\t\tuint singleSwapResult = singleSwap(\r\n\t\t\t\t\t\taddress(assets[overweightVaults[i]]),\r\n\t\t\t\t\t\taddress(USDC),\r\n\t\t\t\t\t\toverweightAmounts[i],\r\n\t\t\t\t\t\tunderweightVaults.length == 0\r\n\t\t\t\t\t\t\t? msg.sender\r\n\t\t\t\t\t\t\t: address(this)\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tuint256 amountOutHop = multiHopSwap(\r\n\t\t\t\t\t\taddress(assets[overweightVaults[i]]),\r\n\t\t\t\t\t\taddress(WNATIVE),\r\n\t\t\t\t\t\taddress(USDC),\r\n\t\t\t\t\t\toverweightAmounts[i],\r\n\t\t\t\t\t\tunderweightVaults.length == 0\r\n\t\t\t\t\t\t\t? msg.sender\r\n\t\t\t\t\t\t\t: address(this)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (uint256 i; i < underweightVaults.length; i++) {\r\n\t\t\tif (underweightAmounts[i] > 0) {\r\n\t\t\t\tuint256 rebaseActiveWgt = (underweightAmounts[i] * (10000)) /\r\n\t\t\t\t\t(totalActiveWeight);\r\n\r\n\t\t\t\tuint256 rebBuyQty = (rebaseActiveWgt *\r\n\t\t\t\t\tIERC20(USDC).balanceOf(msg.sender) *\r\n\t\t\t\t\t1e12) / (10000);\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\trebBuyQty > 0 &&\r\n\t\t\t\t\trebBuyQty <= IERC20(USDC).balanceOf(msg.sender) * 1e12\r\n\t\t\t\t) {\r\n\t\t\t\t\taddress pool = uniswapFactory.getPool(\r\n\t\t\t\t\t\taddress(assets[underweightVaults[i]]),\r\n\t\t\t\t\t\taddress(USDC),\r\n\t\t\t\t\t\t3000\r\n\t\t\t\t\t);\r\n\t\t\t\t\tsecureApproval(\r\n\t\t\t\t\t\taddress(assets[underweightVaults[i]]),\r\n\t\t\t\t\t\taddress(uniswapRouter),\r\n\t\t\t\t\t\tunderweightAmounts[i] / 1e12\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tif (pool != address(0)) {\r\n\t\t\t\t\t\tuint singleSwapResult = singleSwap(\r\n\t\t\t\t\t\t\taddress(USDC),\r\n\t\t\t\t\t\t\taddress(assets[underweightVaults[i]]),\r\n\t\t\t\t\t\t\tunderweightAmounts[i] / 1e12,\r\n\t\t\t\t\t\t\taddress(this)\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tuint256 amountToTransfer = calculateNetAmountAfterFee(\r\n\t\t\t\t\t\t\tsingleSwapResult\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tIERC20(USDC).transfer(msg.sender, amountToTransfer);\r\n\r\n\t\t\t\t\t\trequire(\r\n\t\t\t\t\t\t\tsingleSwapResult > 0,\r\n\t\t\t\t\t\t\t\"Swap Failed, Try Burn()\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tuint256 amountOutHop = multiHopSwap(\r\n\t\t\t\t\t\t\taddress(USDC),\r\n\t\t\t\t\t\t\taddress(WNATIVE),\r\n\t\t\t\t\t\t\taddress(assets[underweightVaults[i]]),\r\n\t\t\t\t\t\t\tunderweightAmounts[i] / 1e12,\r\n\t\t\t\t\t\t\taddress(this)\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tuint256 amountToTransfer = calculateNetAmountAfterFee(\r\n\t\t\t\t\t\t\tamountOutHop\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tIERC20(USDC).transfer(msg.sender, amountToTransfer);\r\n\r\n\t\t\t\t\t\trequire(amountOutHop > 0, \"Swap Failed\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _resize(\r\n\t\tuint256[] memory arr,\r\n\t\tuint256 size\r\n\t) internal pure returns (uint256[] memory) {\r\n\t\tuint256[] memory ret = new uint256[](size);\r\n\t\tfor (uint256 i; i < size; i++) {\r\n\t\t\tret[i] = arr[i];\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n}\r\n"
    },
    "contracts/core/BaluniStake.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\ncontract BaluniStake is ReentrancyGuard {\r\n\tIERC20 public immutable stakingToken;\r\n\tIERC20 public immutable rewardToken;\r\n\r\n\tmapping(address => uint256) public balanceStakedOf;\r\n\tmapping(address => uint256) public stakeTimestamp;\r\n\tuint256 public stakingSupply;\r\n\r\n\tuint256 private constant MULTIPLIER = 1e18;\r\n\tuint256 private rewardIndex;\r\n\tmapping(address => uint256) private rewardIndexOf;\r\n\tmapping(address => uint256) private earned;\r\n\r\n\tuint256 private constant STAKING_PERIOD = 365 days;\r\n\r\n\tevent RewardClaimed(address indexed user, uint256 amount);\r\n\tevent Staked(address indexed user, uint256 amount);\r\n\tevent Unstaked(address indexed user, uint256 amount);\r\n\r\n\tconstructor(address _stakingToken, address _rewardToken) {\r\n\t\trequire(\r\n\t\t\t_stakingToken != address(0) && _rewardToken != address(0),\r\n\t\t\t\"Invalid token address\"\r\n\t\t);\r\n\t\tstakingToken = IERC20(_stakingToken);\r\n\t\trewardToken = IERC20(_rewardToken);\r\n\t}\r\n\r\n\tfunction updateRewardIndex(uint256 reward) internal {\r\n\t\tif (stakingSupply > 0) {\r\n\t\t\trewardIndex =\r\n\t\t\t\trewardIndex +\r\n\t\t\t\t((reward * (MULTIPLIER)) / (stakingSupply));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction updateRewardIndexPublic(uint256 reward) public {\r\n\t\trequire(reward > 0, \"Reward must be positive\");\r\n\t\trequire(stakingSupply > 0, \"No staking supply to distribute rewards\");\r\n\t\trewardToken.transferFrom(msg.sender, address(this), reward);\r\n\t\tupdateRewardIndex(reward);\r\n\t}\r\n\r\n\tfunction _calculateRewards(address account) private view returns (uint256) {\r\n\t\tuint256 timeStaked = block.timestamp - (stakeTimestamp[account]);\r\n\t\ttimeStaked = timeStaked > STAKING_PERIOD ? STAKING_PERIOD : timeStaked;\r\n\t\tuint256 shares = balanceStakedOf[account];\r\n\t\tuint256 rewardDelta = rewardIndex - (rewardIndexOf[account]);\r\n\t\treturn\r\n\t\t\t(shares * (timeStaked) * (rewardDelta)) /\r\n\t\t\t(MULTIPLIER) /\r\n\t\t\t(STAKING_PERIOD);\r\n\t}\r\n\r\n\tfunction calculateRewardsEarned(\r\n\t\taddress account\r\n\t) external view returns (uint256) {\r\n\t\treturn earned[account] + (_calculateRewards(account));\r\n\t}\r\n\r\n\tfunction _updateRewards(address account) internal {\r\n\t\tuint256 rewards = _calculateRewards(account);\r\n\t\tearned[account] = earned[account] + (rewards);\r\n\t\trewardIndexOf[account] = rewardIndex;\r\n\t}\r\n\r\n\tfunction stake(uint256 amount) external nonReentrant {\r\n\t\t_updateRewards(msg.sender);\r\n\t\tbalanceStakedOf[msg.sender] = balanceStakedOf[msg.sender] + (amount);\r\n\t\tstakingSupply = stakingSupply + (amount);\r\n\t\tstakeTimestamp[msg.sender] = block.timestamp;\r\n\t\tstakingToken.transferFrom(msg.sender, address(this), amount);\r\n\t\temit Staked(msg.sender, amount);\r\n\t}\r\n\r\n\tfunction unstake(uint256 amount) external nonReentrant {\r\n\t\t_updateRewards(msg.sender);\r\n\t\tuint256 currentBalance = balanceStakedOf[msg.sender];\r\n\t\trequire(currentBalance >= amount, \"Insufficient balance to unstake\");\r\n\t\tbalanceStakedOf[msg.sender] = currentBalance - (amount);\r\n\t\tstakingSupply = stakingSupply - (amount);\r\n\t\tstakingToken.transfer(msg.sender, amount);\r\n\t\temit Unstaked(msg.sender, amount);\r\n\t}\r\n\r\n\tfunction claim() external nonReentrant returns (uint256) {\r\n\t\t_updateRewards(msg.sender);\r\n\t\tuint256 reward = earned[msg.sender];\r\n\t\trequire(reward > 0, \"No rewards to claim\");\r\n\t\tearned[msg.sender] = 0;\r\n\t\trewardToken.transfer(msg.sender, reward);\r\n\t\temit RewardClaimed(msg.sender, reward);\r\n\t\treturn reward;\r\n\t}\r\n\r\n\tfunction claimTo(\r\n\t\taddress staker,\r\n\t\taddress _to\r\n\t) public nonReentrant returns (uint256) {\r\n\t\t_updateRewards(staker);\r\n\t\tuint256 reward = earned[staker];\r\n\t\trequire(reward > 0, \"No rewards to claim\");\r\n\t\tearned[staker] = 0;\r\n\t\trewardToken.transfer(_to, reward);\r\n\t\temit RewardClaimed(_to, reward);\r\n\t\treturn reward;\r\n\t}\r\n}\r\n"
    },
    "contracts/helpers/Oracle.sol": {
      "content": "import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract Oracle {\r\n\tAggregatorV3Interface internal priceFeed;\r\n\r\n\tconstructor(address _priceFeedAddress) {\r\n\t\tpriceFeed = AggregatorV3Interface(_priceFeedAddress);\r\n\t}\r\n\r\n\tfunction getLatestPrice() public view returns (uint256) {\r\n\t\t(, int256 price, , , ) = priceFeed.latestRoundData();\r\n\t\t// Assumiamo che il prezzo sia sempre positivo\r\n\t\treturn uint256(price); // Adatta questa moltiplicazione in base alla tua necessità\r\n\t}\r\n}\r\n"
    },
    "contracts/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IVault {\r\n\tfunction token() external view returns (address);\r\n\r\n\tfunction underlying() external view returns (address);\r\n\r\n\tfunction name() external view returns (string memory);\r\n\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\tfunction decimals() external view returns (uint8);\r\n\r\n\tfunction controller() external view returns (address);\r\n\r\n\tfunction governance() external view returns (address);\r\n\r\n\tfunction getPricePerFullShare() external view returns (uint256);\r\n\r\n\tfunction deposit(uint256, address) external;\r\n\r\n\tfunction depositAll() external;\r\n\r\n\tfunction withdraw(uint256, address, address, uint256) external;\r\n\r\n\tfunction withdrawAll() external;\r\n}\r\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IWETH {\r\n\tfunction deposit() external payable;\r\n\r\n\tfunction transfer(address to, uint value) external returns (bool);\r\n\r\n\tfunction withdraw(uint) external;\r\n}\r\n"
    },
    "contracts/libs/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n/// @title Contains 512-bit math functions\r\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\r\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\r\nlibrary FullMath {\r\n\t/// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n\t/// @param a The multiplicand\r\n\t/// @param b The multiplier\r\n\t/// @param denominator The divisor\r\n\t/// @return result The 256-bit result\r\n\t/// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n\tfunction mulDiv(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tuint256 denominator\r\n\t) internal pure returns (uint256 result) {\r\n\t\tunchecked {\r\n\t\t\t// 512-bit multiply [prod1 prod0] = a * b\r\n\t\t\t// Compute the product mod 2**256 and mod 2**256 - 1\r\n\t\t\t// then use the Chinese Remainder Theorem to reconstruct\r\n\t\t\t// the 512 bit result. The result is stored in two 256\r\n\t\t\t// variables such that product = prod1 * 2**256 + prod0\r\n\t\t\tuint256 prod0 = a * b; // Least significant 256 bits of the product\r\n\t\t\tuint256 prod1; // Most significant 256 bits of the product\r\n\t\t\tassembly {\r\n\t\t\t\tlet mm := mulmod(a, b, not(0))\r\n\t\t\t\tprod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n\t\t\t}\r\n\r\n\t\t\t// Make sure the result is less than 2**256.\r\n\t\t\t// Also prevents denominator == 0\r\n\t\t\trequire(denominator > prod1);\r\n\r\n\t\t\t// Handle non-overflow cases, 256 by 256 division\r\n\t\t\tif (prod1 == 0) {\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tresult := div(prod0, denominator)\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\r\n\t\t\t///////////////////////////////////////////////\r\n\t\t\t// 512 by 256 division.\r\n\t\t\t///////////////////////////////////////////////\r\n\r\n\t\t\t// Make division exact by subtracting the remainder from [prod1 prod0]\r\n\t\t\t// Compute remainder using mulmod\r\n\t\t\tuint256 remainder;\r\n\t\t\tassembly {\r\n\t\t\t\tremainder := mulmod(a, b, denominator)\r\n\t\t\t}\r\n\t\t\t// Subtract 256 bit number from 512 bit number\r\n\t\t\tassembly {\r\n\t\t\t\tprod1 := sub(prod1, gt(remainder, prod0))\r\n\t\t\t\tprod0 := sub(prod0, remainder)\r\n\t\t\t}\r\n\r\n\t\t\t// Factor powers of two out of denominator\r\n\t\t\t// Compute largest power of two divisor of denominator.\r\n\t\t\t// Always >= 1.\r\n\t\t\tuint256 twos = (0 - denominator) & denominator;\r\n\t\t\t// Divide denominator by power of two\r\n\t\t\tassembly {\r\n\t\t\t\tdenominator := div(denominator, twos)\r\n\t\t\t}\r\n\r\n\t\t\t// Divide [prod1 prod0] by the factors of two\r\n\t\t\tassembly {\r\n\t\t\t\tprod0 := div(prod0, twos)\r\n\t\t\t}\r\n\t\t\t// Shift in bits from prod1 into prod0. For this we need\r\n\t\t\t// to flip `twos` such that it is 2**256 / twos.\r\n\t\t\t// If twos is zero, then it becomes one\r\n\t\t\tassembly {\r\n\t\t\t\ttwos := add(div(sub(0, twos), twos), 1)\r\n\t\t\t}\r\n\t\t\tprod0 |= prod1 * twos;\r\n\r\n\t\t\t// Invert denominator mod 2**256\r\n\t\t\t// Now that denominator is an odd number, it has an inverse\r\n\t\t\t// modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n\t\t\t// Compute the inverse by starting with a seed that is correct\r\n\t\t\t// correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n\t\t\tuint256 inv = (3 * denominator) ^ 2;\r\n\t\t\t// Now use Newton-Raphson iteration to improve the precision.\r\n\t\t\t// Thanks to Hensel's lifting lemma, this also works in modular\r\n\t\t\t// arithmetic, doubling the correct bits in each step.\r\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**8\r\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**16\r\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**32\r\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**64\r\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**128\r\n\t\t\tinv *= 2 - denominator * inv; // inverse mod 2**256\r\n\r\n\t\t\t// Because the division is now exact we can divide by multiplying\r\n\t\t\t// with the modular inverse of denominator. This will give us the\r\n\t\t\t// correct result modulo 2**256. Since the preconditions guarantee\r\n\t\t\t// that the outcome is less than 2**256, this is the final result.\r\n\t\t\t// We don't need to compute the high bits of the result and prod1\r\n\t\t\t// is no longer required.\r\n\t\t\tresult = prod0 * inv;\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n\t/// @param a The multiplicand\r\n\t/// @param b The multiplier\r\n\t/// @param denominator The divisor\r\n\t/// @return result The 256-bit result\r\n\tfunction mulDivRoundingUp(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tuint256 denominator\r\n\t) internal pure returns (uint256 result) {\r\n\t\tunchecked {\r\n\t\t\tresult = mulDiv(a, b, denominator);\r\n\t\t\tif (mulmod(a, b, denominator) > 0) {\r\n\t\t\t\trequire(result < type(uint256).max);\r\n\t\t\t\tresult++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 400
    },
    "viaIR": true,
    "evmVersion": "london",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}